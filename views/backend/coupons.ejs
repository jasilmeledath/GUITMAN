<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('./partials/meta') %>
    <!-- Favicon -->
    <!-- Template CSS -->
    <link href="/backend/css/main.css" rel="stylesheet" type="text/css" />
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            border-color: #86b7fe;
        }
        .card {
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            transition: all 0.3s ease;
        }
        .btn-primary {
            background-color: #3b82f6;
            border-color: #3b82f6;
            transition: all 0.3s ease;
        }
        .btn-primary:hover {
            background-color: #2563eb;
            border-color: #2563eb;
        }
        .btn-outline-primary {
            color: #3b82f6;
            border-color: #3b82f6;
        }
        .btn-outline-primary:hover {
            background-color: #3b82f6;
            color: white;
        }
        .btn-outline-danger {
            color: #ef4444;
            border-color: #ef4444;
        }
        .btn-outline-danger:hover {
            background-color: #ef4444;
            color: white;
        }
        .badge {
            font-size: 0.75rem;
            padding: 0.35em 0.65em;
            font-weight: 600;
            border-radius: 0.375rem;
        }
        .badge-success {
            background-color: #10b981;
            color: white;
        }
        .badge-danger {
            background-color: #ef4444;
            color: white;
        }
        .table-hover tbody tr:hover {
            background-color: rgba(59, 130, 246, 0.05);
        }
        .modal-content {
            border-radius: 0.75rem;
            border: none;
        }
        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
        }
        select.form-control option {
            padding: 10px;
        }
        select.form-control[multiple] {
            height: auto;
            min-height: 100px;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div id="notification" class="fixed top-4 right-4 z-50 hidden px-6 py-4 rounded-lg shadow-lg text-white font-medium"></div>
    <div class="screen-overlay"></div>
    <%- include('./partials/leftNav') %>
    <main class="main-wrap">
        <%- include('./partials/header') %>
        <section class="content-main p-4">
            <!-- Page Header -->
            <div class="content-header mb-6 flex flex-col md:flex-row justify-between items-start md:items-center">
                <div>
                    <h2 class="content-title card-title text-2xl font-bold text-gray-800">Coupons</h2>
                    <p class="text-gray-600 mt-1">Add, edit or delete a coupon</p>
                </div>
                <div class="mt-4 md:mt-0">
                    <input type="text" placeholder="Search Coupons" class="form-control bg-white pr-10 pl-4 py-2 rounded-lg border-gray-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50" />
                </div>
            </div>
            
            <!-- Coupons Listing Table -->
            <div class="card bg-white mb-8">
                <div class="card-body p-6">
                    <div class="table-responsive">
                        <table class="table table-hover w-full">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Coupon Code</th>
                                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Discount</th>
                                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Min Amount</th>
                                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expiry Date</th>
                                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th class="py-3 px-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200">
                                <% coupons.forEach((coupon, index) => { %>
                                    <tr class="hover:bg-gray-50 transition-colors">
                                        <td class="py-3 px-4 whitespace-nowrap"><%= index + 1 %></td>
                                        <td class="py-3 px-4"><b><%= coupon.coupon_code %></b></td>
                                        <td class="py-3 px-4"><%= coupon.coupon_type.charAt(0).toUpperCase() + coupon.coupon_type.slice(1) %></td>
                                        <td class="py-3 px-4">
                                            <%= coupon.discount %>
                                            <%= coupon.coupon_type === 'percentage' ? '%' : '₹' %>
                                        </td>
                                        <td class="py-3 px-4">₹<%= coupon.min_amount %></td>
                                        <td class="py-3 px-4"><%= new Date(coupon.expire_date).toDateString() %></td>
                                        <td class="py-3 px-4">
                                            <span class="<%= coupon.is_active ? 'text-green-500' : 'text-red-500' %>">
                                                <%= coupon.is_active ? 'Active' : 'Disabled' %>
                                            </span>
                                        </td>
                                        <td class="py-3 px-4 text-right">
                                            <div class="flex items-center justify-end space-x-2">
                                                <button type="button" class="btn btn-sm btn-outline-primary edit-coupon" data-bs-toggle="modal" data-bs-target="#editCouponModal"
                                                    data-id="<%= coupon._id %>" 
                                                    data-coupon_code="<%= coupon.coupon_code %>" 
                                                    data-coupon_type="<%= coupon.coupon_type %>" 
                                                    data-discount="<%= coupon.discount %>" 
                                                    data-min_amount="<%= coupon.min_amount %>" 
                                                    data-max_discount="<%= coupon.max_discount %>" 
                                                    data-expire_date="<%= coupon.expire_date.toISOString().slice(0,10) %>" 
                                                    data-usage_limit="<%= coupon.usage_limit %>" 
                                                    data-single_use_per_user="<%= coupon.single_use_per_user %>">
                                                    Edit
                                                </button>
                                                <label class="relative inline-flex items-center cursor-pointer">
                                                    <input type="checkbox" value="" class="sr-only peer" <%= coupon.is_active ? 'checked' : '' %> onchange="toggleCouponStatus('<%= coupon._id %>', this.checked)">
                                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                                                </label>
                                                <a class="btn btn-sm btn-outline-danger delete-coupon" href="#" data-id="<%= coupon._id %>">Delete</a>
                                            </div>
                                        </td>
                                    </tr>
                                <% }); %>
                                <% if (coupons.length === 0) { %>
                                    <tr>
                                        <td colspan="9" class="py-8 text-center text-gray-500">
                                            <div class="flex flex-col items-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-300 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4M20 12a2 2 0 002-2V6a2 2 0 00-2-2H4a2 2 0 00-2 2v4a2 2 0 002 2M20 12v6a2 2 0 01-2 2H6a2 2 0 01-2-2v-6" />
                                                </svg>
                                                <h3 class="text-lg font-medium">No coupons available</h3>
                                                <p class="text-sm">Create your first coupon to start offering discounts</p>
                                            </div>
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination Controls -->
                    <div class="mt-4 flex justify-center">
                        <nav aria-label="Pagination">
                            <ul class="inline-flex -space-x-px">
                                <% if (currentPage > 1) { %>
                                    <li>
                                        <a href="?page=<%= currentPage - 1 %>" class="py-2 px-3 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700">Previous</a>
                                    </li>
                                <% } else { %>
                                    <li>
                                        <span class="py-2 px-3 ml-0 leading-tight text-gray-400 bg-gray-200 border border-gray-300 rounded-l-lg">Previous</span>
                                    </li>
                                <% } %>
                                
                                <% for(let i = 1; i <= totalPages; i++) { %>
                                    <% if (i === currentPage) { %>
                                        <li>
                                            <span class="py-2 px-3 leading-tight text-blue-600 bg-blue-50 border border-blue-300"><%= i %></span>
                                        </li>
                                    <% } else { %>
                                        <li>
                                            <a href="?page=<%= i %>" class="py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700"><%= i %></a>
                                        </li>
                                    <% } %>
                                <% } %>
                                
                                <% if (currentPage < totalPages) { %>
                                    <li>
                                        <a href="?page=<%= currentPage + 1 %>" class="py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700">Next</a>
                                    </li>
                                <% } else { %>
                                    <li>
                                        <span class="py-2 px-3 leading-tight text-gray-400 bg-gray-200 border border-gray-300 rounded-r-lg">Next</span>
                                    </li>
                                <% } %>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
            
            <!-- Coupon Creation Form Section -->
            <div class="card bg-white">
                <div class="card-body p-6">
                    <div class="bg-blue-50 p-5 rounded-lg">
                        <h4 class="font-bold mb-4 text-gray-800 border-b pb-2">Create New Coupon</h4>
                        <form id="createCouponForm" action="/admin/dashboard/product/create-coupon" method="POST">
                            <div class="mb-4">
                                <label for="coupon_code" class="form-label text-gray-700">Coupon Code</label>
                                <input type="text" name="coupon_code" placeholder="Enter coupon code" class="form-control border p-2 rounded-lg w-full" id="coupon_code" required />
                            </div>
                            <div class="mb-4">
                                <label for="coupon_type" class="form-label text-gray-700">Coupon Type</label>
                                <select name="coupon_type" id="coupon_type" class="form-control border p-2 rounded-lg w-full" required>
                                    <option value="percentage">Percentage</option>
                                    <option value="fixed">Fixed</option>
                                </select>
                            </div>
                            <div class="mb-4">
                                <label for="discount" class="form-label text-gray-700">Discount</label>
                                <input type="number" name="discount" placeholder="Enter discount value" class="form-control border p-2 rounded-lg w-full" id="discount" required />
                            </div>
                            <div class="mb-4">
                                <label for="min_amount" class="form-label text-gray-700">Minimum Amount</label>
                                <input type="number" name="min_amount" placeholder="Enter minimum purchase amount" class="form-control border p-2 rounded-lg w-full" id="min_amount" />
                            </div>
                            <div class="mb-4">
                                <label for="max_discount" class="form-label text-gray-700">Maximum Discount</label>
                                <input type="number" name="max_discount" placeholder="Enter maximum discount cap" class="form-control border p-2 rounded-lg w-full" id="max_discount" />
                            </div>
                            <div class="mb-4">
                                <label for="expire_date" class="form-label text-gray-700">Expiry Date</label>
                                <input type="date" name="expire_date" class="form-control border p-2 rounded-lg w-full" id="expire_date" required />
                            </div>
                            <div class="mb-4">
                                <label for="usage_limit" class="form-label text-gray-700">Usage Limit</label>
                                <input type="number" name="usage_limit" placeholder="Enter usage limit" class="form-control border p-2 rounded-lg w-full" id="usage_limit" />
                            </div>
                            <div class="mb-4">
                                <label for="single_use_per_user" class="form-label text-gray-700">Single Use Per User</label>
                                <select name="single_use_per_user" id="single_use_per_user" class="form-control border p-2 rounded-lg w-full">
                                    <option value="false">No</option>
                                    <option value="true">Yes</option>
                                </select>
                            </div>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary w-full py-2 rounded-lg font-medium flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    Create Coupon
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </section>
        <%- include('./partials/footer') %>
    </main>
    
    <!-- Edit Coupon Modal -->
    <div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editCouponForm">
                    <div class="modal-body">
                        <input type="hidden" name="id" id="edit-coupon-id">
                        <div class="mb-3">
                            <label for="edit-coupon-code" class="form-label">Coupon Code</label>
                            <input type="text" class="form-control" id="edit-coupon-code" name="coupon_code" required>
                            <div id="editCouponCodeError" class="text-danger mt-1"></div>
                        </div>
                        <div class="mb-3">
                            <label for="edit-coupon-type" class="form-label">Coupon Type</label>
                            <select class="form-control" id="edit-coupon-type" name="coupon_type" required>
                                <option value="percentage">Percentage</option>
                                <option value="fixed">Fixed</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="edit-discount" class="form-label">Discount</label>
                            <input type="number" class="form-control" id="edit-discount" name="discount" required>
                        </div>
                        <div class="mb-3">
                            <label for="edit-min-amount" class="form-label">Minimum Amount</label>
                            <input type="number" class="form-control" id="edit-min-amount" name="min_amount">
                        </div>
                        <div class="mb-3">
                            <label for="edit-max-discount" class="form-label">Maximum Discount</label>
                            <input type="number" class="form-control" id="edit-max-discount" name="max_discount">
                        </div>
                        <div class="mb-3">
                            <label for="edit-expire-date" class="form-label">Expiry Date</label>
                            <input type="date" class="form-control" id="edit-expire-date" name="expire_date" required>
                        </div>
                        <div class="mb-3">
                            <label for="edit-usage-limit" class="form-label">Usage Limit</label>
                            <input type="number" class="form-control" id="edit-usage-limit" name="usage_limit">
                        </div>
                        <div class="mb-3">
                            <label for="edit-single-use" class="form-label">Single Use Per User</label>
                            <select class="form-control" id="edit-single-use" name="single_use_per_user">
                                <option value="false">No</option>
                                <option value="true">Yes</option>
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Function to show notifications using SweetAlert2
        function showNotification(message, isSuccess = true) {
            Swal.fire({
                icon: isSuccess ? 'success' : 'error',
                title: isSuccess ? 'Success!' : 'Error!',
                text: message,
                customClass: {
                    container: 'bg-gray-100 rounded-lg shadow-xl',
                    title: 'text-2xl font-bold text-gray-800',
                    content: 'text-gray-600',
                    confirmButton: isSuccess ? 'bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded' : 'bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded'
                }
            });
        }

        // Toggle Coupon Active Status using fetch
        async function toggleCouponStatus(id, isActive) {
            try {
                const response = await fetch(`/admin/dashboard/product/toggle-active/${id}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ is_active: isActive })
                });
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: `Coupon ${isActive ? 'activated' : 'deactivated'} successfully!`,
                        customClass: {
                            container: 'bg-gray-100 rounded-lg shadow-xl',
                            title: 'text-2xl font-bold text-gray-800',
                            content: 'text-gray-600',
                            confirmButton: 'bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded'
                        }
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error('Failed to update coupon status');
                }
            } catch (error) {
                console.error('Error updating coupon status:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Failed to update coupon status. Please try again.',
                    customClass: {
                        container: 'bg-gray-100 rounded-lg shadow-xl',
                        title: 'text-2xl font-bold text-gray-800',
                        content: 'text-gray-600',
                        confirmButton: 'bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded'
                    }
                });
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Toggle additional fields based on coupon type selection for create coupon form
            document.getElementById('coupon_type').addEventListener('change', function() {
                // Additional logic for coupon type can be added here if needed
            });

            // Coupon creation form submission using fetch with validation for negative values
            const offerForm = document.getElementById('createCouponForm');
            offerForm.addEventListener('submit', function(event) {
                event.preventDefault();
                const form = this;
                const couponCode = document.querySelector('#coupon_code').value.trim();
                const couponType = document.querySelector('#coupon_type').value;
                const discount = document.querySelector('#discount').value;
                const minAmount = document.querySelector('#min_amount').value || 0;
                const maxDiscount = document.querySelector('#max_discount').value || 0;
                const expireDate = document.querySelector('#expire_date').value;
                const usageLimit = document.querySelector('#usage_limit').value || 0;
                const singleUsePerUser = document.querySelector('#single_use_per_user').value;
                
                // Basic validation
                if (!couponCode) {
                    showNotification("Coupon code is required.", false);
                    return;
                }
                if (discount < 0) {
                    showNotification("Discount cannot be negative.", false);
                    return;
                }
                if(minAmount < 0) {
                    showNotification("Minimum amount cannot be negative.", false);
                    return;
                }
                if(maxDiscount < 0) {
                    showNotification("Maximum discount cannot be negative.", false);
                    return;
                }
                if(usageLimit < 0) {
                    showNotification("Usage limit cannot be negative.", false);
                    return;
                }
                // Create the coupon object
                const couponData = {
                    coupon_code: couponCode,
                    coupon_type: couponType,
                    discount: parseFloat(discount),
                    min_amount: parseFloat(minAmount),
                    max_discount: parseFloat(maxDiscount),
                    expire_date: expireDate,
                    usage_limit: parseFloat(usageLimit),
                    single_use_per_user: singleUsePerUser
                };
                
                try {
                    fetch(form.action, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(couponData)
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: result.message || 'Coupon created successfully!',
                                customClass: {
                                    container: 'bg-gray-100 rounded-lg shadow-xl',
                                    title: 'text-2xl font-bold text-gray-800',
                                    content: 'text-gray-600',
                                    confirmButton: 'bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded'
                                }
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            throw new Error(result.message || 'Failed to create coupon');
                        }
                    })
                    .catch(err => {
                        console.error('Error creating coupon:', err);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: err.message || 'Failed to create coupon. Please try again.',
                            customClass: {
                                container: 'bg-gray-100 rounded-lg shadow-xl',
                                title: 'text-2xl font-bold text-gray-800',
                                content: 'text-gray-600',
                                confirmButton: 'bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded'
                            }
                        });
                    });
                } catch (error) {
                    console.error('Error creating coupon:', error);
                }
            });

            // Delete coupon functionality using fetch and SweetAlert2 confirmation
            document.querySelectorAll('.delete-coupon').forEach(button => {
                button.addEventListener('click', async function (e) {
                    e.preventDefault();
                    const couponId = this.getAttribute('data-id');
                    const confirmation = await Swal.fire({
                        title: 'Are you sure?',
                        text: "Do you really want to delete this coupon?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete it!'
                    });
                    if (confirmation.isConfirmed) {
                        try {
                            const response = await fetch(`/admin/dashboard/product/delete-coupon/${couponId}`, {
                                method: 'DELETE',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            const result = await response.json();
                            if (response.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: 'Coupon has been deleted.',
                                    customClass: {
                                        container: 'bg-gray-100 rounded-lg shadow-xl',
                                        title: 'text-2xl font-bold text-gray-800',
                                        content: 'text-gray-600',
                                        confirmButton: 'bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded'
                                    }
                                }).then(() => window.location.reload());
                            } else {
                                throw new Error(result.message || 'Failed to delete coupon');
                            }
                        } catch (error) {
                            console.error('Error deleting coupon:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Failed to delete coupon. Please try again.',
                                customClass: {
                                    container: 'bg-gray-100 rounded-lg shadow-xl',
                                    title: 'text-2xl font-bold text-gray-800',
                                    content: 'text-gray-600',
                                    confirmButton: 'bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded'
                                }
                            });
                        }
                    }
                });
            });

            // Edit coupon modal: Populate with data using Bootstrap modal events
            $('#editCouponModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var id = button.data('id');
                var coupon_code = button.data('coupon_code');
                var coupon_type = button.data('coupon_type');
                var discount = button.data('discount');
                var min_amount = button.data('min_amount');
                var max_discount = button.data('max_discount');
                var expire_date = button.data('expire_date');
                var usage_limit = button.data('usage_limit');
                var single_use_per_user = button.data('single_use_per_user');
                var modal = $(this);
                modal.find('#edit-coupon-id').val(id);
                modal.find('#edit-coupon-code').val(coupon_code);
                modal.find('#edit-coupon-type').val(coupon_type);
                modal.find('#edit-discount').val(discount);
                modal.find('#edit-min-amount').val(min_amount);
                modal.find('#edit-max-discount').val(max_discount);
                modal.find('#edit-expire-date').val(expire_date);
                modal.find('#edit-usage-limit').val(usage_limit);
                modal.find('#edit-single-use').val(single_use_per_user);
                modal.find('#editCouponCodeError').text('');
            });

            // Handle edit coupon form submission via fetch with validation
            document.querySelector('#editCouponForm').addEventListener('submit', async function (event) {
                event.preventDefault();
                const formData = {
                    couponCode: document.querySelector('#edit-coupon-code').value.trim(),
                    couponType: document.querySelector('#edit-coupon-type').value,
                    discount: document.querySelector('#edit-discount').value,
                    minAmount: document.querySelector('#edit-min-amount').value,
                    maxDiscount: document.querySelector('#edit-max-discount').value,
                    expireDate: document.querySelector('#edit-expire-date').value,
                    usageLimit: document.querySelector('#edit-usage-limit').value,
                    singleUsePerUser: document.querySelector('#edit-single-use').value
                };
                // Basic client-side validation
                function validateCouponForm(formData) {
                    const errors = {};
                    if (!formData.couponCode || formData.couponCode.trim() === '') {
                        errors.couponCode = "Coupon code is required";
                    }
                    if (formData.discount === undefined || formData.discount === null || formData.discount === '') {
                        errors.discount = "Discount value is required";
                    } else if (parseFloat(formData.discount) < 0) {
                        errors.discount = "Discount cannot be negative";
                    } else if (formData.couponType === 'percentage' && parseFloat(formData.discount) > 100) {
                        errors.discount = "Percentage discount cannot exceed 100%";
                    }
                    if (formData.minAmount && parseFloat(formData.minAmount) < 0) {
                        errors.minAmount = "Minimum amount cannot be negative";
                    }
                    if (formData.maxDiscount && parseFloat(formData.maxDiscount) < 0) {
                        errors.maxDiscount = "Maximum discount cannot be negative";
                    }
                    if (!formData.expireDate) {
                        errors.expireDate = "Expiry date is required";
                    } else {
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        const expireDate = new Date(formData.expireDate);
                        if (expireDate < today) {
                            errors.expireDate = "Expiry date cannot be in the past";
                        }
                    }
                    if (formData.usageLimit && parseFloat(formData.usageLimit) < 0) {
                        errors.usageLimit = "Usage limit cannot be negative";
                    }
                    return errors;
                }
                function displayErrors(errors, formPrefix) {
                    document.querySelectorAll(`.${formPrefix}-error`).forEach(el => {
                        el.textContent = '';
                        el.classList.add('hidden');
                    });
                    Object.keys(errors).forEach(key => {
                        const errorElement = document.getElementById(`${formPrefix}-${key}-error`);
                        if (errorElement) {
                            errorElement.textContent = errors[key];
                            errorElement.classList.remove('hidden');
                        }
                    });
                    return Object.keys(errors).length === 0;
                }
                const errors = validateCouponForm(formData);
                const isValid = displayErrors(errors, 'edit');
                if (isValid) {
                    const id = document.querySelector('#edit-coupon-id').value;
                    try {
                        const response = await fetch(`/admin/dashboard/product/edit/${id}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                coupon_code: formData.couponCode,
                                coupon_type: formData.couponType,
                                discount: parseFloat(formData.discount),
                                min_amount: formData.minAmount ? parseFloat(formData.minAmount) : 0,
                                max_discount: formData.maxDiscount ? parseFloat(formData.maxDiscount) : 0,
                                expire_date: formData.expireDate,
                                usage_limit: formData.usageLimit ? parseFloat(formData.usageLimit) : 0,
                                single_use_per_user: formData.singleUsePerUser
                            })
                        });
                        const result = await response.json();
                        if (response.ok) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Coupon updated successfully!',
                                customClass: {
                                    container: 'bg-gray-100 rounded-lg shadow-xl',
                                    title: 'text-2xl font-bold text-gray-800',
                                    content: 'text-gray-600',
                                    confirmButton: 'bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded'
                                }
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            throw new Error(result.message || 'Failed to update coupon');
                        }
                    } catch (error) {
                        console.error('Error updating coupon:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: error.message || 'Failed to update coupon. Please try again.',
                            customClass: {
                                container: 'bg-gray-100 rounded-lg shadow-xl',
                                title: 'text-2xl font-bold text-gray-800',
                                content: 'text-gray-600',
                                confirmButton: 'bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded'
                            }
                        });
                    }
                }
            });
        });
    </script>
    <%- include('./partials/scriptsLinks') %>
</body>
</html>
