<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('./partials/meta') %>
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="/backend/imgs/theme/favicon.svg" />
    <!-- Template CSS -->
    <link href="/backend/css/main.css" rel="stylesheet" type="text/css" />
    <!-- Chart.js Library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: {
                DEFAULT: '#3b82f6',
                dark: '#2563eb'
              }
            }
          }
        }
      }
    </script>
    <style>
      /* Custom styles for chart containers */
      .chart-card {
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
      }
      .chart-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateY(-2px);
      }
      .chart-card h4 {
        margin-bottom: 15px;
        font-size: 18px;
        color: #333;
        font-weight: 600;
      }
      .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
      }
      
      /* Stat card animations */
      .stat-card {
        transition: all 0.3s ease;
      }
      .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
      }
      
      /* Table styles */
      .table-responsive {
        border-radius: 8px;
        overflow: hidden;
      }
      .table th {
        background-color: #f9fafb;
        font-weight: 600;
      }
      .table tr {
        transition: background-color 0.2s;
      }
      .table tbody tr:hover {
        background-color: #f9fafb;
      }
      
      /* Badge styles */
      .badge-soft-success {
        background-color: #d1fae5;
        color: #047857;
      }
      .badge-soft-danger {
        background-color: #fee2e2;
        color: #b91c1c;
      }
      .badge-soft-warning {
        background-color: #fef3c7;
        color: #92400e;
      }
      .badge-soft-info {
        background-color: #e0f2fe;
        color: #0369a1;
      }
      
      /* Custom scrollbar */
      ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
      }
      ::-webkit-scrollbar-track {
        background: #f1f1f1;
      }
      ::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
      }
      ::-webkit-scrollbar-thumb:hover {
        background: #a1a1a1;
      }
      
      /* Dropdown animations */
      .group:hover .group-hover\:block {
        animation: fadeIn 0.2s ease-in-out;
      }
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      /* Form controls */
      .form-control:focus, .form-select:focus {
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
      }
      
      /* Button styles */
      .btn-primary {
        background-color: #3b82f6;
        border-color: #3b82f6;
        color: white;
        transition: all 0.2s;
      }
      .btn-primary:hover {
        background-color: #2563eb;
        border-color: #2563eb;
      }
      
      /* Pagination styles */
      .pagination .page-item.active .page-link {
        background-color: #3b82f6;
        border-color: #3b82f6;
      }
      .pagination .page-link {
        color: #3b82f6;
      }
      .pagination .page-link:hover {
        background-color: #eff6ff;
      }
    </style>
  </head>

  <body class="bg-gray-50">
    <div class="screen-overlay"></div>
    <%- include('./partials/leftNav') %>
    <main class="main-wrap min-h-screen flex flex-col">
      <%- include('./partials/header') %>
      <section class="content-main flex-grow p-6">
        <div class="content-header mb-6">
          <div>
            <h2 class="content-title card-title text-2xl font-bold text-gray-800">Dashboard</h2>
            <p class="text-gray-500">Whole data about your business here</p>
          </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div class="stat-card bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <article class="flex items-start gap-4">
              <span class="icon flex-shrink-0 w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center">
                <i class="text-primary material-icons md-monetization_on"></i>
              </span>
              <div class="flex flex-col">
                <h6 class="mb-1 text-sm font-medium text-gray-500">Revenue</h6>
                <span class="text-xl font-bold text-gray-800">₹<%=revenue%></span>
                <span class="text-xs text-gray-500 mt-1">Shipping fees are not included</span>
              </div>
            </article>
          </div>
          <div class="stat-card bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <article class="flex items-start gap-4">
              <span class="icon flex-shrink-0 w-12 h-12 rounded-full bg-green-100 flex items-center justify-center">
                <i class="text-green-600 material-icons md-local_shipping"></i>
              </span>
              <div class="flex flex-col">
                <h6 class="mb-1 text-sm font-medium text-gray-500">Orders</h6>
                <span class="text-xl font-bold text-gray-800"><%= ordersCount %></span>
                <span class="text-xs text-gray-500 mt-1">Excluding orders in transit</span>
              </div>
            </article>
          </div>
          <div class="stat-card bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <article class="flex items-start gap-4">
              <span class="icon flex-shrink-0 w-12 h-12 rounded-full bg-amber-100 flex items-center justify-center">
                <i class="text-amber-600 material-icons md-qr_code"></i>
              </span>
              <div class="flex flex-col">
                <h6 class="mb-1 text-sm font-medium text-gray-500">Products</h6>
                <span class="text-xl font-bold text-gray-800"><%= productsCount %></span>
                <span class="text-xs text-gray-500 mt-1">In your inventory</span>
              </div>
            </article>
          </div>
          <div class="stat-card bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <article class="flex items-start gap-4">
              <span class="icon flex-shrink-0 w-12 h-12 rounded-full bg-sky-100 flex items-center justify-center">
                <i class="text-sky-600 material-icons md-shopping_basket"></i>
              </span>
              <div class="flex flex-col">
                <h6 class="mb-1 text-sm font-medium text-gray-500">Monthly Earning</h6>
                <span class="text-xl font-bold text-gray-800">₹ <%= monthlyEarning %></span>
                <span class="text-xs text-gray-500 mt-1">Based in your local time</span>
              </div>
            </article>
          </div>
        </div>
        <!-- New Section: Sales Charts -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
  <div class="chart-card bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow">
    <h4 class="flex items-center gap-2 font-medium text-gray-800 mb-3">
      <i class="material-icons text-blue-600">trending_up</i> Yearly Sales
      <span class="ml-auto text-sm text-gray-500">Annual Growth</span>
    </h4>
    <div class="chart-container h-64">
      <canvas id="yearlyChart"></canvas>
    </div>
  </div>
  
  <div class="chart-card bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow">
    <h4 class="flex items-center gap-2 font-medium text-gray-800 mb-3">
      <i class="material-icons text-green-600">date_range</i> Monthly Sales
      <span class="ml-auto text-sm text-gray-500">Revenue Trends</span>
    </h4>
    <div class="chart-container h-64">
      <canvas id="monthlyChart"></canvas>
    </div>
  </div>
  
  <div class="chart-card bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow">
    <h4 class="flex items-center gap-2 font-medium text-gray-800 mb-3">
      <i class="material-icons text-amber-600">today</i> Daily Sales
      <span class="ml-auto text-sm text-gray-500">Last 7 Days</span>
    </h4>
    <div class="chart-container h-64">
      <canvas id="dailyChart"></canvas>
    </div>
  </div>
</div>

<script>
// Initialize Charts using Chart.js
document.addEventListener('DOMContentLoaded', function() {
  // Get color scheme from CSS variables if available, otherwise use defaults
  const getColor = (colorName, fallback) => {
    const style = getComputedStyle(document.documentElement);
    return style.getPropertyValue(`--color-${colorName}`) || fallback;
  };

  const primaryColor = getColor('primary', '#3b82f6');
  const secondaryColor = getColor('secondary', '#22c55e');
  const accentColor = getColor('accent', '#f59e0b');
  
  // Create gradients for better visual appeal
  const ctxYearly = document.getElementById('yearlyChart').getContext('2d');
  const yearlyGradient = ctxYearly.createLinearGradient(0, 0, 0, ctxYearly.canvas.height);
  yearlyGradient.addColorStop(0, 'rgba(59, 130, 246, 0.6)');
  yearlyGradient.addColorStop(1, 'rgba(59, 130, 246, 0.1)');

  // Dummy data for charts (replace with real data from backend if available)
  const yearlyLabels = <%- JSON.stringify(chartDataYearlyLabels) %>;
  const yearlySales = <%- JSON.stringify(chartDataYearlySales) %>;

  const monthlyLabels = <%- JSON.stringify(chartDataMonthlyLabels ) %>;
  const monthlySales = <%- JSON.stringify(chartDataMonthlySales ) %>;

  const dailyLabels = <%- JSON.stringify(chartDataDailyLabels) %>;
  const dailySales = <%- JSON.stringify(chartDataDailySales) %>;

  // Common chart options for consistency
  const commonOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.7)',
        padding: 10,
        cornerRadius: 4,
        titleFont: { weight: 'bold', size: 14 },
        bodyFont: { size: 13 },
        displayColors: true,
        callbacks: {
          label: function(context) {
            return 'Rs. ' + context.parsed.y.toLocaleString();
          }
        }
      },
      legend: { 
        display: false
      }
    },
    interaction: {
      mode: 'index',
      intersect: false
    },
    scales: {
      x: { 
        grid: { display: false },
        ticks: { font: { size: 11 } }
      },
      y: { 
        beginAtZero: true, 
        grid: { color: 'rgba(200, 200, 200, 0.2)' },
        ticks: {
          font: { size: 11 },
          callback: function(value) {
            if (value >= 1000) {
              return 'Rs. ' + value / 1000 + 'k';
            }
            return 'Rs. ' + value;
          }
        }
      }
    },
    animation: {
      duration: 1000,
      easing: 'easeOutQuart'
    }
  };

  // Yearly Chart - Area Chart with annotation
  const yearlyChart = new Chart(ctxYearly, {
    type: 'line',
    data: {
      labels: yearlyLabels,
      datasets: [{
        label: 'Yearly Sales',
        data: yearlySales,
        borderColor: primaryColor,
        backgroundColor: yearlyGradient,
        fill: true,
        tension: 0.4,
        borderWidth: 3,
        pointRadius: 4,
        pointBackgroundColor: '#ffffff',
        pointBorderColor: primaryColor,
        pointHoverRadius: 6
      }]
    },
    options: {
      ...commonOptions,
      plugins: {
        ...commonOptions.plugins,
        legend: { display: true, position: 'top' },
        annotation: {
          annotations: {
            line1: {
              type: 'line',
              yMin: Math.max(...yearlySales) * 0.85,
              yMax: Math.max(...yearlySales) * 0.85,
              borderColor: 'rgba(0, 0, 0, 0.2)',
              borderWidth: 1,
              borderDash: [6, 6],
              label: {
                enabled: true,
                content: 'Target',
                position: 'end'
              }
            }
          }
        }
      }
    }
  });

  // Monthly Chart - Bar Chart with gradient
  const ctxMonthly = document.getElementById('monthlyChart').getContext('2d');
  const monthlyGradient = ctxMonthly.createLinearGradient(0, 0, 0, ctxMonthly.canvas.height);
  monthlyGradient.addColorStop(0, 'rgba(34, 197, 94, 0.9)');
  monthlyGradient.addColorStop(1, 'rgba(34, 197, 94, 0.4)');
  
  const monthlyChart = new Chart(ctxMonthly, {
    type: 'bar',
    data: {
      labels: monthlyLabels,
      datasets: [{
        label: 'Monthly Sales',
        data: monthlySales,
        backgroundColor: monthlyGradient,
        borderColor: secondaryColor,
        borderWidth: 1,
        borderRadius: 4,
        hoverBackgroundColor: secondaryColor
      }]
    },
    options: {
      ...commonOptions,
      plugins: {
        ...commonOptions.plugins,
        legend: { display: true, position: 'top' }
      }
    }
  });

  // Daily Chart - Line Chart (replacing pie chart)
  const ctxDaily = document.getElementById('dailyChart').getContext('2d');
  const dailyChart = new Chart(ctxDaily, {
    type: 'line',
    data: {
      labels: dailyLabels,
      datasets: [{
        label: 'Daily Sales',
        data: dailySales,
        borderColor: accentColor,
        backgroundColor: 'rgba(245, 158, 11, 0.1)',
        borderWidth: 3,
        tension: 0,
        pointStyle: 'circle',
        pointRadius: 5,
        pointBackgroundColor: '#ffffff',
        pointBorderColor: accentColor,
        pointHoverRadius: 7,
        fill: false
      }]
    },
    options: {
      ...commonOptions,
      plugins: {
        ...commonOptions.plugins,
        legend: { display: true, position: 'top' }
      },
      scales: {
        ...commonOptions.scales,
        y: {
          ...commonOptions.scales.y,
          grid: {
            drawBorder: false,
            color: 'rgba(200, 200, 200, 0.2)'
          }
        }
      }
    }
  });

  // Responsive resize handler
  window.addEventListener('resize', function() {
    yearlyChart.resize();
    monthlyChart.resize();
    dailyChart.resize();
  });

  // Add toggle functionality for time periods
  const addChartToggle = (chartId, periods, chart, datasetIndex = 0) => {
    const container = document.getElementById(chartId).closest('.chart-card');
    if (!container) return;
    
    const toggleContainer = document.createElement('div');
    toggleContainer.className = 'flex gap-2 mt-2 text-xs';
    
    periods.forEach((period, index) => {
      const btn = document.createElement('button');
      btn.textContent = period;
      btn.className = index === 0 ? 
        'px-2 py-1 rounded bg-blue-100 text-blue-700' : 
        'px-2 py-1 rounded bg-gray-100 text-gray-600 hover:bg-gray-200';
        
      btn.addEventListener('click', (e) => {
        // Update active state
        toggleContainer.querySelectorAll('button').forEach(b => {
          b.className = 'px-2 py-1 rounded bg-gray-100 text-gray-600 hover:bg-gray-200';
        });
        btn.className = 'px-2 py-1 rounded bg-blue-100 text-blue-700';
        
        // Here you would typically fetch new data based on the period
        // For demo, we'll just generate random data
        const newData = Array.from({length: chart.data.labels.length}, () => 
          Math.floor(Math.random() * 30000) + 15000);
          
        chart.data.datasets[datasetIndex].data = newData;
        chart.update();
      });
      
      toggleContainer.appendChild(btn);
    });
    
    container.appendChild(toggleContainer);
  };

  // Add time period toggles for each chart
  addChartToggle('yearlyChart', ['5 Years', '10 Years', 'All Time'], yearlyChart);
  addChartToggle('monthlyChart', ['This Year', 'Last Year', '2 Years'], monthlyChart);
  addChartToggle('dailyChart', ['This Week', 'Last Week', '30 Days'], dailyChart);
});
</script>
        <!-- Top 10 Selling Products and Categories -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
  <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
    <header class="px-6 py-4 bg-gray-50 border-b border-gray-100">
      <h4 class="text-lg font-bold text-gray-800">Top 10 Selling Products</h4>
    </header>
    <div class="p-6">
      <% if(bestSellingProducts && bestSellingProducts.length > 0) { %>
        <div class="flex flex-col">
          <div class="h-64 mb-4">
            <svg id="productChart" viewBox="0 0 400 300" class="w-full h-full"></svg>
          </div>
          <div class="table-responsive mt-4">
            <table class="table w-full">
              <thead>
                <tr>
                  <th scope="col" class="px-4 py-3 text-left">Product Name</th>
                  <th scope="col" class="px-4 py-3 text-right">Total Quantity Sold</th>
                </tr>
              </thead>
              <tbody>
                <% 
                // Define colors array directly in the EJS template
                const productColors = [
                  '#4285F4', '#EA4335', '#FBBC05', '#34A853', '#FF6D01', 
                  '#46BFBD', '#F7464A', '#949FB1', '#9C27B0', '#3F51B5'
                ];
                
                bestSellingProducts.forEach(function(product, index) { 
                  const colorIndex = index % productColors.length;
                  const productColor = productColors[colorIndex];
                %>
                <tr class="border-t border-gray-100">
                  <td class="px-4 py-3 flex items-center">
                    <span class="w-3 h-3 rounded-full mr-2" style="background-color: <%= productColor %>"></span>
                    <%= product.product_name %>
                  </td>
                  <td class="px-4 py-3 text-right font-medium"><%= product.totalQuantity %></td>
                </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        </div>
      <% } else { %>
        <p class="text-center text-gray-500 py-8">No products found.</p>
      <% } %>
    </div>
  </div>
  
  <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
    <header class="px-6 py-4 bg-gray-50 border-b border-gray-100">
      <h4 class="text-lg font-bold text-gray-800">Top 10 Selling Categories</h4>
    </header>
    <div class="p-6">
      <% if(bestSellingCategories && bestSellingCategories.length > 0) { %>
        <div class="flex flex-col">
          <div class="h-64 mb-4">
            <svg id="categoryChart" viewBox="0 0 400 300" class="w-full h-full"></svg>
          </div>
          <div class="table-responsive mt-4">
            <table class="table w-full">
              <thead>
                <tr>
                  <th scope="col" class="px-4 py-3 text-left">Category Name</th>
                  <th scope="col" class="px-4 py-3 text-right">Total Quantity Sold</th>
                </tr>
              </thead>
              <tbody>
                <% 
                // Define colors array directly in the EJS template
                const categoryColors = [
                  '#1976D2', '#D32F2F', '#FFC107', '#388E3C', '#FF5722',
                  '#009688', '#E91E63', '#607D8B', '#673AB7', '#2196F3'
                ];
                
                bestSellingCategories.forEach(function(category, index) { 
                  const colorIndex = index % categoryColors.length;
                  const categoryColor = categoryColors[colorIndex];
                %>
                <tr class="border-t border-gray-100">
                  <td class="px-4 py-3 flex items-center">
                    <span class="w-3 h-3 rounded-full mr-2" style="background-color: <%= categoryColor %>"></span>
                    <%= category.name %>
                  </td>
                  <td class="px-4 py-3 text-right font-medium"><%= category.totalQuantity %></td>
                </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        </div>
      <% } else { %>
        <p class="text-center text-gray-500 py-8">No categories found.</p>
      <% } %>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Declare variables from server-side for pie charts
    const bestSellingProducts = <%- JSON.stringify(bestSellingProducts || []) %>;
    const bestSellingCategories = <%- JSON.stringify(bestSellingCategories || []) %>;
    
    // Product chart colors
    const productColors = [
      '#4285F4', '#EA4335', '#FBBC05', '#34A853', '#FF6D01', 
      '#46BFBD', '#F7464A', '#949FB1', '#9C27B0', '#3F51B5'
    ];
    
    // Category chart colors
    const categoryColors = [
      '#1976D2', '#D32F2F', '#FFC107', '#388E3C', '#FF5722',
      '#009688', '#E91E63', '#607D8B', '#673AB7', '#2196F3'
    ];
    
    // Draw product pie chart if data available
    if (bestSellingProducts.length > 0) {
      drawPieChart('productChart', bestSellingProducts, 'product_name', 'totalQuantity', productColors);
    }
    
    // Draw category pie chart if data available
    if (bestSellingCategories.length > 0) {
      drawPieChart('categoryChart', bestSellingCategories, 'name', 'totalQuantity', categoryColors);
    }
  });

  function drawPieChart(elementId, data, labelKey, valueKey, colorPalette) {
    const svg = document.getElementById(elementId);
    const width = 400;
    const height = 300;
    const radius = Math.min(width, height) / 2.5;
    const centerX = width / 2;
    const centerY = height / 2;
    
    // Calculate total for percentages
    const total = data.reduce((sum, item) => sum + item[valueKey], 0);
    
    // Sort data by value in descending order
    const sortedData = [...data].sort((a, b) => b[valueKey] - a[valueKey]);
    
    // Limit to top 5 for better visualization, combine the rest
    let chartData = sortedData.slice(0, 5);
    if (sortedData.length > 5) {
      const othersTotal = sortedData.slice(5).reduce((sum, item) => sum + item[valueKey], 0);
      if (othersTotal > 0) {
        chartData.push({ 
          [labelKey]: 'Others', 
          [valueKey]: othersTotal 
        });
      }
    }
    
    // Calculate angles for the pie slices
    let startAngle = 0;
    chartData.forEach((item, index) => {
      const percentage = item[valueKey] / total;
      const endAngle = startAngle + (percentage * (Math.PI * 2));
      
      // Calculate path
      const x1 = centerX + radius * Math.cos(startAngle);
      const y1 = centerY + radius * Math.sin(startAngle);
      const x2 = centerX + radius * Math.cos(endAngle);
      const y2 = centerY + radius * Math.sin(endAngle);
      
      // Determine if the arc should be drawn as a large arc
      const largeArcFlag = endAngle - startAngle > Math.PI ? 1 : 0;
      
      // Create path for the slice
      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      const d = [
        `M ${centerX} ${centerY}`,
        `L ${x1} ${y1}`,
        `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,
        'Z'
      ].join(' ');
      
      path.setAttribute('d', d);
      path.setAttribute('fill', colorPalette[index % colorPalette.length]);
      path.setAttribute('stroke', '#fff');
      path.setAttribute('stroke-width', '1');
      
      // Add hover effect
      path.setAttribute('onmouseover', `this.style.opacity='0.8'`);
      path.setAttribute('onmouseout', `this.style.opacity='1'`);
      
      // Add title for tooltip
      const title = document.createElementNS('http://www.w3.org/2000/svg', 'title');
      const percentText = Math.round(percentage * 100) + '%';
      title.textContent = `${item[labelKey]}: ${item[valueKey]} (${percentText})`;
      path.appendChild(title);
      
      svg.appendChild(path);
      
      // Add percentage label if slice is large enough
      if (percentage > 0.05) {
        const labelAngle = startAngle + (endAngle - startAngle) / 2;
        const labelRadius = radius * 0.7;
        const labelX = centerX + labelRadius * Math.cos(labelAngle);
        const labelY = centerY + labelRadius * Math.sin(labelAngle);
        
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', labelX);
        text.setAttribute('y', labelY);
        text.setAttribute('text-anchor', 'middle');
        text.setAttribute('dominant-baseline', 'middle');
        text.setAttribute('fill', '#fff');
        text.setAttribute('font-weight', 'bold');
        text.setAttribute('font-size', '12');
        text.textContent = percentText;
        
        svg.appendChild(text);
      }
      
      startAngle = endAngle;
    });
    
    // Add center circle for donut effect
    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
    circle.setAttribute('cx', centerX);
    circle.setAttribute('cy', centerY);
    circle.setAttribute('r', radius * 0.4);
    circle.setAttribute('fill', '#fff');
    svg.appendChild(circle);
  }
</script>
<!-- Sales Report Section -->
<div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100 mt-6">
  <header class="flex flex-wrap items-center justify-between mb-4 pb-4 border-b border-gray-100">
    <h4 class="text-lg font-bold text-gray-800">Sales Report</h4>
    <div class="flex gap-2">
      <button id="exportPdf" class="btn btn-danger bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg text-sm transition-colors">Export PDF</button>
      <button id="exportExcel" class="btn btn-success bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm transition-colors">Export Excel</button>
    </div>
  </header>
  <div class="card-body">
    <form id="salesReportForm" method="GET" action="/sales-report" class="mb-6">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div>
          <select name="reportType" class="form-select w-full rounded-lg border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all">
            <option value="">Select Report Type</option>
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
            <option value="yearly">Yearly</option>
            <option value="custom">Custom</option>
          </select>
        </div>
        <div>
          <input type="date" name="startDate" class="form-control w-full rounded-lg border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all" placeholder="Start Date" />
        </div>
        <div>
          <input type="date" name="endDate" class="form-control w-full rounded-lg border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all" placeholder="End Date" />
        </div>
        <div>
          <button type="submit" class="btn btn-primary w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm transition-colors">Filter and View</button>
        </div>
      </div>
    </form>
    <div class="mt-4 p-4 bg-gray-50 rounded-lg" id="salesReportResults">
      <!-- Render filtered sales report results here (via AJAX) -->
      <div class="text-center text-gray-500 py-8">
        <p>Select report type and date range to view sales data</p>
      </div>
    </div>
    <div class="pagination-area mt-6" id="salesReportPagination">
      <!-- Pagination controls will be rendered here -->
    </div>
  </div>
</div>
        <!-- Latest Orders Section: Display dynamic orders data -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden mt-6">
          <header class="px-6 py-4 bg-gray-50 border-b border-gray-100">
            <h4 class="text-lg font-bold text-gray-800 mb-4">Latest Orders</h4>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <!--<div>
                <select class="form-select w-full rounded-lg border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all">
                  <option selected>All Categories</option>
                  <option>Women's Clothing</option>
                  <option>Men's Clothing</option>
                  <option>Cellphones</option>
                  <option>Computer & Office</option>
                  <option>Consumer Electronics</option>
                  <option>Jewelry & Accessories</option>
                  <option>Home & Garden</option>
                  <option>Luggage & Bags</option>
                  <option>Shoes</option>
                  <option>Mother & Kids</option>
                </select>
              </div>
              <div>
                <input type="date" value="02.05.2022" class="form-control w-full rounded-lg border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all" />
              </div>
              <div>
                <select class="form-select w-full rounded-lg border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all">
                  <option selected>Status</option>
                  <option>All</option>
                  <option>Paid</option>
                  <option>Chargeback</option>
                  <option>Refund</option>
                </select>
              </div>
            </div>-->
          </header>
          <div class="p-6">
            <div class="table-responsive rounded-lg overflow-hidden border border-gray-200">
              <table class="table w-full">
                <thead class="bg-gray-50">
                  <tr>
                    <th scope="col" class="px-4 py-3 text-center w-10">
                      <div class="form-check">
                        <input class="form-check-input rounded" type="checkbox" id="transactionCheck01" />
                        <label class="form-check-label" for="transactionCheck01"></label>
                      </div>
                    </th>
                    <th class="px-4 py-3 text-left" scope="col">Order ID</th>
                    <th class="px-4 py-3 text-left" scope="col">Billing Name</th>
                    <th class="px-4 py-3 text-left" scope="col">Date</th>
                    <th class="px-4 py-3 text-right" scope="col">Total</th>
                    <th class="px-4 py-3 text-center" scope="col">Payment Status</th>
                    <th class="px-4 py-3 text-left" scope="col">Payment Method</th>
                    <th class="px-4 py-3 text-center" scope="col">View Details</th>
                  </tr>
                </thead>
                <tbody>
                  <% if(orders && orders.length > 0) { %>
                    <% orders.forEach(function(order) { %>
                      <tr class="border-t border-gray-100 hover:bg-gray-50 transition-colors">
                        <td class="px-4 py-3 text-center">
                          <div class="form-check">
                            <input class="form-check-input rounded" type="checkbox" id="transactionCheck-<%= order.order_id %>" />
                            <label class="form-check-label" for="transactionCheck-<%= order.order_id %>"></label>
                          </div>
                        </td>
                        <td class="px-4 py-3"><a href="#" class="text-blue-600 hover:underline font-medium">#<%= order.order_id %></a></td>
                        <td class="px-4 py-3"><%= order.user ? order.user.email : 'N/A' %></td>
                        <td class="px-4 py-3 text-gray-600"><%= new Date(order.timestamp).toLocaleDateString() %></td>
                        <td class="px-4 py-3 text-right font-medium">₹<%= order.total.toFixed(2) %></td>
                        <td class="px-4 py-3 text-center">
                          <% if(order.payment_status === 'paid') { %>
                            <span class="badge badge-soft-success px-3 py-1 rounded-full text-xs font-medium">Paid</span>
                          <% } else if(order.payment_status === 'Chargeback') { %>
                            <span class="badge badge-soft-danger px-3 py-1 rounded-full text-xs font-medium">Chargeback</span>
                          <% } else if(order.payment_status === 'Refund') { %>
                            <span class="badge badge-soft-warning px-3 py-1 rounded-full text-xs font-medium">Refund</span>
                          <% } else { %>
                            <span class="badge badge-soft-info px-3 py-1 rounded-full text-xs font-medium"><%= order.payment_status %></span>
                          <% } %>
                        </td>
                        <td class="px-4 py-3">
                          <% if(order.payment_method) { %>
                            <div class="flex items-center gap-2">
                              <i class="material-icons md-payment text-gray-500"></i>
                              <span><%= order.payment_method %></span>
                            </div>
                          <% } %>
                        </td>
                        <td class="px-4 py-3 text-center">
                          <a href="/admin/dashboard/orders/details/<%= order.order_id %>" class="btn btn-xs bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-lg text-xs transition-colors">View details</a>
                        </td>
                      </tr>
                    <% }) %>
                  <% } else { %>
                    <tr>
                      <td colspan="8" class="px-4 py-8 text-center text-gray-500">No orders found</td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
        <!-- Pagination for orders -->
        <div class="pagination-area mt-6 mb-8 flex justify-center">
          <nav aria-label="Page navigation example">
            <ul class="pagination flex gap-1">
              <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                <li class="page-item <%= (pagination.page === i) ? 'active' : '' %>">
                  <a class="page-link flex items-center justify-center w-10 h-10 rounded-lg border <%= (pagination.page === i) ? 'bg-blue-500 text-white border-blue-500' : 'border-gray-200 text-gray-700 hover:bg-gray-50' %>" href="?page=<%= i %>&limit=<%= pagination.limit %>"><%= i %></a>
                </li>
              <% } %>
            </ul>
          </nav>
        </div>
      </section>
      <!-- content-main end// -->
      <%- include('./partials/footer') %>
    </main>
    <%- include('./partials/scriptsLinks') %>
    <script>
      // Export button event handlers
      document.getElementById('exportPdf').addEventListener('click', function(){
        const form = document.getElementById('salesReportForm');
        const query = new URLSearchParams(new FormData(form)).toString();
        window.location.href = '/admin/dashboard/export-sales-report/pdf?' + query;
      });
      document.getElementById('exportExcel').addEventListener('click', function(){
        const form = document.getElementById('salesReportForm');
        const query = new URLSearchParams(new FormData(form)).toString();
        window.location.href = '/admin/dashboard/export-sales-report/excel?' + query;
      });

      // Handle Sales Report form submission via AJAX
      document.getElementById('salesReportForm').addEventListener('submit', function(e) {
        e.preventDefault();
        loadSalesReportPage(1);
      });

      function loadSalesReportPage(page) {
        const form = document.getElementById('salesReportForm');
        const queryParams = new URLSearchParams(new FormData(form));
        queryParams.set('page', page);
        
        // Show loading state
        document.getElementById('salesReportResults').innerHTML = '<div class="text-center py-8"><div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div><p class="mt-2 text-gray-500">Loading data...</p></div>';
        
        fetch('/admin/dashboard/sales-report?' + queryParams.toString())
          .then(response => response.json())
          .then(data => {
            let html = '<div class="bg-white p-6 rounded-lg shadow-sm border border-gray-100">';
            html += '<h5 class="text-lg font-bold text-gray-800 mb-4">Sales Summary</h5>';
            html += '<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-6">';
            html += `<div class="bg-blue-50 p-4 rounded-lg border border-blue-100">
                      <p class="text-sm text-gray-500">Total Orders</p>
                      <p class="text-xl font-bold text-gray-800">${data.summary.count}</p>
                    </div>`;
            html += `<div class="bg-green-50 p-4 rounded-lg border border-green-100">
                      <p class="text-sm text-gray-500">Total Sales</p>
                      <p class="text-xl font-bold text-gray-800">₹${data.summary.totalSales.toFixed(2)}</p>
                    </div>`;
            html += `<div class="bg-amber-50 p-4 rounded-lg border border-amber-100">
                      <p class="text-sm text-gray-500">Overall Discount</p>
                      <p class="text-xl font-bold text-gray-800">₹${data.summary.overallDiscount.toFixed(2)}</p>
                    </div>`;
            html += `<div class="bg-purple-50 p-4 rounded-lg border border-purple-100">
                      <p class="text-sm text-gray-500">Normal Discount</p>
                      <p class="text-xl font-bold text-gray-800">₹${data.summary.totalNormalDiscount.toFixed(2)}</p>
                    </div>`;
            html += `<div class="bg-pink-50 p-4 rounded-lg border border-pink-100">
                      <p class="text-sm text-gray-500">Coupon Deduction</p>
                      <p class="text-xl font-bold text-gray-800">₹${data.summary.totalCouponDeduction.toFixed(2)}</p>
                    </div>`;
            html += '</div>';
            
            if (data.orders && data.orders.length > 0) {
              html += '<div class="overflow-x-auto rounded-lg border border-gray-200">';
              html += '<table class="table w-full"><thead class="bg-gray-50"><tr><th class="px-4 py-3 text-left">Order ID</th><th class="px-4 py-3 text-left">Billing Email</th><th class="px-4 py-3 text-left">Date</th><th class="px-4 py-3 text-right">Total</th></tr></thead><tbody>';
              data.orders.forEach(order => {
                html += `<tr class="border-t border-gray-100 hover:bg-gray-50 transition-colors">
                           <td class="px-4 py-3"><a href="#" class="text-blue-600 hover:underline">#${order.order_id}</a></td>
                           <td class="px-4 py-3">${order.user && order.user.email ? order.user.email : 'N/A'}</td>
                           <td class="px-4 py-3 text-gray-600">${new Date(order.timestamp).toLocaleDateString()}</td>
                           <td class="px-4 py-3 text-right font-medium">₹${order.total.toFixed(2)}</td>
                         </tr>`;
              });
              html += '</tbody></table>';
              html += '</div>';
            } else {
              html += '<div class="text-center py-8 bg-gray-50 rounded-lg border border-gray-200"><p class="text-gray-500">No sales report data found for the selected criteria.</p></div>';
            }
            html += '</div>';
            document.getElementById('salesReportResults').innerHTML = html;

            // Build pagination for Sales Report
            let paginationHtml = '<nav aria-label="Sales report pagination"><ul class="pagination flex gap-1 justify-center mt-4">';
            for (let i = 1; i <= data.pagination.totalPages; i++) {
              paginationHtml += `<li class="page-item">
                                    <a class="page-link flex items-center justify-center w-10 h-10 rounded-lg border ${data.pagination.page === i ? 'bg-blue-500 text-white border-blue-500' : 'border-gray-200 text-gray-700 hover:bg-gray-50'}" href="#" onclick="loadSalesReportPage(${i}); return false;">${i}</a>
                                  </li>`;
            }
            paginationHtml += '</ul></nav>';
            document.getElementById('salesReportPagination').innerHTML = paginationHtml;
          })
          .catch(error => {
            console.error(error);
            document.getElementById('salesReportResults').innerHTML = '<div class="text-center py-8 bg-red-50 rounded-lg border border-red-100"><p class="text-red-500">Error loading sales report. Please try again.</p></div>';
          });
      }

      // Add smooth scrolling to all links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          document.querySelector(this.getAttribute('href')).scrollIntoView({
            behavior: 'smooth'
          });
        });
      });
      
      // Toggle dark mode
      document.querySelector('.darkmode').addEventListener('click', function() {
        document.body.classList.toggle('dark-theme');
        // Save preference to localStorage
        if (document.body.classList.contains('dark-theme')) {
          localStorage.setItem('theme', 'dark');
        } else {
          localStorage.setItem('theme', 'light');
        }
      });
      
      // Check for saved theme preference
      if (localStorage.getItem('theme') === 'dark') {
        document.body.classList.add('dark-theme');
      }
      
      // Fullscreen functionality
      document.querySelector('.requestfullscreen').addEventListener('click', function() {
        if (!document.fullscreenElement) {
          document.documentElement.requestFullscreen();
        } else {
          if (document.exitFullscreen) {
            document.exitFullscreen();
          }
        }
      });
    </script>
  </body>
</html>
