<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GUITMAN - Shop</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.5.0/nouislider.min.css">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            100: '#e0f2fe',
                            200: '#bae6fd',
                            300: '#7dd3fc',
                            400: '#38bdf8',
                            500: '#0ea5e9',
                            600: '#0284c7',
                            700: '#0369a1',
                            800: '#075985',
                            900: '#0c4a6e',
                            950: '#082f49',
                        },
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.3s ease-in-out',
                        'fade-out': 'fadeOut 0.3s ease-in-out',
                        'slide-in': 'slideIn 0.3s ease-out',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' },
                        },
                        fadeOut: {
                            '0%': { opacity: '1' },
                            '100%': { opacity: '0' },
                        },
                        slideIn: {
                            '0%': { transform: 'translateY(-10px)', opacity: '0' },
                            '100%': { transform: 'translateY(0)', opacity: '1' },
                        },
                    },
                },
            },
        }
    </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .nouislider-connect {
            background-color: #0ea5e9;
        }
        .noUi-connect {
            background: #0ea5e9;
        }
        .noUi-handle {
            border-radius: 50%;
            background-color: white;
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
            border: 2px solid #0ea5e9;
        }
        .noUi-handle:before, .noUi-handle:after {
            display: none;
        }
        .alert-animate-in {
            animation: fadeIn 0.3s ease-in-out forwards;
        }
        .alert-animate-out {
            animation: fadeOut 0.3s ease-in-out forwards;
        }
        .product-card {
            transition: all 0.3s ease;
        }
        .product-card:hover {
            transform: translateY(-5px);
        }
        .skeleton {
            animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
            background-color: #e5e7eb;
        }
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: 0.5;
            }
        }
        .pagination-item {
            transition: all 0.2s ease;
        }
        .pagination-item:hover:not(.active) {
            transform: translateY(-2px);
        }
        /* Loading spinner */
        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-left-color: #0ea5e9;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Fade transition for products */
        .fade-transition {
            transition: opacity 0.3s ease;
        }
        .fade-out {
            opacity: 0;
        }
        .fade-in {
            opacity: 1;
        }
    </style>
</head>
<body class="bg-gray-50">
 
    <%- include('./partials/loading') %>
    <%- include('./partials/header', {currentRoute: '/shop'}, {user: user}) %>
    
    <!-- Hero Banner -->
    <div class="relative bg-cover bg-center text-white py-24 overflow-hidden" style="background-image: url('/ui/guitbg.jpg')">
        <div class="absolute inset-0 bg-black/50 backdrop-blur-sm"></div>
        
        <div class="relative container mx-auto px-4 sm:px-6 lg:px-8 z-10">
          <div class="max-w-4xl mx-auto text-center space-y-6">
            <h1 class="mt-10 text-4xl md:text-6xl lg:text-7xl font-extrabold tracking-tight leading-tight text-white drop-shadow-lg">
              Elevate Your Musical Journey
            </h1>
            
            <p class="text-lg md:text-xl lg:text-2xl font-medium text-white/90 max-w-3xl mx-auto drop-shadow-md">
              Discover world-class instruments and premium accessories that transform your passion into art
            </p>
            
            <div class="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-4">
              <a href="#products" class="px-10 py-4 bg-white text-black rounded-full font-bold text-lg hover:bg-gray-200 transition-all duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105 shadow-2xl">
                Explore Collection
              </a>
              <a href="#about" class="px-10 py-4 border-2 border-white/30 text-white rounded-full font-bold text-lg hover:bg-white/20 transition-all duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105 backdrop-blur-sm">
                Learn More
              </a>
            </div>
          </div>
        </div>
      
        <div class="absolute bottom-0 left-0 right-0 h-16 bg-gradient-to-t from-black/50 via-transparent to-transparent"></div>
      </div>
  

    <!-- Products Section -->
    <section id="products" class="py-8 md:py-16 px-4 sm:px-6 lg:px-8">
        <div id="alert-container" class="fixed top-4 right-4 z-[1000] w-80"></div>
        <%- include('./partials/breadcrumbs', { breadcrumbs }) %>
        <div class="container mx-auto">
            <h2 class="text-2xl md:text-3xl font-bold mb-2 text-gray-800">Our Collection</h2>
            <p class="text-gray-600 mb-6 md:mb-8">Find the perfect instrument to match your style and sound</p>
            
            <!-- Advanced Search Panel -->
            <div class="bg-white rounded-2xl shadow-md p-4 md:p-6 mb-6 md:mb-8">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Advanced Search</h3>
                    <button id="toggleFilters" class="text-purple-600 hover:text-purple-800 text-sm font-medium flex items-center">
                        <span id="filterText">Hide Filters</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                            <path id="filterIcon" fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
                
                <div id="filterContent">
                    <!-- Search and Sort Row -->
                    <div id="filterForm" class="space-y-6">
                        <div class="flex flex-col md:flex-row gap-4">
                            <!-- Search Input - Fixed alignment -->
                            <div class="relative flex-grow">
                                
                                <input type="text" 
                                    id="searchInput"
                                    name="search"
                                    value="<%= search %>"
                                    placeholder="Search products..."
                                    class="w-full pl-10 pr-4 py-2.5 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
                            </div>

                            <!-- Sort Dropdown -->
                            <div class="w-full md:w-64">  
                                <div class="relative">
                                    <select id="sortSelect" 
                                            name="sort"
                                            class="w-full appearance-none px-4 py-2.5 rounded-lg border border-gray-300 bg-white focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 pr-10">
                                        <option value="popularity_desc" <%= (sort + '_' + order) === 'popularity_desc' ? 'selected' : '' %>>Popularity</option>
                                        <option value="price_asc" <%= (sort + '_' + order) === 'price_asc' ? 'selected' : '' %>>Price: Low to High</option>
                                        <option value="price_desc" <%= (sort + '_' + order) === 'price_desc' ? 'selected' : '' %>>Price: High to Low</option>
                                        <option value="isTopModel_desc" <%= (sort + '_' + order) === 'isTopModel_desc' ? 'selected' : '' %>>Featured</option>
                                        <option value="product_name_asc" <%= (sort + '_' + order) === 'product_name_asc' ? 'selected' : '' %>>Alphabetical: A-Z</option>
                                        <option value="product_name_desc" <%= (sort + '_' + order) === 'product_name_desc' ? 'selected' : '' %>>Alphabetical: Z-A</option>
                                    </select>
                                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                                        <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                            <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Filters Row -->
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <!-- Category Filters -->
                            <div class="col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Categories</label>
                                <div class="flex flex-wrap gap-2 category-filters">
                                    <button type="button" data-category="all"
                                        class="relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-purple-600 to-blue-500 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 category-btn <%= category === 'all' ? 'active-category' : '' %>">
                                        <span class="relative px-5 py-2.5 transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-transparent <%= category === 'all' ? 'bg-transparent text-white' : '' %>">
                                            All
                                        </span>
                                    </button>
                                    <% categories.forEach(cat => { %>
                                        <button type="button" data-category="<%= cat.name.toLowerCase() %>"
                                            class="relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-purple-600 to-blue-500 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 category-btn <%= category === cat.name.toLowerCase() ? 'active-category' : '' %>">
                                            <span class="relative px-5 py-2.5 transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-transparent <%= category === cat.name.toLowerCase() ? 'bg-transparent text-white' : '' %>">
                                                <%= cat.name %>
                                            </span>
                                        </button>
                                    <% }); %>
                                </div>
                                <input type="hidden" id="categoryInput" name="category" value="<%= category %>">
                            </div>
                            
                            <style>
                                .category-btn.active-category span {
                                    background-color: transparent !important;
                                    color: white !important;
                                }
                                .category-btn.active-category {
                                    color: white !important;
                                }
                            </style>
                            
                            <script>
                                document.addEventListener('DOMContentLoaded', function() {
                                    const categoryButtons = document.querySelectorAll('.category-btn');
                                    const categoryInput = document.getElementById('categoryInput');
                            
                                    categoryButtons.forEach(button => {
                                        button.addEventListener('click', function() {
                                            // Remove active class from all buttons
                                            categoryButtons.forEach(btn => {
                                                btn.classList.remove('active-category');
                                                btn.querySelector('span').classList.remove('bg-transparent', 'text-white');
                                            });
                            
                                            // Add active class to clicked button
                                            this.classList.add('active-category');
                                            this.querySelector('span').classList.add('bg-transparent', 'text-white');
                            
                                            // Update hidden input
                                            const category = this.getAttribute('data-category');
                                            categoryInput.value = category;
                                        });
                                    });
                                });
                            </script>

                            <!-- Price Range Filter -->
                            <div>
                                <style>
                                    /* Custom styles for the noUiSlider */
                                    #priceRange .noUi-connect {
                                        background: linear-gradient(to right, #9333ea, #3b82f6);
                                    }
                                
                                    #priceRange .noUi-handle {
                                        background: linear-gradient(to right, #9333ea, #3b82f6);
                                        border: none;
                                        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                                    }
                                
                                    #priceRange .noUi-handle::before,
                                    #priceRange .noUi-handle::after {
                                        background: white;
                                    }
                                
                                    #priceRange .noUi-target {
                                        border: 1px solid #9333ea;
                                        box-shadow: none;
                                    }
                                
                                    #priceRange .noUi-horizontal .noUi-handle {
                                        width: 18px;
                                        height: 18px;
                                        right: -9px;
                                        top: -6px;
                                        border-radius: 50%;
                                    }
                                
                                    #priceRange .noUi-horizontal {
                                        height: 8px;
                                    }
                                </style>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Price Range</label>
                                <div class="px-2">
                                    <div class="mb-4 flex justify-between text-sm font-medium text-gray-700">
                                        <span>₹<span id="priceMinValue"><%= minPrice %></span></span>
                                        <span>₹<span id="priceMaxValue"><%= maxPrice %></span></span>
                                    </div>
                                    <div id="priceRange" class="range-slider mb-4"></div>
                                    <input type="hidden" id="minPriceInput" name="minPrice" value="<%= minPrice %>">
                                    <input type="hidden" id="maxPriceInput" name="maxPrice" value="<%= maxPrice %>">
                                </div>
                            </div>
                        </div>

                        <!-- Hidden Fields for State Preservation -->
                        <input type="hidden" id="pageInput" name="page" value="1">
                        <input type="hidden" id="orderInput" name="order" value="<%= order %>">
                        
                        <!-- Reset Button -->
                        <div class="flex justify-end pt-4 border-t border-gray-200">
                            <button type="button" id="resetFilters" class="px-6 py-2.5 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                                Reset Filters
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Results Summary and Loading Indicator -->
            <div class="flex flex-col md:flex-row justify-between items-center mb-6">
                <div class="flex items-center mb-4 md:mb-0">
                    <p class="text-gray-600">
                        Showing <span class="font-semibold"><%= (currentPage - 1) * itemsPerPage + 1 %></span> - 
                        <span class="font-semibold"><%= Math.min(currentPage * itemsPerPage, totalItems) %></span> of 
                        <span class="font-semibold"><%= totalItems %></span> products
                    </p>
                    <div id="loadingIndicator" class="ml-3 hidden">
                        <div class="spinner w-5 h-5"></div>
                    </div>
                </div>
                
                <div class="flex items-center space-x-2">
                    <label for="viewMode" class="text-sm text-gray-600">View:</label>
                    <div class="flex border border-purple-300 rounded-lg overflow-hidden">
                        <button type="button" id="gridView" class="view-mode-btn px-3 py-1.5 bg-purple-600 text-white hover:bg-purple-700 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                            </svg>
                        </button>
                        <button type="button" id="listView" class="view-mode-btn px-3 py-1.5 bg-white text-purple-600 hover:bg-purple-100 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                            </svg>
                        </button>
                    </div>
                    
                    <script>
                    document.addEventListener('DOMContentLoaded', function() {
                        const gridViewBtn = document.getElementById('gridView');
                        const listViewBtn = document.getElementById('listView');
                        const productsList = document.getElementById('productsList');
                    
                        function updateViewMode(mode) {
                            // Remove active state from all buttons
                            document.querySelectorAll('.view-mode-btn').forEach(btn => {
                                btn.classList.remove('bg-purple-600', 'text-white');
                                btn.classList.add('bg-white', 'text-purple-600', 'hover:bg-purple-100');
                            });
                    
                            // Add active state to clicked button
                            if (mode === 'grid') {
                                gridViewBtn.classList.remove('bg-white', 'text-purple-600', 'hover:bg-purple-100');
                                gridViewBtn.classList.add('bg-purple-600', 'text-white');
                                productsList.classList.remove('space-y-4');
                                productsList.classList.add('grid', 'grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3', 'gap-4');
                            } else {
                                listViewBtn.classList.remove('bg-white', 'text-purple-600', 'hover:bg-purple-100');
                                listViewBtn.classList.add('bg-purple-600', 'text-white');
                                gridViewBtn.classList.add('bg-white', 'text-purple-600', 'hover:bg-purple-100');
                                gridViewBtn.classList.remove('bg-purple-600', 'text-white');
                                productsList.classList.remove('grid', 'grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3', 'gap-4');
                                productsList.classList.add('space-y-4');
                            }
                        }
                    
                        gridViewBtn.addEventListener('click', () => updateViewMode('grid'));
                        listViewBtn.addEventListener('click', () => updateViewMode('list'));
                    
                        // Default to grid view
                        updateViewMode('grid');
                    });
                    </script>
                </div>
            </div>

            <!-- Products Container -->
            <div id="productsContainer" class="fade-transition">
                <!-- Products Grid -->
                <% if (products.length === 0) { %>
                    <div class="text-center py-12 bg-white rounded-2xl shadow-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <h3 class="text-2xl font-bold mb-4 text-gray-800">No products found</h3>
                        <p class="text-gray-600 mb-6">Try adjusting your filters or search terms</p>
                        <button id="clearFilters" class="px-6 py-2.5 bg-primary-600 text-white rounded-full hover:bg-primary-700 transition-colors duration-200 shadow-md hover:shadow-lg">
                            Clear Filters
                        </button>
                    </div>
                <% } else { %>
                    <div id="productsGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6">
                        <% products.forEach(product => { %>
                          <div class="product-card bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden">
                            <a href="/product-details/<%=product._id%>" class="block relative group">
                              <div class="relative overflow-hidden">
                                <img src="/<%= product.images[0] %>" 
                                     alt="<%= product.product_name %>" 
                                     class="w-full h-48 sm:h-56 md:h-64 object-contain transition-transform duration-500 group-hover:scale-105">
                                
                                <% if (product.isNew) { %>
                                <div class="absolute top-4 left-4 bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-md">
                                    NEW
                                </div>
                                <% } %>
                                
                                <% if (product.discount > 0) { %>
                                <div class="absolute top-4 right-4 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-md">
                                    -<%= product.discount %>%
                                </div>
                                <% } %>
                                
                                <button class="wishlist-btn absolute top-4 right-4 bg-white p-2 rounded-full shadow-sm hover:bg-gray-100 transition-colors duration-200"
                                        data-product-id="<%= product._id %>">
                                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 hover:text-red-500 transition-colors duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                                  </svg>
                                </button>
                              </div>
                            </a>
                            
                            <div class="p-4 md:p-5">
                              <div class="mb-2">
                                <% if (product.rating) { %>
                                <div class="flex items-center mb-1">
                                    <% for(let i = 1; i <= 5; i++) { %>
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 <%= i <= product.rating ? 'text-yellow-400' : 'text-gray-300' %>" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                        </svg>
                                    <% } %>
                                    <span class="text-xs text-gray-600 ml-1">(<%= product.reviewCount || 0 %>)</span>
                                </div>
                                <% } %>
                                <a href="/product-details/<%=product._id%>" class="block">
                                    <h3 class="font-semibold text-lg text-gray-800 hover:text-purple-600 transition-colors duration-200 truncate"><%= product.product_name %></h3>
                                </a>
                                <p class="text-sm text-gray-500 truncate"><%= product.category %></p>
                              </div>
                              
                              <div class="flex items-center justify-between mt-4">
                                <div>
                                    <% if (product.originalPrice && product.originalPrice > product.price) { %>
                                    <span class="text-sm text-gray-500 line-through">₹<%= product.originalPrice.toLocaleString('en-IN') %></span>
                                    <% } %>
                                    <span class="text-xl font-bold text-purple-600 ml-1">₹<%= product.price.toLocaleString('en-IN') %></span>
                                </div>
                                <button class="p-2.5 bg-purple-100 rounded-full hover:bg-purple-200 transition-colors duration-200 add-to-cart-btn" 
                                        data-product-id="<%= product._id %>">
                                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                  </svg>
                                </button>
                              </div>
                            </div>
                          </div>
                        <% }); %>
                    </div>
                    
                    <div id="productsList" class="hidden space-y-4">
                        <% products.forEach(product => { %>
                            <div class="product-card bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden">
                                <div class="flex flex-col md:flex-row">
                                    <a href="/product-details/<%=product._id%>" class="block relative md:w-1/4">
                                        <div class="relative h-48 md:h-40 overflow-hidden">
                                            <img src="/<%= product.images[0] %>"
                                                alt="<%= product.product_name %>"
                                                class="w-full h-full object-contain">
                                            <% if (product.isNew) { %>
                                            <div class="absolute top-2 left-2 bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-md">
                                                NEW
                                            </div>
                                            <% } %>
                                            <% if (product.discount > 0) { %>
                                            <div class="absolute top-2 right-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-md">
                                                -<%= product.discount %>%
                                            </div>
                                            <% } %>
                                        </div>
                                    </a>
                                    <div class="p-4 flex-1 flex flex-col justify-between">
                                        <div>
                                            <% if (product.rating) { %>
                                            <div class="flex items-center mb-1">
                                                <% for(let i = 1; i <= 5; i++) { %>
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 <%= i <= product.rating ? 'text-yellow-400' : 'text-gray-300' %>" viewBox="0 0 20 20" fill="currentColor">
                                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                                </svg>
                                                <% } %>
                                                <span class="text-xs text-gray-600 ml-1">(<%= product.reviewCount || 0 %>)</span>
                                            </div>
                                            <% } %>
                                            <a href="/product-details/<%=product._id%>" class="block">
                                                <h3 class="font-semibold text-lg text-gray-800 hover:text-primary-600 transition-colors duration-200"><%= product.product_name %></h3>
                                            </a>
                                            <p class="text-gray-700 text-sm mb-2"><%= product.category %></p>
                                            <p class="text-gray-600 mb-2 line-clamp-2 text-sm"><%= product.description || 'No description available' %></p>
                                        </div>
                                        <div class="flex items-center justify-between mt-2">
                                            <div>
                                                <% if (product.originalPrice && product.originalPrice > product.price) { %>
                                                <span class="text-xs text-gray-500 line-through">₹<%= product.originalPrice.toLocaleString('en-IN') %></span>
                                                <% } %>
                                                <span class="text-xl font-bold text-indigo-600">₹<%= product.price.toLocaleString('en-IN') %></span>
                                            </div>
                                            <div class="flex space-x-2">
                                                <button class="wishlist-btn p-2 bg-purple-100 hover:bg-purple-200 rounded-full transition-colors duration-200 group"
                                                        data-product-id="<%= product._id %>">
                                                    <svg xmlns="http://www.w3.org/2000/svg"
                                                         class="h-4 w-4 text-purple-600 group-hover:text-purple-800 transition-colors"
                                                         fill="none"
                                                         viewBox="0 0 24 24"
                                                         stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                                                    </svg>
                                                </button>
                                                <button class="add-to-cart-btn p-2 bg-purple-100 hover:bg-purple-200 rounded-full transition-colors duration-200 group"
                                                        data-product-id="<%= product._id %>">
                                                    <svg xmlns="http://www.w3.org/2000/svg"
                                                         class="h-4 w-4 text-purple-600 group-hover:text-purple-800 transition-colors"
                                                         fill="none"
                                                         viewBox="0 0 24 24"
                                                         stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                        </div>
                <% } %>
            </div>

            <!-- Enhanced Pagination -->
            <div id="paginationContainer" class="mt-8 md:mt-12 flex flex-wrap justify-center items-center gap-2">
                <% if (totalPages > 1) { %>
                    <% if (currentPage > 1) { %>
                    <button type="button" class="pagination-btn pagination-item flex items-center px-4 py-2 rounded-lg bg-white border border-gray-300 hover:bg-gray-50 transition-colors duration-200 shadow-sm" data-page="<%= currentPage - 1 %>">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                        Previous
                    </button>
                    <% } %>
                    
                    <% 
                    let startPage = Math.max(1, currentPage - 2);
                    let endPage = Math.min(totalPages, startPage + 4);
                    
                    if (endPage - startPage < 4) {
                        startPage = Math.max(1, endPage - 4);
                    }
                    
                    if (startPage > 1) { %>
                    <button type="button" class="pagination-btn pagination-item px-4 py-2 rounded-lg bg-white border border-gray-300 hover:bg-gray-50 transition-colors duration-200 shadow-sm" data-page="1">
                        1
                    </button>
                    <% if (startPage > 2) { %>
                    <span class="px-2 py-1 text-gray-500">...</span>
                    <% } %>
                    <% } %>
                    
                    <% for(let i = startPage; i <= endPage; i++) { %>
                    <button type="button" class="pagination-btn pagination-item px-4 py-2 rounded-lg <%= i === currentPage ? 'bg-primary-600 text-white shadow-md' : 'bg-white border border-gray-300 hover:bg-gray-50' %> transition-colors duration-200 shadow-sm" data-page="<%= i %>">
                        <%= i %>
                    </button>
                    <% } %>
                    
                    <% if (endPage < totalPages) { %>
                    <% if (endPage < totalPages - 1) { %>
                    <span class="px-2 py-1 text-gray-500">...</span>
                    <% } %>
                    <button type="button" class="pagination-btn pagination-item px-4 py-2 rounded-lg bg-white border border-gray-300 hover:bg-gray-50 transition-colors duration-200 shadow-sm" data-page="<%= totalPages %>">
                        <%= totalPages %>
                    </button>
                    <% } %>
                    
                    <% if (currentPage < totalPages) { %>
                    <button type="button" class="pagination-btn pagination-item flex items-center px-4 py-2 rounded-lg bg-white border border-gray-300 hover:bg-gray-50 transition-colors duration-200 shadow-sm" data-page="<%= currentPage + 1 %>">
                        Next
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                    </button>
                    <% } %>
                <% } %>
            </div>
        </div>
    </section>


    <%- include('./partials/footer') %>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.5.0/nouislider.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Cache DOM elements
            const filterForm = document.getElementById('filterForm');
            const searchInput = document.getElementById('searchInput');
            const sortSelect = document.getElementById('sortSelect');
            const categoryButtons = document.querySelectorAll('.category-btn');
            const categoryInput = document.getElementById('categoryInput');
            const minPriceInput = document.getElementById('minPriceInput');
            const maxPriceInput = document.getElementById('maxPriceInput');
            const pageInput = document.getElementById('pageInput');
            const orderInput = document.getElementById('orderInput');
            const resetFilters = document.getElementById('resetFilters');
            const clearFilters = document.getElementById('clearFilters');
            const loadingIndicator = document.getElementById('loadingIndicator');
            const productsContainer = document.getElementById('productsContainer');
            
            // Toggle Filter Panel
            const toggleFilters = document.getElementById('toggleFilters');
            const filterContent = document.getElementById('filterContent');
            const filterText = document.getElementById('filterText');
            const filterIcon = document.getElementById('filterIcon');
            
            toggleFilters.addEventListener('click', function() {
                if (filterContent.style.display === 'none') {
                    filterContent.style.display = 'block';
                    filterText.textContent = 'Hide Filters';
                    filterIcon.setAttribute('d', 'M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z');
                } else {
                    filterContent.style.display = 'none';
                    filterText.textContent = 'Show Filters';
                    filterIcon.setAttribute('d', 'M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z');
                }
            });
            
            // View Mode Switcher
            const gridView = document.getElementById('gridView');
            const listView = document.getElementById('listView');
            const productsGrid = document.getElementById('productsGrid');
            const productsList = document.getElementById('productsList');
            
            gridView.addEventListener('click', function() {
                productsGrid.classList.remove('hidden');
                productsList.classList.add('hidden');
                gridView.classList.add('bg-primary-600', 'text-white');
                gridView.classList.remove('bg-white', 'text-gray-700');
                listView.classList.add('bg-white', 'text-gray-700');
                listView.classList.remove('bg-primary-600', 'text-white');
                
                // Save preference in localStorage
                localStorage.setItem('viewMode', 'grid');
            });
            
            listView.addEventListener('click', function() {
                productsGrid.classList.add('hidden');
                productsList.classList.remove('hidden');
                listView.classList.add('bg-primary-600', 'text-white');
                listView.classList.remove('bg-white', 'text-gray-700');
                gridView.classList.add('bg-white', 'text-gray-700');
                gridView.classList.remove('bg-primary-600', 'text-white');
                
                // Save preference in localStorage
                localStorage.setItem('viewMode', 'list');
            });
            
            // Load saved view mode preference
            const savedViewMode = localStorage.getItem('viewMode');
            if (savedViewMode === 'list') {
                listView.click();
            }
            
            // Price Range Slider Initialization
            const priceSlider = document.getElementById('priceRange');
            noUiSlider.create(priceSlider, {
                start: ['<%= minPrice %>', '<%= maxPrice %>'],
                connect: true,
                range: {
                    'min': 0,
                    'max': 100000
                },
                step: 100,
                format: {
                    to: value => Math.round(value),
                    from: value => value
                }
            });

            // Price Range Update Handler with debounce
            let priceTimeout;
            priceSlider.noUiSlider.on('update', (values, handle) => {
                const [min, max] = values.map(Number);
                document.getElementById('priceMinValue').textContent = min;
                document.getElementById('priceMaxValue').textContent = max;
                minPriceInput.value = min;
                maxPriceInput.value = max;
            });
            
            priceSlider.noUiSlider.on('change', () => {
                clearTimeout(priceTimeout);
                priceTimeout = setTimeout(() => {
                    pageInput.value = 1; // Reset to first page when changing price
                    fetchFilteredResults();
                }, 500);
            });

            // Function to fetch filtered results via AJAX
            function fetchFilteredResults() {
                // Show loading indicator
                loadingIndicator.classList.remove('hidden');
                productsContainer.classList.add('fade-out');
                
                // Build query string from form inputs
                const params = new URLSearchParams();
                params.append('search', searchInput.value);
                params.append('category', categoryInput.value);
                params.append('minPrice', minPriceInput.value);
                params.append('maxPrice', maxPriceInput.value);
                params.append('page', pageInput.value);
                
                // Get sort and order from sortSelect
                const [sortField, order] = sortSelect.value.split('_');
                orderInput.value = order;
                params.append('sort', sortField);
                params.append('order', order);
                
                // Fetch filtered results
                fetch(`/shop?${params.toString()}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.text())
                .then(html => {
                    // Update URL without page reload
                    const newUrl = `${window.location.pathname}?${params.toString()}`;
                    window.history.pushState({ path: newUrl }, '', newUrl);
                    
                    // Parse the HTML response
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    
                    // Update products container
                    const newProductsContainer = doc.getElementById('productsContainer');
                    if (newProductsContainer) {
                        productsContainer.innerHTML = newProductsContainer.innerHTML;
                    }
                    
                    // Update pagination
                    const newPaginationContainer = doc.getElementById('paginationContainer');
                    if (newPaginationContainer) {
                        document.getElementById('paginationContainer').innerHTML = newPaginationContainer.innerHTML;
                        // Reattach event listeners to new pagination buttons
                        attachPaginationListeners();
                    }
                    
                    // Reattach event listeners to new elements
                    attachProductEventListeners();
                    
                    // Hide loading indicator and show products
                    loadingIndicator.classList.add('hidden');
                    productsContainer.classList.remove('fade-out');
                    productsContainer.classList.add('fade-in');
                    
                    // Apply saved view mode
                    const currentViewMode = localStorage.getItem('viewMode') || 'grid';
                    if (currentViewMode === 'list') {
                        const productsGrid = document.getElementById('productsGrid');
                        const productsList = document.getElementById('productsList');
                        if (productsGrid && productsList) {
                            productsGrid.classList.add('hidden');
                            productsList.classList.remove('hidden');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching filtered results:', error);
                    loadingIndicator.classList.add('hidden');
                    showAlert('An error occurred while filtering products. Please try again.', 'error');
                });
            }
            
            // Attach event listeners to pagination buttons
            function attachPaginationListeners() {
                const paginationButtons = document.querySelectorAll('.pagination-btn');
                paginationButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        const page = this.getAttribute('data-page');
                        pageInput.value = page;
                        fetchFilteredResults();
                        
                        // Scroll to products section with offset for header
                        const productsSection = document.getElementById('products');
                        const headerHeight = 80; // Approximate header height
                        const scrollPosition = productsSection.getBoundingClientRect().top + window.pageYOffset - headerHeight;
                        window.scrollTo({
                            top: scrollPosition,
                            behavior: 'smooth'
                        });
                    });
                });
            }
            
            // Attach event listeners to product elements
            function attachProductEventListeners() {
                // Add to Cart buttons
                const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
                addToCartButtons.forEach(button => {
                    button.addEventListener('click', async (event) => {
                        event.preventDefault();
                        event.stopPropagation(); // Prevent event bubbling
                        const productId = button.getAttribute('data-product-id');
                        
                        try {
                            const response = await fetch('/cart/add', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ productId, quantity: 1 })
                            });
                            
                            const result = await response.json();
                            
                            if (response.ok) {
                                showAlert(result.message, 'success');
                            } else {
                                showAlert(result.message || 'Failed to add item to cart', 'error');
                            }
                        } catch (error) {
                            showAlert('Please login to continue with the cart!', 'error');
                        }
                    });
                });
                
                // Wishlist buttons
                const wishlistButtons = document.querySelectorAll(".wishlist-btn");
                wishlistButtons.forEach(button => {
                  button.addEventListener("click", async (event) => {
                    event.preventDefault();
                    event.stopPropagation(); // Prevent event bubbling
                    
                    const productId = button.getAttribute("data-product-id");
                    const heartIcon = button.querySelector("svg");
                    
                    try {
                      const response = await fetch("/profile/wishlist/toggle", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ productId })
                      });
                      
                      const result = await response.json();
                      
                      if (response.ok && result.success) {
                        if (result.message === "Product added to wishlist successfully") {
                          heartIcon.classList.add("text-purple-600");
                          heartIcon.classList.remove("text-gray-600");
                        } else if (result.message === "Item removed successfully!") {
                          heartIcon.classList.remove("text-purple-600");
                          heartIcon.classList.add("text-gray-600");
                        }
                        showAlert(result.message, 'success');
                      } else {
                        showAlert(result.message || "Failed to update wishlist", 'error');
                      }
                    } catch (error) {
                      showAlert("Please login to add to wishlist", 'error');
                    }
                  });
                });
            }
            
            // Event listeners for filter inputs
            searchInput.addEventListener('input', debounce(function() {
                pageInput.value = 1; // Reset to first page when searching
                fetchFilteredResults();
            }, 500));
            
            sortSelect.addEventListener('change', function() {
                const [sortField, order] = this.value.split('_');
                orderInput.value = order;
                fetchFilteredResults();
            });
            
            // Category button click handlers
            categoryButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const category = this.getAttribute('data-category');
                    categoryInput.value = category;
                    
                    // Update visual state
                    categoryButtons.forEach(btn => {
                        btn.classList.remove('bg-primary-600', 'text-white');
                        btn.classList.add('bg-white', 'border', 'border-gray-300', 'hover:bg-gray-100');
                    });
                    
                    this.classList.add('bg-primary-600', 'text-white');
                    this.classList.remove('bg-white', 'border', 'border-gray-300', 'hover:bg-gray-100');
                    
                    pageInput.value = 1; // Reset to first page when changing category
                    fetchFilteredResults();
                });
            });
            
            // Reset filters
            resetFilters.addEventListener('click', function() {
                window.location.href = '/shop';
            });
            
            if (clearFilters) {
                clearFilters.addEventListener('click', function() {
                    window.location.href = '/shop';
                });
            }
            
            // Initialize pagination listeners
            attachPaginationListeners();
            
            // Initialize product event listeners
            attachProductEventListeners();
            
            // Debounce function to limit how often a function is called
            function debounce(func, wait) {
                let timeout;
                return function() {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                        func.apply(context, args);
                    }, wait);
                };
            }
            
            // Alert System
            window.showAlert = function(message, type = 'success') {
                const alertContainer = document.getElementById('alert-container');
                
                // Create alert element
                const alertElement = document.createElement('div');
                alertElement.className = `mb-4 p-4 rounded-lg shadow-lg alert-animate-in ${
                    type === 'success' 
                        ? 'bg-green-100 border border-green-400 text-green-700' 
                        : 'bg-red-100 border border-red-400 text-red-700'
                }`;
                
                // Create alert content
                alertElement.innerHTML = `
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                ${type === 'success' 
                                    ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd">'
                                    : '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd">'
                                }
                            </svg>
                            <span>${message}</span>
                        </div>
                        <button class="text-current hover:text-gray-700" onclick="this.parentElement.parentElement.remove()">
                            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </div>
                `;
                
                // Add alert to container
                alertContainer.appendChild(alertElement);
                
                // Remove alert after 3 seconds
                setTimeout(() => {
                    alertElement.classList.remove('alert-animate-in');
                    alertElement.classList.add('alert-animate-out');
                    setTimeout(() => alertElement.remove(), 300);
                }, 3000);
            };
        });
    </script>
</body>
</html>
