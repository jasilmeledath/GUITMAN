<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Shopping Cart - Guitman</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
  <style>
    body {
      font-family: "Inter", sans-serif;
    }
  </style>
</head>

<body class="bg-gray-50">
  <%- include('./partials/loading') %>
  <%- include('./partials/header') %>

  <main class="mx-auto py-16 mt-3 bg-white">
    <%- include('./partials/breadcrumbs', { breadcrumbs }) %>
    <section class="bg-white py-8 antialiased md:py-16">
      <div class="mx-auto max-w-screen-xl px-4 2xl:px-0">
        <h2 class="text-xl font-semibold text-gray-900 sm:text-2xl">
          Shopping Cart
        </h2>

        <div class="mt-6 sm:mt-8 md:gap-6 lg:flex lg:items-start xl:gap-8">
          <!-- Cart Items Section -->
          <div class="mx-auto w-full flex-none lg:max-w-2xl xl:max-w-4xl">
            <div class="space-y-6">
              <% if (cart && cart.items && cart.items.length > 0) { %>
              <div id="cart-items-container">
                <% cart.items.forEach(function(item) { %>
                <div class="cart-item rounded-lg border border-gray-200 bg-white p-4 shadow-sm md:p-6"
                  id="cart-item-<%= item.product && item.product._id ? item.product._id : item.product %>">
                  <div class="space-y-4 md:flex md:items-center md:justify-between md:gap-6 md:space-y-0">
                    <!-- Product Image -->
                    <a href="/product-details/<%= item.product && item.product._id ? item.product._id : item.product %>"
                      class="shrink-0 md:order-1">
                      <div class="h-20 w-20 overflow-hidden rounded">
                        <img class="h-full w-full object-cover"
                          src="/<%= item.product && item.product.images ? item.product.images[0] : 'default-image.png' %>"
                          alt="<%= item.product && item.product.product_name ? item.product.product_name : 'Product' %>" />
                      </div>
                    </a>

                    <!-- Quantity Selector -->
                    <label
                      for="counter-input-<%= item.product && item.product._id ? item.product._id : item.product %>"
                      class="sr-only">Choose quantity:</label>
                    <div class="flex items-center justify-between md:order-3 md:justify-end">
                      <div class="flex items-center">
                        <!-- Quantity Counter Component -->
                        <div class="quantity-counter">
                          <!-- Decrement Button -->
                          <button type="button" data-action="decrement"
                            data-item-id="<%= item.product && item.product._id ? item.product._id : item.product %>"
                            class="quantity-btn decrement-btn inline-flex h-5 w-5 shrink-0 items-center justify-center rounded-md border border-gray-300 bg-gray-100 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-100">
                            <svg class="h-2.5 w-2.5 text-gray-900" aria-hidden="true"
                              xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2">
                              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M1 1h16" />
                            </svg>
                          </button>

                          <!-- Quantity Input -->
                          <input type="text"
                            id="counter-input-<%= item.product && item.product._id ? item.product._id : item.product %>"
                            class="quantity-input w-10 shrink-0 border-0 bg-transparent text-center text-sm font-medium text-gray-900 focus:outline-none focus:ring-0"
                            value="<%= item.quantity %>" required />

                          <!-- Increment Button -->
                          <button type="button" data-action="increment"
                            data-item-id="<%= item.product && item.product._id ? item.product._id : item.product %>"
                            class="quantity-btn increment-btn inline-flex h-5 w-5 shrink-0 items-center justify-center rounded-md border border-gray-300 bg-gray-100 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-100">
                            <svg class="h-2.5 w-2.5 text-gray-900" aria-hidden="true"
                              xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M9 1v16M1 9h16" />
                            </svg>
                          </button>
                        </div>

                        <script>
                          // Wrap in an IIFE to avoid polluting the global scope
                          (function () {
                            // Use a global flag to ensure the event listener is attached only once
                            if (!window.__updateQuantityListenerAttached) {
                              document.addEventListener("click", function (e) {
                                const actionEl = e.target.closest("[data-action]");
                                if (!actionEl) return;
                                e.stopPropagation();
                                const itemId = actionEl.getAttribute("data-item-id");
                                const action = actionEl.getAttribute("data-action");
                                const change = action === "increment" ? 1 : -1;
                                updateQuantity(itemId, change);
                              });
                              window.__updateQuantityListenerAttached = true;
                            }

                            // Function to update the quantity on the server and update the UI optimistically
                            async function updateQuantity(itemId, change) {
                              const quantityInput = document.getElementById(`counter-input-${itemId}`);
                              const currentQuantity = parseInt(quantityInput.value, 10) || 0;
                              const newQuantity = currentQuantity + change;

                              // Enforce the maximum quantity limit on the client side
                              if (newQuantity > 15) {
                                console.error('Maximum quantity per product is 15');
                                return;
                              }

                              // Optimistically update the UI immediately
                              quantityInput.value = newQuantity;

                              try {
                                const response = await fetch('/cart/update-quantity', {
                                  method: 'PATCH',
                                  headers: { 'Content-Type': 'application/json' },
                                  body: JSON.stringify({ itemId, change })
                                });
                                const data = await response.json();

                                if (data.success) {
                                  if (data.removed) {
                                    const cartItem = quantityInput.closest('.cart-item');
                                    if (cartItem) {
                                      cartItem.remove();
                                    }
                                    
                                    // Check if cart is empty now
                                    const cartItems = document.querySelectorAll('.cart-item');
                                    if (cartItems.length === 0) {
                                      showEmptyCartMessage();
                                    }
                                  } else {
                                    if (data.updatedItem && typeof data.updatedItem.quantity !== 'undefined') {
                                      quantityInput.value = data.updatedItem.quantity;
                                    }
                                  }
                                  // Update order summary live if provided
                                  if (data.updatedCart) {
                                    updateOrderSummary(data.updatedCart);
                                  }
                                } else {
                                  quantityInput.value = currentQuantity;
                                  console.error('Error updating quantity:', data.message);
                                }
                              } catch (error) {
                                quantityInput.value = currentQuantity;
                                console.error('Fetch error:', error);
                              }

                              // Update the decrement button state live based on the new quantity
                              const decrementBtn = document.querySelector(`button[data-action="decrement"][data-item-id="${itemId}"]`);
                              if (newQuantity <= 1) {
                                decrementBtn.disabled = true;
                                decrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
                              } else {
                                decrementBtn.disabled = false;
                                decrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                              }
                            }

                            // When the page loads, check each quantity input and disable its decrement button if quantity is 1 or less
                            document.addEventListener("DOMContentLoaded", function() {
                              document.querySelectorAll(".quantity-input").forEach(function(input) {
                                const itemId = input.id.replace("counter-input-", "");
                                const quantity = parseInt(input.value, 10) || 0;
                                const decrementBtn = document.querySelector(`button[data-action="decrement"][data-item-id="${itemId}"]`);
                                if (quantity <= 1 && decrementBtn) {
                                  decrementBtn.disabled = true;
                                  decrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
                                } else if (decrementBtn) {
                                  decrementBtn.disabled = false;
                                  decrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                                }
                              });
                            });
                          })();
                        </script>

                      </div>
                      <div class="text-end md:order-4 md:w-32">
                        <p class="text-base font-bold text-gray-900">₹<%= item.item_price.toLocaleString('en-IN') %>
                        </p>
                      </div>
                    </div>

                    <!-- Product Details -->
                    <div class="w-full min-w-0 flex-1 space-y-4 md:order-2 md:max-w-md">
                      <a href="/product-details/<%= item.product && item.product._id ? item.product._id : item.product %>"
                        class="text-base font-medium text-gray-900 hover:underline">
                        <%= item.product && item.product.product_name ? item.product.product_name : 'Product Name Not Available' %>
                      </a>

                      <div class="flex items-center gap-4">
                        <button type="button"
                          class="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-900 hover:underline">
                          <svg class="me-1.5 h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                            width="24" height="24" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                              stroke-width="2"
                              d="M12.01 6.001C6.5 1 1 8 5.782 13.001L12.011 20l6.23-7C23 8 17.5 1 12.01 6.002Z" />
                          </svg>
                          Add to Bucketlist
                        </button>

                        <button
                          id="remove-item-btn-<%= item.product && item.product._id ? item.product._id : item.product %>"
                          data-product-id="<%= item.product && item.product._id ? item.product._id : item.product %>"
                          type="button"
                          class="remove-item-btn inline-flex items-center text-sm font-medium text-red-600 hover:underline">
                          <svg class="me-1.5 h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                            width="24" height="24" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                              stroke-width="2" d="M6 18 17.94 6M18 18 6.06 6" />
                          </svg>
                          Remove
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
                <% }); %>
              </div>

              <div id="alert-container"></div>

              <script>
                // Function to update the order summary with new cart data
                function updateOrderSummary(updatedCart) {
                  const cartSubtotalEl = document.getElementById('cart-subtotal');
                  const savingsEl = document.getElementById('savings');
                  const shippingFeeEl = document.getElementById('shipping-fee');
                  const taxEl = document.getElementById('tax');
                  const cartTotalEl = document.getElementById('cart-total');
                  
                  if (cartSubtotalEl) cartSubtotalEl.textContent = '₹' + Number(updatedCart.cart_subtotal).toLocaleString('en-IN');
                  if (savingsEl) savingsEl.textContent = '-₹' + Number(updatedCart.savings).toLocaleString('en-IN');
                  if (shippingFeeEl) shippingFeeEl.textContent = '₹' + Number(updatedCart.shipping_fee).toLocaleString('en-IN');
                  if (taxEl) taxEl.textContent = '₹' + Number(updatedCart.tax).toLocaleString('en-IN');
                  if (cartTotalEl) cartTotalEl.textContent = '₹' + Number(updatedCart.cart_total).toLocaleString('en-IN');
                }

                // Function to show empty cart message
                function showEmptyCartMessage() {
                  document.getElementById('cart-items-container').innerHTML = `
                    <div class="flex flex-col items-center justify-center py-12">
                      <svg class="w-16 h-16 text-gray-400 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.293 2.293a1 1 0 00.293 1.414l1 1a1 1 0 001.414-.293L9 15m0 0l3-6m0 0l3 6m-6 0h6" />
                      </svg>
                      <p class="text-xl font-semibold text-gray-700">Your cart is empty.</p>
                      <p class="text-gray-500 mt-2">Looks like you haven't added any items yet.</p>
                    </div>`;
                }

                function showAlert(message, type = 'success') {
                  const alertContainer = document.getElementById('alert-container');
                  const alertDiv = document.createElement('div');
                  // Define Tailwind classes based on type: success (green) or error (red)
                  const baseClasses = 'px-4 py-2 mb-2 rounded shadow-lg transition-opacity duration-300';
                  const typeClasses = type === 'success'
                    ? 'bg-green-100 text-green-800 border border-green-400'
                    : 'bg-red-100 text-red-800 border border-red-400';
                  alertDiv.className = `${baseClasses} ${typeClasses}`;
                  alertDiv.textContent = message;
                  alertContainer.appendChild(alertDiv);
                  // Remove after 3 seconds
                  setTimeout(() => {
                    alertDiv.classList.add('opacity-0');
                    setTimeout(() => alertDiv.remove(), 300);
                  }, 3000);
                }

                // Attach event listeners to all remove buttons
                document.querySelectorAll('.remove-item-btn').forEach(function (button) {
                  button.addEventListener('click', function () {
                    const productId = this.getAttribute('data-product-id');
                    // Sending productId as a URL parameter in the DELETE request
                    fetch(`/cart/remove-item?productId=${productId}`, {
                      method: 'DELETE',
                      headers: {
                        'Content-Type': 'application/json'
                      }
                    })
                      .then(response => response.json())
                      .then(data => {
                        if (data.success) {
                          showAlert('Item removed successfully.', 'success');
                          // Remove the cart item from the DOM
                          const cartItemElement = document.getElementById('cart-item-' + productId);
                          if (cartItemElement) {
                            cartItemElement.remove();
                          }
                          
                          // Update order summary with the updated cart data
                          if (data.updatedCart) {
                            updateOrderSummary(data.updatedCart);
                          }
                          
                          // If no items remain, update the container with empty cart message
                          if (document.querySelectorAll('.cart-item').length === 0) {
                            showEmptyCartMessage();
                          }
                        } else {
                          showAlert('Failed to remove item.', 'error');
                        }
                      })
                      .catch(error => {
                        showAlert('Error: ' + error, 'error');
                      });
                  });
                });
              </script>

              <% } else { %>
              <div class="flex flex-col items-center justify-center py-12">
                <svg class="w-16 h-16 text-gray-400 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none"
                  viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.293 2.293a1 1 0 00.293 1.414l1 1a1 1 0 001.414-.293L9 15m0 0l3-6m0 0l3 6m-6 0h6" />
                </svg>
                <p class="text-xl font-semibold text-gray-700">Your cart is empty.</p>
                <p class="text-gray-500 mt-2">Looks like you haven't added any items yet.</p>
              </div>
              <% } %>
            </div>

            <!-- People Also Bought Section -->
            <h3 class="text-2xl font-semibold text-gray-900 mt-8">
              People also bought
            </h3>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8" id="productsContainer">
              <% products.forEach(product => { %>
              <a href="/product-details/<%=product._id%>" class="group">
                <div class="product-card bg-white p-6 rounded-xl shadow-sm group-hover:shadow-lg transition-shadow duration-300 flex flex-col h-[27rem]">
                  <div class="relative flex-1 overflow-hidden">
                    <img src="/<%= product.images[0] %>" 
                         alt="<%= product.product_name %>" 
                         class="w-full h-64 object-contain mb-4 rounded-lg transition-transform duration-300 group-hover:scale-105">
                    <button class="absolute top-3 right-3 bg-white p-2 rounded-full shadow-sm hover:bg-gray-100 transition-colors duration-200">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600 hover:text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                    </button>
                  </div>
                  <div class="mt-4">
                    <h3 class="font-semibold text-lg mb-2 text-gray-800 truncate"><%= product.product_name %></h3>
                    <div class="flex items-center justify-between mb-3">
                      <span class="text-2xl font-bold text-indigo-600">₹<%= product.price.toLocaleString('en-IN') %></span>
                      <button class="p-2 bg-indigo-100 rounded-full hover:bg-indigo-200 transition-colors duration-200 add-to-cart-btn" 
                              data-product-id="<%= product._id %>">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </a>
              <% }); %>
            </div>
            <script>
              function showAlert(message, type = 'success') {
                const alertContainer = document.getElementById('alert-container');
                
                // Create alert element
                const alertElement = document.createElement('div');
                alertElement.className = `mb-4 p-4 rounded-lg shadow-lg alert-animate-in ${
                    type === 'success' 
                        ? 'bg-green-100 border border-green-400 text-green-700' 
                        : 'bg-red-100 border border-red-400 text-red-700'
                }`;
                
                // Create alert content
                alertElement.innerHTML = `
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                ${type === 'success' 
                                    ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd">'
                                    : '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd">'
                                }
                            </svg>
                            <span>${message}</span>
                        </div>
                        <button class="text-current hover:text-gray-700" onclick="this.parentElement.parentElement.remove()">
                            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </div>
                `;
                
                // Add alert to container
                alertContainer.appendChild(alertElement);
                
                // Remove alert after 3 seconds
                setTimeout(() => {
                    alertElement.classList.remove('alert-animate-in');
                    alertElement.classList.add('alert-animate-out');
                    setTimeout(() => alertElement.remove(), 300);
                }, 3000);
              }
          
              document.addEventListener("DOMContentLoaded", () => {
                // Add click listeners to navigation links (excluding cart buttons)
                const navigationLinks = document.querySelectorAll("a:not(.add-to-cart-btn)");
                navigationLinks.forEach(link => {
                  link.addEventListener("click", function() {
                    showLoader();
                  });
                });
          
                const addToCartButtons = document.querySelectorAll(".add-to-cart-btn");
          
                addToCartButtons.forEach(button => {
                  button.addEventListener("click", async (event) => {
                    event.preventDefault();
                    event.stopPropagation(); // Prevent event bubbling
                    const productId = button.getAttribute("data-product-id");
          
                    try {
                      // Exceptional case: Do not show loader for add-to-cart requests
                      const response = await fetch("/cart/add", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ productId, quantity: 1 })
                      });
          
                      const result = await response.json();
                      hideLoader();
          
                      if (response.ok) {
                        showAlert(result.message, 'success');
                        // Update cart items container and order summary if updated data is returned
                        if (result.updatedCartHTML) {
                          document.getElementById('cart-items-container').innerHTML = result.updatedCartHTML;
                        }
                        if (result.updatedCart) {
                          updateOrderSummary(result.updatedCart);
                        }
                        setTimeout(()=>{
                          window.location.reload();
                        },1000)
                      } else {
                        showAlert(result.message || "Failed to add item to cart", 'error');
                      }
                    } catch (error) {
                      hideLoader();
                      showAlert("Network error. Please try again later.", 'error');
                    }
                  });
                });
              });
            </script>
          </div>

          <!-- Order Summary & Voucher Section -->
          <div class="mx-auto mt-6 max-w-4xl flex-1 space-y-6 lg:mt-0 lg:w-full">
            <div class="space-y-4 rounded-lg border border-gray-200 bg-white p-4 shadow-sm sm:p-6">
              <p class="text-xl font-semibold text-gray-900">
                Order summary
              </p>

              <div class="space-y-4">
                <div class="space-y-2">
                  <dl class="flex items-center justify-between gap-4">
                    <dt class="text-base font-normal text-gray-500">
                      Original price
                    </dt>
                    <dd id="cart-subtotal" class="text-base font-medium text-gray-900">
                      ₹<%= cart.cart_subtotal.toLocaleString('en-IN') %>
                    </dd>
                  </dl>

                

                  <dl class="flex items-center justify-between gap-4">
                    <dt class="text-base font-normal text-gray-500">
                      Shipping Fee
                    </dt>
                    <dd id="shipping-fee" class="text-base font-medium text-gray-900">
                      ₹<%= cart.shipping_fee.toLocaleString('en-IN') %>
                    </dd>
                  </dl>

                  <dl class="flex items-center justify-between gap-4">
                    <dt class="text-base font-normal text-gray-500">
                      Tax
                    </dt>
                    <dd id="tax" class="text-base font-medium text-gray-900">
                      ₹<%= cart.tax.toLocaleString('en-IN') %>
                    </dd>
                  </dl>
                </div>

                <dl class="flex items-center justify-between gap-4 border-t border-gray-200 pt-2">
                  <dt class="text-base font-bold text-gray-900">
                    Total
                  </dt>
                  <dd id="cart-total" class="text-base font-bold text-gray-900">
                    ₹<%= cart.cart_total.toLocaleString('en-IN') %>
                  </dd>
                </dl>
                <!-- Checkout Button -->
                <div class="mt-6">
                  <a href="/cart/checkout" class="w-full inline-block bg-indigo-600 hover:bg-indigo-700 text-white text-center font-semibold py-3 px-4 rounded-lg shadow-md transition-colors duration-200">
                    Proceed to Checkout
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <%- include('./partials/footer') %>
  
</body>
</html>
