<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Shopping Cart - Guitman</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#f5f3ff',
              100: '#ede9fe',
              200: '#ddd6fe',
              300: '#c4b5fd',
              400: '#a78bfa',
              500: '#8b5cf6',
              600: '#7c3aed',
              700: '#6d28d9',
              800: '#5b21b6',
              900: '#4c1d95',
              950: '#2e1065',
            }
          },
          animation: {
            'fade-in': 'fadeIn 0.3s ease-in-out',
            'fade-out': 'fadeOut 0.3s ease-in-out',
            'slide-up': 'slideUp 0.3s ease-in-out',
            'slide-down': 'slideDown 0.3s ease-in-out',
            'bounce-once': 'bounce 1s ease-in-out 1',
          },
          keyframes: {
            fadeIn: {
              '0%': { opacity: '0' },
              '100%': { opacity: '1' },
            },
            fadeOut: {
              '0%': { opacity: '1' },
              '100%': { opacity: '0' },
            },
            slideUp: {
              '0%': { transform: 'translateY(10px)', opacity: '0' },
              '100%': { transform: 'translateY(0)', opacity: '1' },
            },
            slideDown: {
              '0%': { transform: 'translateY(-10px)', opacity: '0' },
              '100%': { transform: 'translateY(0)', opacity: '1' },
            },
          },
          boxShadow: {
            'soft': '0 2px 10px rgba(0, 0, 0, 0.05)',
            'hover': '0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.05)',
          }
        }
      }
    }
  </script>
  <style>
    body {
      font-family: "Inter", sans-serif;
      scroll-behavior: smooth;
    }

    /* Toast notification styling */
    .toast-container {
      position: fixed;
      bottom: 1.5rem;
      right: 1.5rem;
      z-index: 50;
      max-width: 24rem;
      width: calc(100% - 2rem);
    }

    .toast {
      transform: translateY(100%);
      opacity: 0;
      transition: all 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
    }

    .toast.show {
      transform: translateY(0);
      opacity: 1;
    }

    /* Cart item styling */
    .cart-item {
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .cart-item:hover {
      transform: translateY(-2px);
      box-shadow: var(--tw-shadow-hover);
    }

    .cart-item::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 0;
      height: 2px;
      background-color: #7c3aed;
      transition: width 0.3s ease;
    }

    .cart-item:hover::after {
      width: 100%;
    }

    /* Quantity counter styling */
    .quantity-counter {
      display: flex;
      align-items: center;
      border-radius: 0.5rem;
      overflow: hidden;
      border: 1px solid #e5e7eb;
      padding: 0.25rem;
      background-color: #f9fafb;
      transition: all 0.2s ease;
    }

    .quantity-counter:hover {
      border-color: #c4b5fd;
      background-color: #f5f3ff;
    }

    .quantity-btn {
      transition: all 0.2s ease;
      position: relative;
      overflow: hidden;
    }

    .quantity-btn::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 100%;
      height: 100%;
      background-color: rgba(124, 58, 237, 0.1);
      border-radius: 50%;
      transform: translate(-50%, -50%) scale(0);
      transition: transform 0.3s ease;
    }

    .quantity-btn:active::after {
      transform: translate(-50%, -50%) scale(2);
    }

    .quantity-btn:hover:not(:disabled) {
      transform: scale(1.05);
      background-color: #f5f3ff;
    }

    .quantity-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    /* Product card styling */
    .product-card {
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .product-card:hover {
      transform: translateY(-5px);
    }

    .product-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to bottom, rgba(124, 58, 237, 0.05), transparent);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .product-card:hover::before {
      opacity: 1;
    }

    /* Loader styling */
    .loader {
      border: 3px solid rgba(124, 58, 237, 0.1);
      border-radius: 50%;
      border-top: 3px solid #7c3aed;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
    }

    .mini-loader {
      border: 2px solid rgba(124, 58, 237, 0.1);
      border-radius: 50%;
      border-top: 2px solid #7c3aed;
      width: 16px;
      height: 16px;
      animation: spin 1s linear infinite;
      display: inline-block;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Disable text selection in quantity input */
    .quantity-input {
      user-select: none;
      -webkit-user-select: none;
    }

    /* Pulse animation for quantity update */
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    
    .pulse {
      animation: pulse 0.5s ease-in-out;
    }

    /* Empty cart animation */
    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-10px); }
    }

    .float-animation {
      animation: float 3s ease-in-out infinite;
    }

    /* Scrollbar styling */
    .custom-scrollbar::-webkit-scrollbar {
      width: 6px;
      height: 6px;
    }

    .custom-scrollbar::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 10px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
      background: #c4b5fd;
      border-radius: 10px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
      background: #a78bfa;
    }

    /* Coupon input styling */
    .coupon-input {
      transition: all 0.3s ease;
    }

    .coupon-input:focus {
      border-color: #7c3aed;
      box-shadow: 0 0 0 2px rgba(124, 58, 237, 0.2);
    }

    /* Checkout button hover effect */
    .checkout-btn {
      position: relative;
      overflow: hidden;
    }

    .checkout-btn::after {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.7s ease;
    }

    .checkout-btn:hover::after {
      left: 100%;
    }

    /* Badge animation */
    @keyframes badgePulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }

    .badge-pulse {
      animation: badgePulse 1.5s infinite;
    }

    /* Ripple effect for buttons */
    .ripple {
      position: relative;
      overflow: hidden;
    }

    .ripple::after {
      content: "";
      display: block;
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      pointer-events: none;
      background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);
      background-repeat: no-repeat;
      background-position: 50%;
      transform: scale(10, 10);
      opacity: 0;
      transition: transform .5s, opacity 1s;
    }

    .ripple:active::after {
      transform: scale(0, 0);
      opacity: .3;
      transition: 0s;
    }

    /* Mobile-specific styles for People Also Bought section */
    @media (max-width: 767px) {
      .cart-content-wrapper {
        display: flex;
        flex-direction: column;
      }
      
      .people-also-bought-section {
        order: 3;
        margin-top: 2rem;
      }
    }
  </style>
</head>

<body class="bg-gray-50">
  <%- include('./partials/loading') %>
  <%- include('./partials/header') %>

  <!-- Toast Container -->
  <div id="toast-container" class="toast-container"></div>

  <main class="min-h-screen">
    <!-- Hero Section with Gradient Background -->
    <div class="bg-gradient-to-b from-primary-50 via-primary-50/50 to-white pt-24 pb-12">
      <div class="container mx-auto px-4 sm:px-6 lg:px-8">
        <%- include('./partials/breadcrumbs', { breadcrumbs }) %>
        
        <div class="mt-6 flex flex-col items-start">
          <h1 class="text-3xl font-bold text-primary-900 sm:text-4xl">Your Shopping Cart</h1>
          <p class="mt-2 text-lg text-gray-600">Review your items and proceed to checkout</p>
          
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <div class="mt-2 inline-flex items-center rounded-full bg-primary-100 px-3 py-1 text-sm font-medium text-primary-800">
              <span class="mr-1"><%= cart.items.length %></span>
              <span><%= cart.items.length === 1 ? 'item' : 'items' %> in your cart</span>
            </div>
          <% } %>
        </div>
      </div>
    </div>

    <section class="py-8 antialiased">
      <div class="container mx-auto px-4 sm:px-6 lg:px-8">
        <div class="mt-6 lg:grid lg:grid-cols-12 lg:gap-8 cart-content-wrapper">
          <!-- Cart Items Section -->
          <div class="lg:col-span-8">
            <div class="space-y-6">
              <% if (cart && cart.items && cart.items.length > 0) { %>
                <div id="cart-items-container" class="animate-slide-up">
                  <% cart.items.forEach(function(item, index) { %>
                    <div class="cart-item rounded-xl border border-gray-200 bg-white p-5 shadow-soft md:p-6 relative <%= item.stock === 0 ? 'opacity-70' : '' %>"
                      id="cart-item-<%= item.product && item.product._id ? item.product._id : item.product %>"
                      data-item-price="<%= item.item_price %>">
                      
                      <% if(item.product.stock === 0){ %>
                        <div class="absolute -top-1 -right-1 bg-red-500 text-white px-3 py-1 rounded-full text-xs font-semibold shadow-md z-10">
                          Out of Stock
                        </div>
                      <% } else if(item.product.stock <= 5) { %>
                        <div class="absolute -top-1 -right-1 bg-amber-500 text-white px-3 py-1 rounded-full text-xs font-semibold shadow-md z-10 badge-pulse">
                          Only <%= item.product.stock %> left
                        </div>
                      <% } %>
                      
                      <div class="flex flex-col md:flex-row md:items-center md:gap-6">
                        <!-- Product Image with Link -->
                        <a href="/product-details/<%= item.product && item.product._id ? item.product._id : item.product %>" 
                           class="group relative mb-4 flex-shrink-0 overflow-hidden rounded-lg md:mb-0 md:w-32 md:h-32">
                          <div class="absolute inset-0 bg-primary-100 opacity-0 transition-opacity group-hover:opacity-30"></div>
                          <img class="h-28 w-28 md:h-full md:w-full object-contain p-2 transition-transform duration-300 group-hover:scale-105"
                            src="/<%= item.product && item.product.images ? item.product.images[0] : 'default-image.png' %>"
                            alt="<%= item.product && item.product.product_name ? item.product.product_name : 'Product' %>" />
                        </a>
                
                        <!-- Product Details -->
                        <div class="flex-1 space-y-3">
                          <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start">
                            <a href="/product-details/<%= item.product && item.product._id ? item.product._id : item.product %>"
                              class="text-lg font-semibold text-gray-900 hover:text-primary-700 transition-colors line-clamp-2">
                              <%= item.product && item.product.product_name ? item.product.product_name : 'Product Name Not Available' %>
                            </a>
                            
                            <div class="mt-2 sm:mt-0 text-right">
                              <p class="text-lg font-bold text-primary-800 item-price">₹<%= item.item_price.toLocaleString('en-IN') %></p>
                              <p class="text-xs text-gray-500 item-unit-price">₹<%= item.item_price.toLocaleString('en-IN') %> each</p>
                            </div>
                          </div>
                          
                          <% if (item.product.description) { %>
                            <p class="text-sm text-gray-600 line-clamp-2"><%= item.product.description %></p>
                          <% } %>
                          
                          <div class="flex flex-wrap items-center justify-between gap-4 pt-3 border-t border-gray-100">
                            <!-- Quantity Controls -->
                            <div class="flex items-center">
                              <label for="counter-input-<%= item.product && item.product._id ? item.product._id : item.product %>" class="mr-3 text-sm font-medium text-gray-700">
                                Quantity:
                              </label>
                              <div class="quantity-counter">
                                <!-- Decrement Button -->
                                <button type="button" data-action="decrement"
                                  data-item-id="<%= item.product && item.product._id ? item.product._id : item.product %>"
                                  class="quantity-btn decrement-btn inline-flex h-8 w-8 items-center justify-center rounded-md border border-gray-200 bg-white hover:bg-primary-50 focus:outline-none focus:ring-2 focus:ring-primary-300 ripple <%= item.quantity <= 1 ? 'opacity-50 cursor-not-allowed' : '' %>"
                                  <%= item.quantity <= 1 ? 'disabled' : '' %>>
                                  <i class="fas fa-minus text-xs text-primary-700"></i>
                                </button>
                
                                <!-- Quantity Input -->
                                <input type="text"
                                  id="counter-input-<%= item.product && item.product._id ? item.product._id : item.product %>"
                                  class="quantity-input w-12 border-0 bg-transparent text-center text-sm font-medium text-gray-900 focus:outline-none focus:ring-0"
                                  value="<%= item.quantity %>" readonly />
                
                                <!-- Increment Button -->
                                <button type="button" data-action="increment"
                                  data-item-id="<%= item.product && item.product._id ? item.product._id : item.product %>"
                                  class="quantity-btn increment-btn inline-flex h-8 w-8 items-center justify-center rounded-md border border-gray-200 bg-white hover:bg-primary-50 focus:outline-none focus:ring-2 focus:ring-primary-300 ripple <%= item.quantity >= 15 || item.quantity >= item.product.stock ? 'opacity-50 cursor-not-allowed' : '' %>"
                                  <%= item.quantity >= 15 || item.quantity >= item.product.stock ? 'disabled' : '' %>>
                                  <i class="fas fa-plus text-xs text-primary-700"></i>
                                </button>
                              </div>
                            </div>
                            
                            <!-- Action Buttons -->
                            <div class="flex items-center space-x-4">
                              <button type="button"
                                class="inline-flex items-center text-sm font-medium text-primary-600 hover:text-primary-800 hover:underline transition-colors">
                                <i class="far fa-heart mr-1.5"></i>
                                Save for Later
                              </button>
                
                              <button id="remove-item-btn-<%= item.product && item.product._id ? item.product._id : item.product %>"
                                data-product-id="<%= item.product && item.product._id ? item.product._id : item.product %>"
                                type="button"
                                class="remove-item-btn inline-flex items-center text-sm font-medium text-red-600 hover:text-red-800 hover:underline transition-colors">
                                <i class="far fa-trash-alt mr-1.5"></i>
                                Remove
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <% if (index < cart.items.length - 1) { %>
                        <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-[95%] h-px bg-gray-100"></div>
                      <% } %>
                    </div>
                  <% }); %>
                </div>                

              <div id="alert-container"></div>

              <script>
                // Cart state management
                const CartState = {
                  // Store cart data in memory
                  cartData: null,
                  
                  // Initialize cart state from server data
                  init: function(initialData) {
                    this.cartData = initialData;
                    // Also store in localStorage for persistence
                    this.saveToLocalStorage();
                  },
                  
                  // Update cart data
                  updateCart: function(newCartData) {
                    this.cartData = newCartData;
                    this.saveToLocalStorage();
                  },
                  
                  // Save to localStorage for persistence
                  saveToLocalStorage: function() {
                    if (this.cartData) {
                      localStorage.setItem('cartState', JSON.stringify(this.cartData));
                    }
                  },
                  
                  // Load from localStorage
                  loadFromLocalStorage: function() {
                    const savedCart = localStorage.getItem('cartState');
                    if (savedCart) {
                      try {
                        this.cartData = JSON.parse(savedCart);
                        return this.cartData;
                      } catch (e) {
                        console.error('Error parsing saved cart:', e);
                      }
                    }
                    return null;
                  },
                  
                  // Get cart data
                  getCart: function() {
                    return this.cartData || this.loadFromLocalStorage();
                  }
                };

                // Define updateOrderSummary function for live updates
                function updateOrderSummary(updatedCart) {
                  const cartSubtotalEl = document.getElementById('cart-subtotal');
                  const actualPriceEl = document.getElementById('actual-price');
                  const discountedPriceEl = document.getElementById('discounted-price');
                  const savingsEl = document.getElementById('savings');
                  const shippingFeeEl = document.getElementById('shipping-fee');
                  const taxEl = document.getElementById('tax');
                  const cartTotalEl = document.getElementById('cart-total');
                  
                  if (cartSubtotalEl) {
                    cartSubtotalEl.textContent = '₹' + Number(updatedCart.cart_subtotal).toLocaleString('en-IN');
                    // Add pulse animation
                    cartSubtotalEl.classList.add('pulse');
                    setTimeout(() => cartSubtotalEl.classList.remove('pulse'), 500);
                  }
                  
                  if (actualPriceEl && updatedCart.items) {
                    const actualPrice = updatedCart.items.reduce((sum, item) => 
                      sum + ((item.product.originalPrice || item.item_price) * item.quantity), 0);
                    actualPriceEl.textContent = '₹' + actualPrice.toLocaleString('en-IN');
                  }
                  
                  if (discountedPriceEl) {
                    discountedPriceEl.textContent = '₹' + Number(updatedCart.cart_subtotal).toLocaleString('en-IN');
                  }
                  
                  if (savingsEl && updatedCart.items) {
                    const actualPrice = updatedCart.items.reduce((sum, item) => 
                      sum + ((item.product.originalPrice || item.item_price) * item.quantity), 0);
                    const savings = actualPrice - updatedCart.cart_subtotal;
                    savingsEl.textContent = '₹' + savings.toLocaleString('en-IN');
                  }
                  
                  if (shippingFeeEl) {
                    shippingFeeEl.textContent = '₹' + Number(updatedCart.shipping_fee).toLocaleString('en-IN');
                  }
                  
                  if (taxEl) {
                    taxEl.textContent = '₹' + Number(updatedCart.tax).toLocaleString('en-IN');
                  }
                  
                  if (cartTotalEl) {
                    cartTotalEl.textContent = '₹' + Number(updatedCart.cart_total).toLocaleString('en-IN');
                    // Add pulse animation
                    cartTotalEl.classList.add('pulse');
                    setTimeout(() => cartTotalEl.classList.remove('pulse'), 500);
                  }
                  
                  // Update cart state
                  CartState.updateCart(updatedCart);
                  
                  // Update item count in the summary if it exists
                  const itemCountEl = document.querySelector('.order-summary-item-count');
                  if (itemCountEl && updatedCart.items) {
                    const itemCount = updatedCart.items.length;
                    itemCountEl.textContent = `${itemCount} ${itemCount === 1 ? 'item' : 'items'}`;
                  }
                  
                  // Update header cart count if it exists
                  const headerCartCount = document.querySelector('.cart-count');
                  if (headerCartCount && updatedCart.items) {
                    headerCartCount.textContent = updatedCart.items.length;
                  }
                }

                function showEmptyCartMessage() {
                  const cartItemsContainer = document.getElementById('cart-items-container');
                  if (cartItemsContainer) {
                    cartItemsContainer.innerHTML = `
                      <div class="flex flex-col items-center justify-center py-12 animate-fade-in">
                        <div class="float-animation mb-6">
                          <i class="fas fa-shopping-cart text-primary-300 text-8xl"></i>
                        </div>
                        <h2 class="text-2xl font-semibold text-gray-900 mb-2">Your cart is empty</h2>
                        <p class="text-gray-600 mb-8 text-center max-w-md">Looks like you haven't added any items to your cart yet. Browse our collection and find something you'll love!</p>
                        <a href="/" class="inline-flex items-center px-6 py-3 bg-primary-600 text-white font-medium rounded-lg hover:bg-primary-700 transition-colors shadow-md hover:shadow-lg">
                          <i class="fas fa-arrow-left mr-2"></i>
                          Continue Shopping
                        </a>
                      </div>
                    `;
                    
                    // Hide the order summary section
                    const orderSummary = document.querySelector('.order-summary');
                    if (orderSummary) {
                      orderSummary.classList.add('hidden');
                    }
                  }
                }

                // Function to update item price display based on quantity
                function updateItemPriceDisplay(itemId, quantity) {
                  const cartItem = document.getElementById(`cart-item-${itemId}`);
                  if (!cartItem) return;
                  
                  const basePrice = parseFloat(cartItem.getAttribute('data-item-price'));
                  const totalPrice = basePrice * quantity;
                  
                  const priceElement = cartItem.querySelector('.item-price');
                  if (priceElement) {
                    priceElement.textContent = '₹' + totalPrice.toLocaleString('en-IN');
                    // Add pulse animation
                    priceElement.classList.add('pulse');
                    setTimeout(() => priceElement.classList.remove('pulse'), 500);
                  }
                }

                // Global variable to hold current product id for removal
                window.currentProductId = null;

                // Debounce function to prevent excessive API calls
                function debounce(func, wait) {
                  let timeout;
                  return function(...args) {
                    const context = this;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(context, args), wait);
                  };
                }

                // Function to update quantity with proper backend communication
                async function updateQuantity(itemId, newQuantity, actionType) {
                  // Get the input element
                  const quantityInput = document.getElementById(`counter-input-${itemId}`);
                  if (!quantityInput) return;
                  
                  // Get the current quantity
                  const currentQuantity = parseInt(quantityInput.value, 10) || 0;
                  
                  // Calculate the change based on action type
                  let change = 0;
                  if (actionType === 'increment') {
                    change = 1;
                  } else if (actionType === 'decrement') {
                    change = -1;
                  } else {
                    // Direct quantity update
                    change = newQuantity - currentQuantity;
                  }
                  
                  // Enforce minimum quantity of 1
                  if (currentQuantity + change < 1) {
                    return;
                  }
                  
                  // Enforce the maximum quantity limit on the client side
                  if (currentQuantity + change > 15) {
                    showToast('Maximum quantity per item reached (15)', 'error');
                    return;
                  }
                  
                  // Get the buttons
                  const decrementBtn = document.querySelector(`button[data-action="decrement"][data-item-id="${itemId}"]`);
                  const incrementBtn = document.querySelector(`button[data-action="increment"][data-item-id="${itemId}"]`);
                  
                  // Disable buttons during the update
                  if (decrementBtn) decrementBtn.disabled = true;
                  if (incrementBtn) incrementBtn.disabled = true;
                  
                  // Show loading indicator in the input
                  const originalValue = quantityInput.value;
                  quantityInput.value = '...';
                  
                  try {
                    // Make the API call to update quantity
                    const response = await fetch('/cart/update-quantity', {
                      method: 'PATCH',
                      headers: { 
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest' // Add this to identify AJAX requests
                      },
                      body: JSON.stringify({ 
                        itemId, 
                        change,
                        currentQuantity, // Send current quantity for validation
                        newQuantity: currentQuantity + change // Send the expected new quantity
                      })
                    });
                    
                    // Parse the response
                    const data = await response.json();
                    
                    // Handle the response
                    if (data.success) {
                      // Update the input value
                      if (data.removed) {
                        // Item was removed (quantity became 0)
                        const cartItem = document.getElementById(`cart-item-${itemId}`);
                        if (cartItem) {
                          cartItem.classList.add('animate-fade-out');
                          setTimeout(() => {
                            cartItem.remove();
                            
                            // Check if cart is empty now
                            const cartItems = document.querySelectorAll('.cart-item');
                            if (cartItems.length === 0) {
                              showEmptyCartMessage();
                            }
                          }, 300);
                        }
                      } else {
                        // Item quantity was updated
                        if (data.updatedItem && typeof data.updatedItem.quantity !== 'undefined') {
                          quantityInput.value = data.updatedItem.quantity;
                          
                          // Update the item price display
                          updateItemPriceDisplay(itemId, data.updatedItem.quantity);
                          
                          // Update the decrement button state
                          if (decrementBtn) {
                            if (data.updatedItem.quantity <= 1) {
                              decrementBtn.disabled = true;
                              decrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
                            } else {
                              decrementBtn.disabled = false;
                              decrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                            }
                          }
                          
                          // Update the increment button state
                          if (incrementBtn) {
                            if (data.updatedItem.quantity >= 15) {
                              incrementBtn.disabled = true;
                              incrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
                            } else {
                              incrementBtn.disabled = false;
                              incrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                            }
                          }
                        }
                      }
                      
                      // Update order summary if provided
                      if (data.updatedCart) {
                        updateOrderSummary(data.updatedCart);
                      }
                      
                      // Show success message
                      showToast('Cart updated successfully', 'success');
                    } else {
                      // Restore the original value on error
                      quantityInput.value = originalValue;
                      showToast(data.message || 'Failed to update quantity', 'error');
                    }
                  } catch (error) {
                    // Restore the original value on error
                    quantityInput.value = originalValue;
                    console.error('Error updating quantity:', error);
                    showToast('Network error. Please try again.', 'error');
                  } finally {
                    // Re-enable buttons
                    if (decrementBtn) decrementBtn.disabled = false;
                    if (incrementBtn) incrementBtn.disabled = false;
                  }
                }

                // Function to show toast notifications
                function showToast(message, type = 'success') {
                  const toastContainer = document.getElementById('toast-container');
                  if (!toastContainer) return;
                  
                  // Create toast element
                  const toast = document.createElement('div');
                  toast.className = `toast mb-3 p-4 rounded-lg shadow-lg flex items-center ${
                    type === 'success' 
                      ? 'bg-green-50 border-l-4 border-green-500 text-green-800' 
                      : type === 'error'
                        ? 'bg-red-50 border-l-4 border-red-500 text-red-800'
                        : 'bg-blue-50 border-l-4 border-blue-500 text-blue-800'
                  }`;
                  
                  // Create toast content
                  toast.innerHTML = `
                    <div class="flex-shrink-0 mr-3">
                      <i class="fas ${
                        type === 'success' 
                          ? 'fa-check-circle text-green-500' 
                          : type === 'error'
                            ? 'fa-exclamation-circle text-red-500'
                            : 'fa-info-circle text-blue-500'
                      } text-lg"></i>
                    </div>
                    <div class="flex-1">
                      <p class="font-medium">${message}</p>
                    </div>
                    <button class="ml-auto text-gray-400 hover:text-gray-600 transition-colors">
                      <i class="fas fa-times"></i>
                    </button>
                  `;
                  
                  // Add click event to close button
                  const closeBtn = toast.querySelector('button');
                  closeBtn.addEventListener('click', () => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                  });
                  
                  // Add toast to container
                  toastContainer.appendChild(toast);
                  
                  // Trigger animation after a small delay
                  setTimeout(() => toast.classList.add('show'), 10);
                  
                  // Auto remove after 5 seconds
                  setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                  }, 5000);
                }

                // Initialize cart state when the page loads
                document.addEventListener('DOMContentLoaded', function() {
                  // Initialize cart state if we have cart data
                  const cartItemsContainer = document.getElementById('cart-items-container');
                  if (cartItemsContainer) {
                    // Try to extract cart data from the page
                    try {
                      // This assumes the server provides a global cart object
                      // If not, we'll need to make an API call to get the initial cart state
                      if (typeof cart !== 'undefined') {
                        CartState.init(cart);
                      } else {
                        // Fallback: Make an API call to get cart data
                        fetch('/cart/data')
                          .then(response => response.json())
                          .then(data => {
                            if (data.success && data.cart) {
                              CartState.init(data.cart);
                            }
                          })
                          .catch(error => console.error('Error fetching cart data:', error));
                      }
                    } catch (e) {
                      console.error('Error initializing cart state:', e);
                    }
                  }

                  // Set up event delegation for quantity buttons
                  document.addEventListener('click', function(event) {
                    // Find the closest button with data-action attribute
                    const button = event.target.closest('button[data-action]');
                    if (!button) return;
                    
                    // Prevent default behavior
                    event.preventDefault();
                    
                    // Get the action and item ID
                    const action = button.getAttribute('data-action');
                    const itemId = button.getAttribute('data-item-id');
                    
                    // Don't proceed if the button is disabled
                    if (button.disabled) return;
                    
                    // Call the updateQuantity function
                    updateQuantity(itemId, null, action);
                  });
                  
                  // Set up event listeners for quantity inputs (direct editing)
                  document.querySelectorAll('.quantity-input').forEach(input => {
                    // Make the input readonly to prevent direct editing
                    // We're using buttons for better UX and to prevent invalid inputs
                    input.setAttribute('readonly', true);
                  });
                  
                  // Attach event listeners to all remove buttons
                  document.querySelectorAll('.remove-item-btn').forEach(function(button) {
                    button.addEventListener('click', function() {
                      const productId = this.getAttribute('data-product-id');
                      window.currentProductId = productId;
                      // Show confirmation modal
                      const modal = document.getElementById('confirmation-modal');
                      if (modal) {
                        modal.classList.remove('hidden');
                      }
                    });
                  });
                });
              </script>

              <% } else { %>
              <div class="flex flex-col items-center justify-center py-16 animate-fade-in">
                <div class="float-animation mb-8">
                  <i class="fas fa-shopping-cart text-primary-300 text-8xl"></i>
                </div>
                <h2 class="text-3xl font-bold text-gray-900 mb-3">Your cart is empty</h2>
                <p class="text-gray-600 mb-8 text-center max-w-md">Looks like you haven't added any items to your cart yet. Browse our collection and find something you'll love!</p>
                <a href="/" class="inline-flex items-center px-6 py-3 bg-primary-600 text-white font-medium rounded-lg hover:bg-primary-700 transition-colors shadow-md hover:shadow-lg">
                  <i class="fas fa-arrow-left mr-2"></i>
                  Continue Shopping
                </a>
              </div>
              <% } %>
            </div>
            <script>
              document.addEventListener("DOMContentLoaded", () => {
                // Add click listeners to navigation links (excluding cart buttons)
                const navigationLinks = document.querySelectorAll("a:not(.add-to-cart-btn)");
                navigationLinks.forEach(link => {
                  link.addEventListener("click", function() {
                    showLoader();
                  });
                });
          
                const addToCartButtons = document.querySelectorAll(".add-to-cart-btn");
          
                addToCartButtons.forEach(button => {
                  button.addEventListener("click", async (event) => {
                    event.preventDefault();
                    event.stopPropagation(); // Prevent event bubbling
                    const productId = button.getAttribute("data-product-id");
          
                    try {
                      // Show mini loader inside the button
                      const originalButtonContent = button.innerHTML;
                      button.innerHTML = '<div class="loader"></div>';
                      button.disabled = true;
                      
                      const response = await fetch("/cart/add", {
                        method: "POST",
                        headers: { 
                          "Content-Type": "application/json",
                          "X-Requested-With": "XMLHttpRequest" // Add this to identify AJAX requests
                        },
                        body: JSON.stringify({ productId, quantity: 1 })
                      });
          
                      const result = await response.json();
                      
                      // Restore button content
                      button.innerHTML = originalButtonContent;
                      button.disabled = false;
          
                      if (response.ok) {
                        showToast(result.message || 'Item added to cart successfully!', 'success');
                        // Update cart items container and order summary if updated data is returned
                        if (result.updatedCartHTML) {
                          document.getElementById('cart-items-container').innerHTML = result.updatedCartHTML;
                          
                          // Re-attach event listeners to the new elements
                          document.querySelectorAll('.quantity-btn').forEach(btn => {
                            const action = btn.getAttribute('data-action');
                            const itemId = btn.getAttribute('data-item-id');
                            
                            btn.addEventListener('click', function() {
                              updateQuantity(itemId, null, action);
                            });
                          });
                        }
                        if (result.updatedCart) {
                          updateOrderSummary(result.updatedCart);
                        }
                      } else {
                        showToast(result.message || "Failed to add item to cart", 'error');
                      }
                    } catch (error) {
                      button.innerHTML = originalButtonContent;
                      button.disabled = false;
                      showToast("Network error. Please try again later.", 'error');
                    }
                  });
                });
              });
            </script>
          </div>

          <!-- Order Summary & Voucher Section -->
           <% if(cart && cart.items && cart.items.length > 0){ %>
            <div class="lg:col-span-4 mt-8 lg:mt-0">
              <div class="sticky top-24 space-y-6">
                <!-- Order Summary Card -->
                <div class="rounded-xl border border-gray-200 bg-white p-6 shadow-soft order-summary animate-slide-up">
                  <div class="flex items-center justify-between mb-5">
                    <h3 class="text-xl font-bold text-gray-900">
                      Order Summary
                    </h3>
                    <span class="inline-flex items-center rounded-full bg-primary-100 px-3 py-1 text-sm font-medium text-primary-800 order-summary-item-count">
                      <%= cart.items.length %> <%= cart.items.length === 1 ? 'item' : 'items' %>
                    </span>
                  </div>
            
                  <div class="space-y-4">
                    <!-- Price Breakdown -->
                    <div class="space-y-3">
                      <!-- Original Price -->
                      <div class="flex items-center justify-between text-gray-600">
                        <span>Original Price</span>
                        <span id="actual-price" class="font-medium">
                          ₹<%= cart.items.reduce((sum, item) => sum + ((item.product.originalPrice || item.item_price) * item.quantity), 0).toLocaleString('en-IN') %>
                        </span>
                      </div>
                      
                      <!-- Price After Offer -->
                      <% cart.items.forEach(function(item) { %>
                        <% if(item.product && item.product.offer) { %>
                          <div class="flex items-center justify-between text-gray-600">
                            <span>Price After Offer</span>
                            <span id="discounted-price" class="font-medium">
                              ₹<%= cart.cart_total %>
                            </span>
                          </div>
                        <% } %>
                      <% }); %>
                      
                      <!-- Savings -->
                      <div class="flex items-center justify-between text-green-600">
                        <span>Your Savings</span>
                        <span id="savings" class="font-medium">
                          ₹<%= (cart.items.reduce((sum, item) => sum + ((item.product.price || item.item_price) * item.quantity), 0) - cart.cart_subtotal).toLocaleString('en-IN') %>
                        </span>
                      </div>
                    </div>
            
                    <!-- Total -->
                    <div class="flex items-center justify-between border-t border-gray-200 pt-4">
                      <span class="text-lg font-bold text-gray-900">Total</span>
                      <span id="cart-total" class="text-xl font-bold text-primary-700">
                        ₹<%= cart.cart_total.toLocaleString('en-IN') %>
                      </span>
                    </div>
                  </div>
                  <!-- Checkout Button -->
                  <div class="mt-6">
                    <button 
                      id="checkout-btn" 
                      type="button"
                      class="checkout-btn w-full rounded-lg bg-primary-600 py-3.5 px-6 text-center font-semibold text-white shadow-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors flex items-center justify-center <%= cart.items.some(item => item.product.stock === 0) ? 'opacity-70 cursor-not-allowed' : '' %>"
                      <%= cart.items.some(item => item.product.stock === 0) ? 'disabled' : '' %>
                      onclick="<%= cart.items.some(item => item.product.stock === 0) ? 'event.preventDefault(); showToast(\'Please remove out of stock items before checkout\', \'error\')' : 'location.href=\'/cart/checkout\'' %>">
                      <span>Proceed to Checkout</span>
                      <i class="fas fa-arrow-right ml-2"></i>
                    </button>
                    
                    <% if(cart.items.some(item => item.product.stock === 0)) { %>
                      <div class="mt-3 p-3 bg-red-50 rounded-lg border border-red-200">
                        <p class="text-sm text-red-700 flex items-start">
                          <i class="fas fa-exclamation-circle mt-0.5 mr-2"></i>
                          <span>Please remove out of stock items before checkout</span>
                        </p>
                      </div>
                    <% } %>
                  </div>
                  <!-- Secure Checkout Notice -->
                  <div class="mt-4 flex items-center justify-center text-sm text-gray-500">
                    <i class="fas fa-lock mr-2 text-green-600"></i>
                    <span>Secure checkout</span>
                  </div>
                </div>
              </div>
            </div>            
          <% } %>
        </div>
        <!-- People Also Bought Section - Will be repositioned on mobile -->
        <div class="mt-16 mb-8 people-also-bought-section">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-bold text-gray-900">
              People also bought
            </h3>
            <a href="/shop" class="text-primary-600 hover:text-primary-700 font-medium flex items-center">
              View all
              <i class="fas fa-arrow-right ml-2"></i>
            </a>
          </div>
          
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6" id="productsContainer">
            <% products.forEach(product => { %>
            <div class="product-card bg-white rounded-xl shadow-soft border border-gray-100 overflow-hidden h-full flex flex-col transition-all duration-300 hover:shadow-hover">
              <a href="/product-details/<%=product._id%>" class="group relative flex-1 overflow-hidden p-4">
                <div class="relative h-48 w-full mb-4 overflow-hidden rounded-lg bg-primary-50/50">
                  <img src="/<%= product.images[0] %>" 
                      alt="<%= product.product_name %>" 
                      class="h-full w-full object-contain transition-transform duration-500 group-hover:scale-110">
                  
                  <% if(product.offerDetails) { %>
                    <div class="absolute top-2 left-2 bg-primary-600 text-white text-xs font-bold px-2 py-1 rounded-md">
                      <%= product.offerDetails.offer_percentage %>% OFF
                    </div>
                  <% } %>
                </div>
                
                <h3 class="font-semibold text-lg mb-1 text-gray-900 group-hover:text-primary-700 transition-colors line-clamp-2">
                  <%= product.product_name %>
                </h3>
                
                <div class="flex items-center mb-2">
                  <div class="flex">
                    <% for(let i = 0; i < 5; i++) { %>
                      <i class="fas fa-star text-xs <%= i < (product.avgRating || 4) ? 'text-amber-400' : 'text-gray-300' %>"></i>
                    <% } %>
                  </div>
                  <span class="text-xs text-gray-500 ml-1">(<%= product.reviews?.length || Math.floor(Math.random() * 20) %>)</span>
                </div>
              </a>
              
              <div class="p-4 pt-0 mt-auto border-t border-gray-100">
                <div class="flex items-center justify-between">
                  <div>
                    <span class="text-lg font-bold text-primary-700">₹<%= product.price.toLocaleString('en-IN') %></span>
                    <% if(product.originalPrice && product.originalPrice > product.price) { %>
                      <span class="text-sm text-gray-500 line-through ml-2">₹<%= product.originalPrice.toLocaleString('en-IN') %></span>
                    <% } %>
                  </div>
                  <button class="p-2 bg-primary-100 rounded-full hover:bg-primary-200 transition-colors duration-200 add-to-cart-btn ripple" 
                          data-product-id="<%= product._id %>">
                    <i class="fas fa-shopping-cart text-primary-700"></i>
                  </button>
                </div>
              </div>
            </div>
            <% }); %>
          </div>
        </div>
      </div>
    </section>
  </main>

  <%- include('./partials/footer') %>
  
  <!-- Confirmation Modal -->
  <div id="confirmation-modal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="absolute inset-0 bg-black bg-opacity-50 backdrop-blur-sm transition-opacity"></div>
    <div class="bg-white rounded-xl shadow-xl p-6 z-10 max-w-md w-full mx-4 animate-fade-in transform transition-all">
      <div class="text-center mb-4">
        <div class="mx-auto w-12 h-12 rounded-full bg-red-100 flex items-center justify-center mb-4">
          <i class="fas fa-trash-alt text-red-600 text-lg"></i>
        </div>
        <h3 class="text-xl font-bold text-gray-900">Remove Item</h3>
        <p class="mt-2 text-gray-600">Are you sure you want to remove this item from your cart?</p>
      </div>
      
      <div class="flex justify-center gap-4 mt-6">
        <button id="cancel-remove-btn" class="px-5 py-2.5 rounded-lg bg-gray-100 text-gray-800 font-medium hover:bg-gray-200 transition-colors">
          Cancel
        </button>
        <button id="confirm-remove-btn" class="px-5 py-2.5 rounded-lg bg-red-600 text-white font-medium hover:bg-red-700 transition-colors">
          Remove
        </button>
      </div>
    </div>
  </div>

  <script>
    // Attach event listeners for confirmation modal buttons
    document.getElementById('cancel-remove-btn').addEventListener('click', function() {
      const modal = document.getElementById('confirmation-modal');
      if (modal) {
        modal.classList.add('hidden');
      }
      window.currentProductId = null;
    });

    document.getElementById('confirm-remove-btn').addEventListener('click', function() {
      const productId = window.currentProductId;
      if (!productId) return;
      const modal = document.getElementById('confirmation-modal');
      if (modal) {
        modal.classList.add('hidden');
      }
      
      // Show a temporary loader
      const cartItem = document.getElementById('cart-item-' + productId);
      if (cartItem) {
        cartItem.innerHTML = '<div class="flex justify-center items-center py-10"><div class="loader"></div></div>';
      }
      
      fetch(`/cart/remove-item?productId=${productId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest' // Add this to identify AJAX requests
          }
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
              showToast('Item removed successfully', 'success');
              const cartItemElement = document.getElementById('cart-item-' + productId);
              if (cartItemElement) {
                  cartItemElement.classList.add('animate-fade-out');
                  setTimeout(() => {
                      cartItemElement.remove();
                      if (document.querySelectorAll('.cart-item').length === 0) {
                          showEmptyCartMessage();
                      }
                  }, 300);
              }
              if (data.updatedCart) {
                  updateOrderSummary(data.updatedCart);
              }
          } else {
              showToast('Failed to remove item', 'error');
              if (cartItem) {
                  // Restore the cart item if removal failed
                  location.reload();
              }
          }
      })
      .catch(error => {
          showToast('Network error. Please try again.', 'error');
          if (cartItem) {
              // Restore the cart item if removal failed
              location.reload();
          }
      });
      window.currentProductId = null;
    });
    
    // Function to show loader
    function showLoader() {
      const loaderElement = document.getElementById('loading');
      if (loaderElement) {
        loaderElement.classList.remove('hidden');
      }
    }
    
    // Function to hide loader
    function hideLoader() {
      const loaderElement = document.getElementById('loading');
      if (loaderElement) {
        loaderElement.classList.add('hidden');
      }
    }
  </script>
  
</body>
</html>