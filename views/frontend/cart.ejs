<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Shopping Cart - Guitman</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            purple: {
              50: '#f5f3ff',
              100: '#ede9fe',
              200: '#ddd6fe',
              300: '#c4b5fd',
              400: '#a78bfa',
              500: '#8b5cf6',
              600: '#7c3aed',
              700: '#6d28d9',
              800: '#5b21b6',
              900: '#4c1d95',
              950: '#2e1065',
            }
          },
          animation: {
            'fade-in': 'fadeIn 0.3s ease-in-out',
            'fade-out': 'fadeOut 0.3s ease-in-out',
            'slide-up': 'slideUp 0.3s ease-in-out',
          },
          keyframes: {
            fadeIn: {
              '0%': { opacity: '0' },
              '100%': { opacity: '1' },
            },
            fadeOut: {
              '0%': { opacity: '1' },
              '100%': { opacity: '0' },
            },
            slideUp: {
              '0%': { transform: 'translateY(10px)', opacity: '0' },
              '100%': { transform: 'translateY(0)', opacity: '1' },
            },
          },
        }
      }
    }
  </script>
  <style>
    body {
      font-family: "Inter", sans-serif;
    }

    .alert-animate-in {
      animation: fadeIn 0.3s ease-in-out;
    }

    .alert-animate-out {
      animation: fadeOut 0.3s ease-in-out;
    }

    .cart-item {
      transition: all 0.3s ease;
    }

    .cart-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .quantity-counter {
      display: flex;
      align-items: center;
      border-radius: 0.5rem;
      overflow: hidden;
      border: 1px solid #e5e7eb;
      padding: 0.25rem;
    }

    .quantity-btn {
      transition: all 0.2s ease;
    }

    .quantity-btn:hover:not(:disabled) {
      transform: scale(1.05);
    }

    .product-card {
      transition: all 0.3s ease;
    }

    .product-card:hover {
      transform: translateY(-5px);
    }

    /* Loader styles */
    .loader {
      border: 3px solid rgba(124, 58, 237, 0.1);
      border-radius: 50%;
      border-top: 3px solid #7c3aed;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
    }

    .mini-loader {
      border: 2px solid rgba(124, 58, 237, 0.1);
      border-radius: 50%;
      border-top: 2px solid #7c3aed;
      width: 16px;
      height: 16px;
      animation: spin 1s linear infinite;
      display: inline-block;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Disable text selection in quantity input */
    .quantity-input {
      user-select: none;
      -webkit-user-select: none;
    }

    /* Pulse animation for quantity update */
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    .pulse {
      animation: pulse 0.5s ease-in-out;
    }
  </style>
</head>

<body class="bg-gray-50">
  <%- include('./partials/loading') %>
  <%- include('./partials/header') %>

  <main class="mx-auto py-12 mt-3 bg-gradient-to-b from-purple-50 to-white">
    <%- include('./partials/breadcrumbs', { breadcrumbs }) %>
    <section class="py-8 antialiased md:py-12">
      <div class="mx-auto max-w-screen-xl px-4 2xl:px-0">
        <h2 class="text-2xl font-bold text-purple-900 sm:text-3xl mb-2">
          Your Shopping Cart
        </h2>
        <p class="text-gray-600 mb-8">Review your items and proceed to checkout</p>

        <div class="mt-6 sm:mt-8 md:gap-8 lg:flex lg:items-start xl:gap-10">
          <!-- Cart Items Section -->
          <div class="mx-auto w-full flex-none lg:max-w-2xl xl:max-w-4xl">
            <div class="space-y-6">
              <% if (cart && cart.items && cart.items.length > 0) { %>
              <div id="cart-items-container" class="animate-slide-up">
                <% cart.items.forEach(function(item) { %>
                <div class="cart-item rounded-xl border border-purple-100 bg-white p-5 shadow-sm md:p-6"
                  id="cart-item-<%= item.product && item.product._id ? item.product._id : item.product %>"
                  data-item-price="<%= item.item_price %>">
                  <div class="space-y-4 md:flex md:items-center md:justify-between md:gap-6 md:space-y-0">
                    <!-- Product Image -->
                    <a href="/product-details/<%= item.product && item.product._id ? item.product._id : item.product %>"
                      class="shrink-0 md:order-1">
                      <div class="h-24 w-24 overflow-hidden rounded-lg bg-purple-50 p-2">
                        <img class="h-full w-full object-contain"
                          src="/<%= item.product && item.product.images ? item.product.images[0] : 'default-image.png' %>"
                          alt="<%= item.product && item.product.product_name ? item.product.product_name : 'Product' %>" />
                      </div>
                    </a>

                    <!-- Quantity Selector -->
                    <label
                      for="counter-input-<%= item.product && item.product._id ? item.product._id : item.product %>"
                      class="sr-only">Choose quantity:</label>
                    <div class="flex items-center justify-between md:order-3 md:justify-end">
                      <div class="flex items-center">
                        <!-- Quantity Counter Component -->
                        <div class="quantity-counter bg-purple-50">
                          <!-- Decrement Button -->
                          <button type="button" data-action="decrement"
                            data-item-id="<%= item.product && item.product._id ? item.product._id : item.product %>"
                            class="quantity-btn decrement-btn inline-flex h-7 w-7 shrink-0 items-center justify-center rounded-md border border-purple-200 bg-white hover:bg-purple-100 focus:outline-none focus:ring-2 focus:ring-purple-300 <%= item.quantity <= 1 ? 'opacity-50 cursor-not-allowed' : '' %>"
                            <%= item.quantity <= 1 ? 'disabled' : '' %>>
                            <svg class="h-3 w-3 text-purple-700" aria-hidden="true"
                              xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2">
                              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M1 1h16" />
                            </svg>
                          </button>

                          <!-- Quantity Input -->
                          <input type="text"
                            id="counter-input-<%= item.product && item.product._id ? item.product._id : item.product %>"
                            class="quantity-input w-10 shrink-0 border-0 bg-transparent text-center text-sm font-medium text-purple-900 focus:outline-none focus:ring-0"
                            value="<%= item.quantity %>" readonly />

                          <!-- Increment Button -->
                          <button type="button" data-action="increment"
                            data-item-id="<%= item.product && item.product._id ? item.product._id : item.product %>"
                            class="quantity-btn increment-btn inline-flex h-7 w-7 shrink-0 items-center justify-center rounded-md border border-purple-200 bg-white hover:bg-purple-100 focus:outline-none focus:ring-2 focus:ring-purple-300">
                            <svg class="h-3 w-3 text-purple-700" aria-hidden="true"
                              xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M9 1v16M1 9h16" />
                            </svg>
                          </button>
                        </div>
                      </div>
                      <div class="text-end md:order-4 md:w-32 ml-4">
                        <p class="text-base font-bold text-purple-800 item-price">₹<%= item.item_price.toLocaleString('en-IN') %>
                        </p>
                        <p class="text-xs text-gray-500 item-unit-price">₹<%= item.item_price.toLocaleString('en-IN') %> each</p>
                      </div>
                    </div>

                    <!-- Product Details -->
                    <div class="w-full min-w-0 flex-1 space-y-3 md:order-2 md:max-w-md">
                      <a href="/product-details/<%= item.product && item.product._id ? item.product._id : item.product %>"
                        class="text-base font-medium text-purple-900 hover:text-purple-700 hover:underline transition-colors">
                        <%= item.product && item.product.product_name ? item.product.product_name : 'Product Name Not Available' %>
                      </a>

                      <div class="flex items-center gap-4">
                        <button type="button"
                          class="inline-flex items-center text-sm font-medium text-purple-600 hover:text-purple-800 hover:underline transition-colors">
                          <svg class="me-1.5 h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                            width="24" height="24" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                              stroke-width="2"
                              d="M12.01 6.001C6.5 1 1 8 5.782 13.001L12.011 20l6.23-7C23 8 17.5 1 12.01 6.002Z" />
                          </svg>
                          Add to Bucketlist
                        </button>

                        <button
                          id="remove-item-btn-<%= item.product && item.product._id ? item.product._id : item.product %>"
                          data-product-id="<%= item.product && item.product._id ? item.product._id : item.product %>"
                          type="button"
                          class="remove-item-btn inline-flex items-center text-sm font-medium text-red-600 hover:text-red-800 hover:underline transition-colors">
                          <svg class="me-1.5 h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                            width="24" height="24" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                              stroke-width="2" d="M6 18 17.94 6M18 18 6.06 6" />
                          </svg>
                          Remove
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
                <% }); %>
              </div>

              <div id="alert-container"></div>

              <script>
                // Cart state management
                const CartState = {
                  // Store cart data in memory
                  cartData: null,
                  
                  // Initialize cart state from server data
                  init: function(initialData) {
                    this.cartData = initialData;
                    // Also store in localStorage for persistence
                    this.saveToLocalStorage();
                  },
                  
                  // Update cart data
                  updateCart: function(newCartData) {
                    this.cartData = newCartData;
                    this.saveToLocalStorage();
                  },
                  
                  // Save to localStorage for persistence
                  saveToLocalStorage: function() {
                    if (this.cartData) {
                      localStorage.setItem('cartState', JSON.stringify(this.cartData));
                    }
                  },
                  
                  // Load from localStorage
                  loadFromLocalStorage: function() {
                    const savedCart = localStorage.getItem('cartState');
                    if (savedCart) {
                      try {
                        this.cartData = JSON.parse(savedCart);
                        return this.cartData;
                      } catch (e) {
                        console.error('Error parsing saved cart:', e);
                      }
                    }
                    return null;
                  },
                  
                  // Get cart data
                  getCart: function() {
                    return this.cartData || this.loadFromLocalStorage();
                  }
                };

                // Define updateOrderSummary function for live updates
                function updateOrderSummary(updatedCart) {
                  const cartSubtotalEl = document.getElementById('cart-subtotal');
                  const shippingFeeEl = document.getElementById('shipping-fee');
                  const taxEl = document.getElementById('tax');
                  const cartTotalEl = document.getElementById('cart-total');
                  
                  if (cartSubtotalEl) {
                    cartSubtotalEl.textContent = '₹' + Number(updatedCart.cart_subtotal).toLocaleString('en-IN');
                    // Add pulse animation
                    cartSubtotalEl.classList.add('pulse');
                    setTimeout(() => cartSubtotalEl.classList.remove('pulse'), 500);
                  }
                  
                  if (shippingFeeEl) {
                    shippingFeeEl.textContent = '₹' + Number(updatedCart.shipping_fee).toLocaleString('en-IN');
                  }
                  
                  if (taxEl) {
                    taxEl.textContent = '₹' + Number(updatedCart.tax).toLocaleString('en-IN');
                  }
                  
                  if (cartTotalEl) {
                    cartTotalEl.textContent = '₹' + Number(updatedCart.cart_total).toLocaleString('en-IN');
                    // Add pulse animation
                    cartTotalEl.classList.add('pulse');
                    setTimeout(() => cartTotalEl.classList.remove('pulse'), 500);
                  }
                  
                  // Update cart state
                  CartState.updateCart(updatedCart);
                  
                  // Update item count in the summary if it exists
                  const itemCountEl = document.querySelector('.order-summary-item-count');
                  if (itemCountEl && updatedCart.items) {
                    const itemCount = updatedCart.items.length;
                    itemCountEl.textContent = `${itemCount} ${itemCount === 1 ? 'item' : 'items'}`;
                  }
                }

                function showEmptyCartMessage() {
                  const cartItemsContainer = document.getElementById('cart-items-container');
                  if (cartItemsContainer) {
                    cartItemsContainer.innerHTML = `
                      <div class="flex flex-col items-center justify-center py-12 animate-fade-in">
                        <svg class="w-20 h-20 text-purple-300 mb-6" xmlns="http://www.w3.org/2000/svg" fill="none"
                          viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.293 2.293a1 1 0 00.293 1.414l1 1a1 1 0 001.414-.293L9 15m0 0l3-6m0 0l3 6m-6 0h6" />
                        </svg>
                        <p class="text-2xl font-semibold text-purple-900">Your cart is empty.</p>
                        <p class="text-gray-600 mt-2 text-center">Looks like you haven't added any items yet.</p>
                        <a href="/" class="mt-6 inline-flex items-center px-6 py-3 bg-purple-600 text-white font-medium rounded-lg hover:bg-purple-700 transition-colors">
                          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                          </svg>
                          Continue Shopping
                        </a>
                      </div>
                    `;
                    
                    // Hide the order summary section
                    const orderSummary = document.querySelector('.order-summary');
                    if (orderSummary) {
                      orderSummary.classList.add('hidden');
                    }
                  }
                }

                // Function to update item price display based on quantity
                function updateItemPriceDisplay(itemId, quantity) {
                  const cartItem = document.getElementById(`cart-item-${itemId}`);
                  if (!cartItem) return;
                  
                  const basePrice = parseFloat(cartItem.getAttribute('data-item-price'));
                  const totalPrice = basePrice * quantity;
                  
                  const priceElement = cartItem.querySelector('.item-price');
                  if (priceElement) {
                    priceElement.textContent = '₹' + totalPrice.toLocaleString('en-IN');
                    // Add pulse animation
                    priceElement.classList.add('pulse');
                    setTimeout(() => priceElement.classList.remove('pulse'), 500);
                  }
                }

                // Global variable to hold current product id for removal
                window.currentProductId = null;

                // Debounce function to prevent excessive API calls
                function debounce(func, wait) {
                  let timeout;
                  return function(...args) {
                    const context = this;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(context, args), wait);
                  };
                }

                // Function to update quantity with proper backend communication
                async function updateQuantity(itemId, newQuantity, actionType) {
                  // Get the input element
                  const quantityInput = document.getElementById(`counter-input-${itemId}`);
                  if (!quantityInput) return;
                  
                  // Get the current quantity
                  const currentQuantity = parseInt(quantityInput.value, 10) || 0;
                  
                  // Calculate the change based on action type
                  let change = 0;
                  if (actionType === 'increment') {
                    change = 1;
                  } else if (actionType === 'decrement') {
                    change = -1;
                  } else {
                    // Direct quantity update
                    change = newQuantity - currentQuantity;
                  }
                  
                  // Enforce minimum quantity of 1
                  if (currentQuantity + change < 1) {
                    return;
                  }
                  
                  // Enforce the maximum quantity limit on the client side
                  if (currentQuantity + change > 15) {
                    showAlert('Maximum quantity per user reached (15)', 'error');
                    return;
                  }
                  
                  // Get the buttons
                  const decrementBtn = document.querySelector(`button[data-action="decrement"][data-item-id="${itemId}"]`);
                  const incrementBtn = document.querySelector(`button[data-action="increment"][data-item-id="${itemId}"]`);
                  
                  // Disable buttons during the update
                  if (decrementBtn) decrementBtn.disabled = true;
                  if (incrementBtn) incrementBtn.disabled = true;
                  
                  // Show loading indicator in the input
                  const originalValue = quantityInput.value;
                  quantityInput.value = '...';
                  
                  try {
                    // Make the API call to update quantity
                    const response = await fetch('/cart/update-quantity', {
                      method: 'PATCH',
                      headers: { 
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest' // Add this to identify AJAX requests
                      },
                      body: JSON.stringify({ 
                        itemId, 
                        change,
                        currentQuantity, // Send current quantity for validation
                        newQuantity: currentQuantity + change // Send the expected new quantity
                      })
                    });
                    
                    // Parse the response
                    const data = await response.json();
                    
                    // Handle the response
                    if (data.success) {
                      // Update the input value
                      if (data.removed) {
                        // Item was removed (quantity became 0)
                        const cartItem = document.getElementById(`cart-item-${itemId}`);
                        if (cartItem) {
                          cartItem.classList.add('animate-fade-out');
                          setTimeout(() => {
                            cartItem.remove();
                            
                            // Check if cart is empty now
                            const cartItems = document.querySelectorAll('.cart-item');
                            if (cartItems.length === 0) {
                              showEmptyCartMessage();
                            }
                          }, 300);
                        }
                      } else {
                        // Item quantity was updated
                        if (data.updatedItem && typeof data.updatedItem.quantity !== 'undefined') {
                          quantityInput.value = data.updatedItem.quantity;
                          
                          // Update the item price display
                          updateItemPriceDisplay(itemId, data.updatedItem.quantity);
                          
                          // Update the decrement button state
                          if (decrementBtn) {
                            if (data.updatedItem.quantity <= 1) {
                              decrementBtn.disabled = true;
                              decrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
                            } else {
                              decrementBtn.disabled = false;
                              decrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                            }
                          }
                          
                          // Update the increment button state
                          if (incrementBtn) {
                            if (data.updatedItem.quantity >= 15) {
                              incrementBtn.disabled = true;
                              incrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
                            } else {
                              incrementBtn.disabled = false;
                              incrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                            }
                          }
                        }
                      }
                      
                      // Update order summary if provided
                      if (data.updatedCart) {
                        updateOrderSummary(data.updatedCart);
                      }
                      
                      // Show success message
                      showAlert('Cart updated successfully', 'success');
                    } else {
                      // Restore the original value on error
                      quantityInput.value = originalValue;
                      showAlert(data.message || 'Failed to update quantity', 'error');
                    }
                  } catch (error) {
                    // Restore the original value on error
                    quantityInput.value = originalValue;
                    console.error('Error updating quantity:', error);
                    showAlert('Network error. Please try again.', 'error');
                  } finally {
                    // Re-enable buttons
                    if (decrementBtn) decrementBtn.disabled = false;
                    if (incrementBtn) incrementBtn.disabled = false;
                  }
                }

                // Function to show alerts
                function showAlert(message, type = 'success') {
                  const alertContainer = document.getElementById('alert-container');
                  if (!alertContainer) return;
                  
                  // Create alert element
                  const alertElement = document.createElement('div');
                  alertElement.className = `mb-4 p-4 rounded-lg shadow-lg alert-animate-in ${
                    type === 'success' 
                      ? 'bg-green-100 border border-green-400 text-green-700' 
                      : 'bg-red-100 border border-red-400 text-red-700'
                  }`;
                  
                  // Create alert content
                  alertElement.innerHTML = `
                    <div class="flex justify-between items-center">
                      <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                          ${type === 'success' 
                            ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd">'
                            : '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd">'
                          }
                        </svg>
                        <span>${message}</span>
                      </div>
                      <button class="text-current hover:text-gray-700" onclick="this.parentElement.parentElement.remove()">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                      </button>
                    </div>
                  `;
                  
                  // Add alert to container
                  alertContainer.appendChild(alertElement);
                  
                  // Remove alert after 3 seconds
                  setTimeout(() => {
                    alertElement.classList.remove('alert-animate-in');
                    alertElement.classList.add('alert-animate-out');
                    setTimeout(() => alertElement.remove(), 300);
                  }, 3000);
                }

                // Initialize cart state when the page loads
                document.addEventListener('DOMContentLoaded', function() {
                  // Initialize cart state if we have cart data
                  const cartItemsContainer = document.getElementById('cart-items-container');
                  if (cartItemsContainer) {
                    // Try to extract cart data from the page
                    try {
                      // This assumes the server provides a global cart object
                      // If not, we'll need to make an API call to get the initial cart state
                      if (typeof cart !== 'undefined') {
                        CartState.init(cart);
                      } else {
                        // Fallback: Make an API call to get cart data
                        fetch('/cart/data')
                          .then(response => response.json())
                          .then(data => {
                            if (data.success && data.cart) {
                              CartState.init(data.cart);
                            }
                          })
                          .catch(error => console.error('Error fetching cart data:', error));
                      }
                    } catch (e) {
                      console.error('Error initializing cart state:', e);
                    }
                  }

                  // Set up event delegation for quantity buttons
                  document.addEventListener('click', function(event) {
                    // Find the closest button with data-action attribute
                    const button = event.target.closest('button[data-action]');
                    if (!button) return;
                    
                    // Prevent default behavior
                    event.preventDefault();
                    
                    // Get the action and item ID
                    const action = button.getAttribute('data-action');
                    const itemId = button.getAttribute('data-item-id');
                    
                    // Don't proceed if the button is disabled
                    if (button.disabled) return;
                    
                    // Call the updateQuantity function
                    updateQuantity(itemId, null, action);
                  });
                  
                  // Set up event listeners for quantity inputs (direct editing)
                  document.querySelectorAll('.quantity-input').forEach(input => {
                    // Make the input readonly to prevent direct editing
                    // We're using buttons for better UX and to prevent invalid inputs
                    input.setAttribute('readonly', true);
                    
                    // But if we wanted to allow direct editing, we could use this:
                    /*
                    input.addEventListener('change', debounce(function() {
                      const itemId = this.id.replace('counter-input-', '');
                      const newQuantity = parseInt(this.value, 10) || 1;
                      updateQuantity(itemId, newQuantity);
                    }, 500));
                    
                    // Prevent non-numeric input
                    input.addEventListener('keypress', function(e) {
                      if (!/[0-9]/.test(e.key)) {
                        e.preventDefault();
                      }
                    });
                    */
                  });
                  
                  // Attach event listeners to all remove buttons
                  document.querySelectorAll('.remove-item-btn').forEach(function(button) {
                    button.addEventListener('click', function() {
                      const productId = this.getAttribute('data-product-id');
                      window.currentProductId = productId;
                      // Show confirmation modal
                      const modal = document.getElementById('confirmation-modal');
                      if (modal) {
                        modal.classList.remove('hidden');
                      }
                    });
                  });
                });
              </script>

              <% } else { %>
              <div class="flex flex-col items-center justify-center py-12 animate-fade-in">
                <svg class="w-20 h-20 text-purple-300 mb-6" xmlns="http://www.w3.org/2000/svg" fill="none"
                  viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.293 2.293a1 1 0 00.293 1.414l1 1a1 1 0 001.414-.293L9 15m0 0l3-6m0 0l3 6m-6 0h6" />
                </svg>
                <p class="text-2xl font-semibold text-purple-900">Your cart is empty.</p>
                <p class="text-gray-600 mt-2 text-center">Looks like you haven't added any items yet.</p>
                <a href="/" class="mt-6 inline-flex items-center px-6 py-3 bg-purple-600 text-white font-medium rounded-lg hover:bg-purple-700 transition-colors">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                  </svg>
                  Continue Shopping
                </a>
              </div>
              <% } %>
            </div>

            <!-- People Also Bought Section -->
            <div class="mt-16 mb-8">
              <h3 class="text-2xl font-bold text-purple-900 mb-6">
                People also bought
              </h3>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6" id="productsContainer">
                <% products.forEach(product => { %>
                <a href="/product-details/<%=product._id%>" class="group">
                  <div class="product-card bg-white p-6 rounded-xl shadow-sm group-hover:shadow-lg transition-shadow duration-300 flex flex-col h-[27rem] border border-purple-100">
                    <div class="relative flex-1 overflow-hidden">
                      <img src="/<%= product.images[0] %>" 
                          alt="<%= product.product_name %>" 
                          class="w-full h-64 object-contain mb-4 rounded-lg transition-transform duration-300 group-hover:scale-105">
                      <button class="absolute top-3 right-3 bg-white p-2 rounded-full shadow-sm hover:bg-purple-50 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600 hover:text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                        </svg>
                      </button>
                    </div>
                    <div class="mt-4">
                      <h3 class="font-semibold text-lg mb-2 text-gray-800 truncate"><%= product.product_name %></h3>
                      <div class="flex items-center justify-between mb-3">
                        <span class="text-2xl font-bold text-purple-700">₹<%= product.price.toLocaleString('en-IN') %></span>
                        <button class="p-2 bg-purple-100 rounded-full hover:bg-purple-200 transition-colors duration-200 add-to-cart-btn" 
                                data-product-id="<%= product._id %>">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-purple-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                </a>
                <% }); %>
              </div>
            </div>
            <script>
              document.addEventListener("DOMContentLoaded", () => {
                // Add click listeners to navigation links (excluding cart buttons)
                const navigationLinks = document.querySelectorAll("a:not(.add-to-cart-btn)");
                navigationLinks.forEach(link => {
                  link.addEventListener("click", function() {
                    showLoader();
                  });
                });
          
                const addToCartButtons = document.querySelectorAll(".add-to-cart-btn");
          
                addToCartButtons.forEach(button => {
                  button.addEventListener("click", async (event) => {
                    event.preventDefault();
                    event.stopPropagation(); // Prevent event bubbling
                    const productId = button.getAttribute("data-product-id");
          
                    try {
                      // Show mini loader inside the button
                      const originalButtonContent = button.innerHTML;
                      button.innerHTML = '<div class="loader"></div>';
                      button.disabled = true;
                      
                      const response = await fetch("/cart/add", {
                        method: "POST",
                        headers: { 
                          "Content-Type": "application/json",
                          "X-Requested-With": "XMLHttpRequest" // Add this to identify AJAX requests
                        },
                        body: JSON.stringify({ productId, quantity: 1 })
                      });
          
                      const result = await response.json();
                      
                      // Restore button content
                      button.innerHTML = originalButtonContent;
                      button.disabled = false;
          
                      if (response.ok) {
                        showAlert(result.message, 'success');
                        // Update cart items container and order summary if updated data is returned
                        if (result.updatedCartHTML) {
                          document.getElementById('cart-items-container').innerHTML = result.updatedCartHTML;
                          
                          // Re-attach event listeners to the new elements
                          document.querySelectorAll('.quantity-btn').forEach(btn => {
                            const action = btn.getAttribute('data-action');
                            const itemId = btn.getAttribute('data-item-id');
                            
                            btn.addEventListener('click', function() {
                              updateQuantity(itemId, null, action);
                            });
                          });
                        }
                        if (result.updatedCart) {
                          updateOrderSummary(result.updatedCart);
                        }
                      } else {
                        showAlert(result.message || "Failed to add item to cart", 'error');
                      }
                    } catch (error) {
                      button.innerHTML = originalButtonContent;
                      button.disabled = false;
                      showAlert("Network error. Please try again later.", 'error');
                    }
                  });
                });
              });
            </script>
          </div>

          <!-- Order Summary & Voucher Section -->
           <% if(cart && cart.items && cart.items.length > 0){ %>
          <div class="mx-auto mt-6 max-w-4xl flex-1 space-y-6 lg:mt-0 lg:w-full">
            <div class="space-y-6 rounded-xl border border-purple-200 bg-white p-6 shadow-sm sm:p-8 animate-slide-up order-summary">
              <div class="flex items-center justify-between">
                <p class="text-xl font-bold text-purple-900">
                  Order Summary
                </p>
                <span class="text-sm text-purple-600 bg-purple-50 px-3 py-1 rounded-full order-summary-item-count">
                  <%= cart.items.length %> <%= cart.items.length === 1 ? 'item' : 'items' %>
                </span>
              </div>

              <div class="space-y-4">
                <div class="space-y-3">
                  <dl class="flex items-center justify-between gap-4">
                    <dt class="text-base font-normal text-gray-600">
                      Original price
                    </dt>
                    <dd id="cart-subtotal" class="text-base font-medium text-gray-900">
                      ₹<%= cart.cart_subtotal.toLocaleString('en-IN') %>
                    </dd>
                  </dl>

                  <dl class="flex items-center justify-between gap-4">
                    <dt class="text-base font-normal text-gray-600">
                      Shipping Fee
                    </dt>
                    <dd id="shipping-fee" class="text-base font-medium text-gray-900">
                      ₹<%= cart.shipping_fee.toLocaleString('en-IN') %>
                    </dd>
                  </dl>

                  <dl class="flex items-center justify-between gap-4">
                    <dt class="text-base font-normal text-gray-600">
                      Tax
                    </dt>
                    <dd id="tax" class="text-base font-medium text-gray-900">
                      ₹<%= cart.tax.toLocaleString('en-IN') %>
                    </dd>
                  </dl>
                </div>

                <!-- Coupon Code Section -->
                <div class="pt-4 pb-2">
                  <div class="relative">
                    <input type="text" id="coupon-code" placeholder="Enter coupon code" 
                      class="w-full px-4 py-3 border border-purple-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    <button id="apply-coupon" 
                      class="absolute right-2 top-2 px-4 py-1 bg-purple-600 text-white text-sm font-medium rounded-lg hover:bg-purple-700 transition-colors">
                      Apply
                    </button>
                  </div>
                </div>

                <dl class="flex items-center justify-between gap-4 border-t border-purple-100 pt-4">
                  <dt class="text-lg font-bold text-purple-900">
                    Total
                  </dt>
                  <dd id="cart-total" class="text-lg font-bold text-purple-900">
                    ₹<%= cart.cart_total.toLocaleString('en-IN') %>
                  </dd>
                </dl>
                <!-- Checkout Button -->
                <div class="mt-6">
                  <a href="/cart/checkout" class="w-full inline-block bg-purple-600 hover:bg-purple-700 text-white text-center font-semibold py-4 px-6 rounded-xl shadow-md transition-colors duration-200 flex items-center justify-center">
                    <span>Proceed to Checkout</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                  </a>
                </div>
                
                <!-- Secure Checkout Notice -->
                <div class="flex items-center justify-center text-sm text-gray-600 mt-4">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                  Secure checkout
                </div>
              </div>
            </div>
          </div>
          <% } %>
        </div>
      </div>
    </section>
  </main>

  <%- include('./partials/footer') %>
  
  <!-- Confirmation Modal -->
  <div id="confirmation-modal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="absolute inset-0 bg-black opacity-50"></div>
    <div class="bg-white rounded-xl shadow-xl p-6 z-10 max-w-md w-full mx-4 animate-fade-in">
      <h3 class="text-xl font-bold text-purple-900 mb-4">Remove Item</h3>
      <p class="mb-6 text-gray-600">Are you sure you want to remove this item from your cart?</p>
      <div class="flex justify-end gap-4">
        <button id="cancel-remove-btn" class="px-5 py-2.5 rounded-lg bg-gray-200 text-gray-800 font-medium hover:bg-gray-300 transition-colors">Cancel</button>
        <button id="confirm-remove-btn" class="px-5 py-2.5 rounded-lg bg-red-600 text-white font-medium hover:bg-red-700 transition-colors">Remove</button>
      </div>
    </div>
  </div>

  <script>
    // Attach event listeners for confirmation modal buttons
    document.getElementById('cancel-remove-btn').addEventListener('click', function() {
      const modal = document.getElementById('confirmation-modal');
      if (modal) {
        modal.classList.add('hidden');
      }
      window.currentProductId = null;
    });

    document.getElementById('confirm-remove-btn').addEventListener('click', function() {
      const productId = window.currentProductId;
      if (!productId) return;
      const modal = document.getElementById('confirmation-modal');
      if (modal) {
        modal.classList.add('hidden');
      }
      
      // Show a temporary loader
      const cartItem = document.getElementById('cart-item-' + productId);
      if (cartItem) {
        cartItem.innerHTML = '<div class="flex justify-center items-center py-10"><div class="loader"></div></div>';
      }
      
      fetch(`/cart/remove-item?productId=${productId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest' // Add this to identify AJAX requests
          }
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
              showAlert('Item removed successfully.', 'success');
              const cartItemElement = document.getElementById('cart-item-' + productId);
              if (cartItemElement) {
                  cartItemElement.classList.add('animate-fade-out');
                  setTimeout(() => {
                      cartItemElement.remove();
                      if (document.querySelectorAll('.cart-item').length === 0) {
                          showEmptyCartMessage();
                      }
                  }, 300);
              }
              if (data.updatedCart) {
                  updateOrderSummary(data.updatedCart);
              }
          } else {
              showAlert('Failed to remove item.', 'error');
              if (cartItem) {
                  // Restore the cart item if removal failed
                  location.reload();
              }
          }
      })
      .catch(error => {
          showAlert('Error: ' + error, 'error');
          if (cartItem) {
              // Restore the cart item if removal failed
              location.reload();
          }
      });
      window.currentProductId = null;
    });
    
    // Apply coupon button functionality
    document.addEventListener('DOMContentLoaded', function() {
      const applyCouponBtn = document.getElementById('apply-coupon');
      if (applyCouponBtn) {
        applyCouponBtn.addEventListener('click', function() {
          const couponCode = document.getElementById('coupon-code').value.trim();
          if (!couponCode) {
            showAlert('Please enter a coupon code', 'error');
            return;
          }
          
          // Show mini loader in button
          const originalButtonText = applyCouponBtn.innerHTML;
          applyCouponBtn.innerHTML = '<div class="loader mx-auto" style="width: 18px; height: 18px;"></div>';
          applyCouponBtn.disabled = true;
          
          // Make API call to apply coupon
          fetch('/cart/apply-coupon', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ couponCode })
          })
          .then(response => response.json())
          .then(data => {
            applyCouponBtn.innerHTML = originalButtonText;
            applyCouponBtn.disabled = false;
            
            if (data.success) {
              showAlert(data.message || 'Coupon applied successfully!', 'success');
              if (data.updatedCart) {
                updateOrderSummary(data.updatedCart);
              }
            } else {
              showAlert(data.message || 'Invalid coupon code', 'error');
            }
          })
          .catch(error => {
            applyCouponBtn.innerHTML = originalButtonText;
            applyCouponBtn.disabled = false;
            showAlert('Network error. Please try again.', 'error');
          });
        });
      }
    });
    
    // Function to show loader
    function showLoader() {
      const loaderElement = document.getElementById('page-loader');
      if (loaderElement) {
        loaderElement.classList.remove('hidden');
      }
    }
    
    // Function to hide loader
    function hideLoader() {
      const loaderElement = document.getElementById('page-loader');
      if (loaderElement) {
        loaderElement.classList.add('hidden');
      }
    }
  </script>
  
</body>
</html>