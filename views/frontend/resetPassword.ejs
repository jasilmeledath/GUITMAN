<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password - GUITMAN</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        
        /* Modal animation */
        .modal-enter {
            opacity: 0;
            transform: scale(0.95);
        }
        .modal-enter-active {
            opacity: 1;
            transform: scale(1);
            transition: opacity 300ms, transform 300ms;
        }
        .modal-exit {
            opacity: 1;
        }
        .modal-exit-active {
            opacity: 0;
            transform: scale(0.95);
            transition: opacity 300ms, transform 300ms;
        }
        
        /* OTP input styling */
        .otp-input {
            width: 3rem;
            height: 3rem;
            font-size: 1.5rem;
            text-align: center;
            border-radius: 0.375rem;
            border: 2px solid #4f46e5;
            background-color: rgba(79, 70, 229, 0.1);
            color: white;
        }
        .otp-input:focus {
            outline: none;
            border-color: white;
            box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.2);
        }
    </style>
</head>
<body class="min-h-screen flex flex-col bg-gray-50">
    <%- include('./partials/loading') %>
    <%- include('./partials/header') %>

    <main class="flex-grow grid md:grid-cols-2 overflow-hidden pt-16">
        <!-- Left Side - Forgot Password Form -->
        <div class="w-full px-4 md:px-8 lg:px-16 flex items-center justify-center bg-indigo-900 min-h-screen">
            <div class="w-full max-w-md space-y-8 text-white py-12">
                <!-- Alert Messages -->
                <div id="successAlert" class="hidden p-4 mb-4 text-sm rounded-lg bg-green-100 text-green-800" role="alert">
                    <div class="font-medium">Success!</div>
                    <div id="successMessage">Your password has been reset successfully.</div>
                </div>
                
                <div id="errorAlert" class="hidden p-4 mb-4 text-sm rounded-lg bg-red-100 text-red-800" role="alert">
                    <div class="font-medium">Error!</div>
                    <div id="errorMessage">There was a problem with your request.</div>
                </div>

                <!-- Step 1: Email Form (Initially Visible) -->
                <div id="emailStep" class="space-y-8">
                    <div class="flex justify-between items-center">
                        <h2 class="text-3xl font-bold">Forgot Password</h2>
                        <button class="text-gray-300 hover:text-white transition-colors duration-200">
                            English (UK)
                        </button>
                    </div>
                    
                    <p class="text-indigo-200">
                        Enter your email address below and we'll send you a one-time password (OTP) to reset your password.
                    </p>

                    <form id="emailForm" class="space-y-6" novalidate>
                        <div>
                            <label for="email" class="sr-only">Email Address</label>
                            <input
                                type="email"
                                id="email"
                                name="email"
                                required
                                class="w-full px-4 py-3 bg-indigo-800/50 border-b-2 border-indigo-600 focus:border-white focus:ring-0 placeholder-indigo-300 text-white rounded-t-md"
                                placeholder="Email Address"
                            />
                            <p id="emailError" class="text-red-400 text-sm mt-1 hidden"></p>
                        </div>
                        
                        <button
                            type="submit"
                            class="w-full py-3 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors duration-200 font-semibold"
                        >
                            Send OTP
                        </button>
                    </form>

                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-indigo-600"></div>
                        </div>
                        <div class="relative flex justify-center text-sm">
                            <span class="px-2 bg-indigo-900 text-indigo-300">OR</span>
                        </div>
                    </div>

                    <p class="text-center text-indigo-200">
                        Remember your password? 
                        <a href="/login" class="text-white hover:underline transition-colors duration-200">Login</a>
                    </p>
                </div>

                <!-- Step 2: Reset Password Form (Initially Hidden) -->
                <div id="resetPasswordStep" class="space-y-8 hidden">
                    <div class="flex justify-between items-center">
                        <h2 class="text-3xl font-bold">Reset Password</h2>
                        <button class="text-gray-300 hover:text-white transition-colors duration-200">
                            English (UK)
                        </button>
                    </div>
                    
                    <p class="text-indigo-200">
                        Create a new password for your account.
                    </p>

                    <form id="resetPasswordForm" class="space-y-6" novalidate>
                        <div class="relative">
                            <label for="newPassword" class="sr-only">New Password</label>
                            <input
                                type="password"
                                id="newPassword"
                                name="newPassword"
                                required
                                class="w-full px-4 py-3 bg-indigo-800/50 border-b-2 border-indigo-600 focus:border-white focus:ring-0 placeholder-indigo-300 text-white rounded-t-md"
                                placeholder="New Password"
                            />
                            <button
                                type="button"
                                class="absolute right-3 top-3 text-indigo-300 hover:text-white transition-colors duration-200"
                                onclick="togglePasswordVisibility('newPassword', this)"
                                aria-label="Toggle password visibility"
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-6 w-6"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                                    />
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                                    />
                                </svg>
                            </button>
                            <p id="newPasswordError" class="text-red-400 text-sm mt-1 hidden"></p>
                        </div>
                        
                        <div class="relative">
                            <label for="confirmPassword" class="sr-only">Confirm Password</label>
                            <input
                                type="password"
                                id="confirmPassword"
                                name="confirmPassword"
                                required
                                class="w-full px-4 py-3 bg-indigo-800/50 border-b-2 border-indigo-600 focus:border-white focus:ring-0 placeholder-indigo-300 text-white rounded-t-md"
                                placeholder="Confirm Password"
                            />
                            <button
                                type="button"
                                class="absolute right-3 top-3 text-indigo-300 hover:text-white transition-colors duration-200"
                                onclick="togglePasswordVisibility('confirmPassword', this)"
                                aria-label="Toggle password visibility"
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-6 w-6"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                                    />
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                                    />
                                </svg>
                            </button>
                            <p id="confirmPasswordError" class="text-red-400 text-sm mt-1 hidden"></p>
                        </div>
                        
                        <div class="text-sm text-indigo-200 space-y-1">
                            <p>Password must contain:</p>
                            <ul class="list-disc pl-5 space-y-1">
                                <li>At least 8 characters</li>
                                <li>At least one uppercase letter</li>
                                <li>At least one number</li>
                                <li>At least one special character</li>
                            </ul>
                        </div>
                        
                        <button
                            type="submit"
                            class="w-full py-3 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors duration-200 font-semibold"
                        >
                            Reset Password
                        </button>
                    </form>

                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-indigo-600"></div>
                        </div>
                        <div class="relative flex justify-center text-sm">
                            <span class="px-2 bg-indigo-900 text-indigo-300">OR</span>
                        </div>
                    </div>

                    <p class="text-center text-indigo-200">
                        Remember your password? 
                        <a href="/login" class="text-white hover:underline transition-colors duration-200">Login</a>
                    </p>
                </div>
                
                <!-- Step 3: Success Message (Initially Hidden) -->
                <div id="successStep" class="space-y-8 hidden">
                    <div class="text-center">
                        <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-green-100 mb-6">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                        </div>
                        <h2 class="text-3xl font-bold mb-4">Password Reset Successful</h2>
                        <p class="text-indigo-200 mb-8">
                            Your password has been reset successfully. You can now login with your new password.
                        </p>
                        <a href="/login" class="inline-block w-full py-3 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors duration-200 font-semibold text-center">
                            Go to Login
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side - Guitar Image -->
        <div class="hidden md:block relative bg-black min-h-screen">
            <img src="/ui/login.jpg" 
                alt="Black and white Telecaster guitar" 
                class="absolute inset-0 w-full h-full object-cover"
                style="mix-blend-mode: screen;">
        </div>
    </main>

    <!-- OTP Verification Modal -->
    <div id="otpModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-indigo-900 rounded-lg shadow-xl p-6 w-full max-w-md mx-4 border border-indigo-700">
            <div class="text-center mb-6">
                <h3 class="text-xl font-bold text-white mb-2">Enter Verification Code</h3>
                <p class="text-indigo-200">
                    We've sent a 6-digit code to your email. Enter it below to verify your identity.
                </p>
            </div>
            
            <form id="otpForm" class="space-y-6">
                <div class="flex justify-center space-x-2">
                    <input type="text" maxlength="1" class="otp-input" data-index="1" />
                    <input type="text" maxlength="1" class="otp-input" data-index="2" />
                    <input type="text" maxlength="1" class="otp-input" data-index="3" />
                    <input type="text" maxlength="1" class="otp-input" data-index="4" />
                    <input type="text" maxlength="1" class="otp-input" data-index="5" />
                    <input type="text" maxlength="1" class="otp-input" data-index="6" />
                </div>
                
                <p id="otpError" class="text-red-400 text-sm text-center hidden"></p>
                
                <div class="text-center text-indigo-200">
                    <p>Didn't receive the code?</p>
                    <button type="button" id="resendOtp" class="text-white hover:underline mt-1">
                        Resend OTP
                    </button>
                </div>
                
                <div class="flex space-x-3">
                    <button type="button" id="cancelOtp" class="flex-1 py-3 px-4 bg-indigo-800 text-white rounded-md hover:bg-indigo-700 transition-colors duration-200">
                        Cancel
                    </button>
                    <button type="submit" class="flex-1 py-3 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors duration-200 font-semibold">
                        Verify
                    </button>
                </div>
            </form>
        </div>
    </div>

    <%- include('./partials/footer') %>

    <script>
        // Global variables
        let userEmail = '';
        let otpToken = '';
        
        // DOM Elements
        const emailStep = document.getElementById('emailStep');
        const resetPasswordStep = document.getElementById('resetPasswordStep');
        const successStep = document.getElementById('successStep');
        const otpModal = document.getElementById('otpModal');
        
        // Alert Elements
        const successAlert = document.getElementById('successAlert');
        const errorAlert = document.getElementById('errorAlert');
        const successMessage = document.getElementById('successMessage');
        const errorMessage = document.getElementById('errorMessage');
        
        // Form Elements
        const emailForm = document.getElementById('emailForm');
        const otpForm = document.getElementById('otpForm');
        const resetPasswordForm = document.getElementById('resetPasswordForm');
        
        // Error Elements
        const emailError = document.getElementById('emailError');
        const otpError = document.getElementById('otpError');
        const newPasswordError = document.getElementById('newPasswordError');
        const confirmPasswordError = document.getElementById('confirmPasswordError');
        
        // Buttons
        const resendOtpButton = document.getElementById('resendOtp');
        const cancelOtpButton = document.getElementById('cancelOtp');
        
        // OTP Input Elements
        const otpInputs = document.querySelectorAll('.otp-input');
        
        /**
         * Initialize the page
         */
        document.addEventListener('DOMContentLoaded', function() {
            // Set up form submissions
            emailForm.addEventListener('submit', handleEmailSubmit);
            otpForm.addEventListener('submit', handleOtpSubmit);
            resetPasswordForm.addEventListener('submit', handleResetPasswordSubmit);
            
            // Set up OTP input behavior
            setupOtpInputs();
            
            // Set up button actions
            resendOtpButton.addEventListener('click', handleResendOtp);
            cancelOtpButton.addEventListener('click', hideOtpModal);
            
            // Set up navigation links
            const links = document.querySelectorAll("a");
            links.forEach(link => {
                link.addEventListener("click", function() {
                    if (typeof showLoader === 'function') {
                        showLoader();
                    }
                });
            });
        });
        
        /**
         * Show success alert
         */
        function showSuccessAlert(message) {
            successMessage.textContent = message;
            successAlert.classList.remove('hidden');
            errorAlert.classList.add('hidden');
            
            // Scroll to top to ensure alert is visible
            window.scrollTo({ top: 0, behavior: 'smooth' });
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                successAlert.classList.add('hidden');
            }, 5000);
        }
        
        /**
         * Show error alert
         */
        function showErrorAlert(message) {
            errorMessage.textContent = message;
            errorAlert.classList.remove('hidden');
            successAlert.classList.add('hidden');
            
            // Scroll to top to ensure alert is visible
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
        
        /**
         * Hide all alerts
         */
        function hideAlerts() {
            successAlert.classList.add('hidden');
            errorAlert.classList.add('hidden');
        }
        
        /**
         * Toggle password visibility
         */
        function togglePasswordVisibility(inputId, button) {
            const passwordInput = document.getElementById(inputId);
            const isPasswordVisible = passwordInput.type === 'text';
            passwordInput.type = isPasswordVisible ? 'password' : 'text';
    
            // Update the button's icon for better UX
            const iconPath = isPasswordVisible
                ? `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />`
                : `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.051 10.051 0 0112 19c-4.478 0-8.268-2.943-9.542-7a10.032 10.032 0 013.2-4.45M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3l18 18" />`;
    
            button.querySelector('svg').innerHTML = iconPath;
        }
        
        /**
         * Set up OTP input behavior
         */
        function setupOtpInputs() {
            otpInputs.forEach((input, index) => {
                // Auto-focus next input when a digit is entered
                input.addEventListener('input', function() {
                    if (this.value.length === 1) {
                        const nextInput = document.querySelector(`.otp-input[data-index="${index + 2}"]`);
                        if (nextInput) {
                            nextInput.focus();
                        }
                    }
                });
                
                // Handle backspace to go to previous input
                input.addEventListener('keydown', function(e) {
                    if (e.key === 'Backspace' && this.value.length === 0) {
                        const prevInput = document.querySelector(`.otp-input[data-index="${index}"]`);
                        if (prevInput) {
                            prevInput.focus();
                        }
                    }
                });
                
                // Allow only numbers
                input.addEventListener('input', function() {
                    this.value = this.value.replace(/[^0-9]/g, '');
                });
            });
        }
        
        /**
         * Handle email form submission
         */
        function handleEmailSubmit(e) {
            e.preventDefault();
            
            // Hide any previous alerts
            hideAlerts();
            
            // Get email value
            const email = document.getElementById('email').value.trim();
            userEmail = email;
            
            // Validate email
            if (!email) {
                showError(emailError, 'Please enter your email address');
                return;
            }
            
            if (!isValidEmail(email)) {
                showError(emailError, 'Please enter a valid email address');
                return;
            }
            
            // Hide any previous errors
            hideError(emailError);
            
            // Show loading state
            const submitButton = emailForm.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = 'Sending...';
            
            // Send request to backend
            fetch('/reset-password-send-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show OTP modal
                    showOtpModal();
                    showSuccessAlert('OTP sent successfully to your email.');
                } else {
                    showErrorAlert(data.message || 'Failed to send OTP. Please try again.');
                    showError(emailError, data.message || 'Failed to send OTP. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showErrorAlert('An error occurred. Please try again later.');
                showError(emailError, 'An error occurred. Please try again later.');
            })
            .finally(() => {
                // Reset button state
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            });
            
            // For demo purposes, show the OTP modal without actual API call
            // Comment this out when connecting to a real backend
            // showOtpModal();
            // showSuccessAlert('OTP sent successfully to your email.');
        }
        
        /**
         * Handle OTP form submission
         */
        function handleOtpSubmit(e) {
            e.preventDefault();
            
            // Hide any previous alerts
            hideAlerts();
            
            // Get OTP value
            const otpValue = Array.from(otpInputs).map(input => input.value).join('');
            
            // Validate OTP
            if (otpValue.length !== 6 || !/^\d+$/.test(otpValue)) {
                showError(otpError, 'Please enter a valid 6-digit code');
                return;
            }
            
            // Hide any previous errors
            hideError(otpError);
            
            // Show loading state
            const submitButton = otpForm.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = 'Verifying...';
            
            // Send request to backend
            fetch('/reset-password-verify-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    email: userEmail,
                    otp: otpValue 
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Store token for password reset
                    otpToken = data.token;
                    
                    // Hide OTP modal and show reset password form
                    hideOtpModal();
                    showResetPasswordForm();
                    showSuccessAlert('OTP verified successfully. Please set your new password.');
                } else {
                    showError(otpError, data.message || 'Invalid OTP. Please try again.');
                    showErrorAlert(data.message || 'Invalid OTP. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showError(otpError, 'An error occurred. Please try again later.');
                showErrorAlert('An error occurred. Please try again later.');
            })
            .finally(() => {
                // Reset button state
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            });
            
            // For demo purposes, proceed without actual API call
            // Comment this out when connecting to a real backend
            // hideOtpModal();
            // showResetPasswordForm();
            // showSuccessAlert('OTP verified successfully. Please set your new password.');
        }
        
        /**
         * Handle reset password form submission
         */
        function handleResetPasswordSubmit(e) {
            e.preventDefault();
            
            // Hide any previous alerts
            hideAlerts();
            
            // Get password values
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            // Validate passwords
            if (!newPassword) {
                showError(newPasswordError, 'Please enter a new password');
                return;
            }
            
            if (!isValidPassword(newPassword)) {
                showError(newPasswordError, 'Password does not meet requirements');
                return;
            }
            
            if (newPassword !== confirmPassword) {
                showError(confirmPasswordError, 'Passwords do not match');
                return;
            }
            
            // Hide any previous errors
            hideError(newPasswordError);
            hideError(confirmPasswordError);
            
            // Show loading state
            const submitButton = resetPasswordForm.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = 'Resetting...';
            
            // Send request to backend
            fetch('/reset-password', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    email: userEmail,
                    token: otpToken,
                    password: newPassword 
                }),
            })
            .then(response => {
                if (response.ok) {
                    return response.json().then(data => {
                        // Show success message
                        showSuccessMessage();
                        showSuccessAlert(data.message || 'Password reset successful. You can now login with your new password.');
                        
                        // Redirect to login page after a short delay
                        setTimeout(() => {
                            window.location.href = '/login';
                        }, 3000);
                    });
                } else {
                    return response.json().then(data => {
                        showError(newPasswordError, data.message || 'Failed to reset password. Please try again.');
                        showErrorAlert(data.message || 'Failed to reset password. Please try again.');
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showError(newPasswordError, 'An error occurred. Please try again later.');
                showErrorAlert('An error occurred. Please try again later.');
            })
            .finally(() => {
                // Reset button state
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            });
            
            // For demo purposes, show success without actual API call
            // Comment this out when connecting to a real backend
            // showSuccessMessage();
            // showSuccessAlert('Password reset successful. You can now login with your new password.');
            // setTimeout(() => {
            //     window.location.href = '/login';
            // }, 3000);
        }
        
        /**
         * Handle resend OTP button click
         */
        function handleResendOtp() {
            // Hide any previous alerts
            hideAlerts();
            
            // Disable button temporarily
            resendOtpButton.disabled = true;
            resendOtpButton.textContent = 'Sending...';
            
            // Send request to backend
            fetch('/reset-password-send-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email: userEmail }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Start countdown timer
                    startResendCountdown();
                    showSuccessAlert('OTP resent successfully to your email.');
                } else {
                    showError(otpError, data.message || 'Failed to resend OTP. Please try again.');
                    showErrorAlert(data.message || 'Failed to resend OTP. Please try again.');
                    resendOtpButton.disabled = false;
                    resendOtpButton.textContent = 'Resend OTP';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showError(otpError, 'An error occurred. Please try again later.');
                showErrorAlert('An error occurred. Please try again later.');
                resendOtpButton.disabled = false;
                resendOtpButton.textContent = 'Resend OTP';
            });
            
            // For demo purposes, simulate success without actual API call
            // Comment this out when connecting to a real backend
            // startResendCountdown();
            // showSuccessAlert('OTP resent successfully to your email.');
        }

        /**
         * Start countdown timer for resend OTP button
         */
        let countdownTimer;
        function startResendCountdown() {
            // Clear any existing timer
            if (countdownTimer) {
                clearInterval(countdownTimer);
            }
            
            // Set initial countdown time (60 seconds)
            let timeLeft = 60;
            
            // Update button text and keep it disabled
            resendOtpButton.disabled = true;
            resendOtpButton.textContent = `Resend OTP (${timeLeft}s)`;
            
            // Start countdown
            countdownTimer = setInterval(() => {
                timeLeft--;
                
                if (timeLeft <= 0) {
                    // Time's up, enable the button
                    clearInterval(countdownTimer);
                    resendOtpButton.disabled = false;
                    resendOtpButton.textContent = 'Resend OTP';
                } else {
                    // Update countdown text
                    resendOtpButton.textContent = `Resend OTP (${timeLeft}s)`;
                }
            }, 1000);
        }
        
        /**
         * Show OTP modal
         */
        function showOtpModal() {
            otpModal.classList.remove('hidden');
            otpModal.classList.add('modal-enter');
            setTimeout(() => {
                otpModal.classList.remove('modal-enter');
                otpModal.classList.add('modal-enter-active');
                // Focus first OTP input
                otpInputs[0].focus();
            }, 10);
            
            // Clear any previous OTP values
            otpInputs.forEach(input => {
                input.value = '';
            });
            
            // Start countdown for resend button when modal is shown
            startResendCountdown();
        }
        
        /**
         * Hide OTP modal
         */
        function hideOtpModal() {
            // Clear countdown timer when modal is closed
            if (countdownTimer) {
                clearInterval(countdownTimer);
            }
            
            otpModal.classList.add('modal-exit');
            setTimeout(() => {
                otpModal.classList.add('hidden');
                otpModal.classList.remove('modal-exit', 'modal-exit-active');
            }, 300);
        }
        
        /**
         * Show reset password form
         */
        function showResetPasswordForm() {
            emailStep.classList.add('hidden');
            resetPasswordStep.classList.remove('hidden');
            successStep.classList.add('hidden');
        }
        
        /**
         * Show success message
         */
        function showSuccessMessage() {
            emailStep.classList.add('hidden');
            resetPasswordStep.classList.add('hidden');
            successStep.classList.remove('hidden');
        }
        
        /**
         * Show error message
         */
        function showError(element, message) {
            element.textContent = message;
            element.classList.remove('hidden');
        }
        
        /**
         * Hide error message
         */
        function hideError(element) {
            element.textContent = '';
            element.classList.add('hidden');
        }
        
        /**
         * Validate email format
         */
        function isValidEmail(email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailRegex.test(email);
        }
        
        /**
         * Validate password strength
         */
        function isValidPassword(password) {
            // At least 8 characters, 1 uppercase, 1 number, 1 special character
            const passwordRegex = /^(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{8,}$/;
            return passwordRegex.test(password);
        }
        
        // Show loader on navigation
        document.addEventListener("DOMContentLoaded", function() {
            const links = document.querySelectorAll("a");
            links.forEach(link => {
                link.addEventListener("click", function() {
                    if (typeof showLoader === 'function') {
                        showLoader();
                    }
                });
            });
        });
    </script>
</body>
</html>