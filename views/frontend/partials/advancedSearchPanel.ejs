<div class="bg-white rounded-2xl shadow-md p-4 md:p-6 mb-6 md:mb-8 overflow-hidden">
    <div class="flex items-center justify-between mb-4">
        <h3 class="text-base md:text-lg font-semibold text-gray-800">Advanced Search</h3>
        <button id="toggleFilters" class="text-purple-600 hover:text-purple-800 text-xs md:text-sm font-medium flex items-center">
            <span id="filterText">Hide Filters</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1 transition-transform duration-300" viewBox="0 0 20 20" fill="currentColor">
                <path id="filterIcon" fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
        </button>
    </div>
    
    <div id="filterContent" class="transition-all duration-300 origin-top">
        <form id="searchForm" action="/shop" method="GET" class="space-y-6">
            <div class="flex flex-col md:flex-row gap-4">
                <!-- Search Input with Button -->
                <div class="flex">
                    <input type="text" 
                           id="searchInput"
                           name="search"
                           value="<%= typeof search !== 'undefined' ? search : '' %>"
                           placeholder="Search products..."
                           class="w-full pl-4 pr-4 py-2 text-sm md:text-base rounded-l-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
                    <button type="submit" 
                            id="searchButton"
                            class="bg-purple-600 hover:bg-purple-700 text-white px-3 py-2 md:px-4 md:py-2.5 rounded-r-lg transition-colors duration-200 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                      <span class="ml-1 hidden sm:inline text-xs md:text-sm">Search</span>
                    </button>
                  </div>

                <!-- Sort Dropdown -->
                <div class="w-full md:w-64">  
                    <div class="relative">
                        <select id="sortSelect" 
                                name="sort"
                                class="w-full appearance-none px-4 py-2 text-sm md:text-base rounded-lg border border-gray-300 bg-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 pr-10">
                            <option value="popularity_desc" <%= (sort + '_' + order) === 'popularity_desc' ? 'selected' : '' %>>Popularity</option>
                            <option value="price_asc" <%= (sort + '_' + order) === 'price_asc' ? 'selected' : '' %>>Price: Low to High</option>
                            <option value="price_desc" <%= (sort + '_' + order) === 'price_desc' ? 'selected' : '' %>>Price: High to Low</option>
                            <option value="isTopModel_desc" <%= (sort + '_' + order) === 'isTopModel_desc' ? 'selected' : '' %>>Featured</option>
                            <option value="product_name_asc" <%= (sort + '_' + order) === 'product_name_asc' ? 'selected' : '' %>>Alphabetical: A-Z</option>
                            <option value="product_name_desc" <%= (sort + '_' + order) === 'product_name_desc' ? 'selected' : '' %>>Alphabetical: Z-A</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                            </svg>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters Row -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <!-- Category Filters -->
                <div class="col-span-2">
                    <label class="block text-xs md:text-sm font-medium text-gray-700 mb-2">Categories</label>
                    <div class="flex flex-wrap gap-2 category-filters">
                        <button type="button" data-category="all"
                            class="relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-xs md:text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-purple-600 to-blue-500 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 category-btn <%= category === 'all' ? 'active-category' : '' %>">
                            <span class="relative px-3 py-2 transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-transparent <%= category === 'all' ? 'bg-transparent text-white' : '' %>">
                                All
                            </span>
                        </button>
                        <% categories.forEach(cat => { %>
                            <button type="button" data-category="<%= cat.name.toLowerCase() %>"
                                class="relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-xs md:text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-purple-600 to-blue-500 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 category-btn <%= category === cat.name.toLowerCase() ? 'active-category' : '' %>">
                                <span class="relative px-3 py-2 transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-transparent <%= category === cat.name.toLowerCase() ? 'bg-transparent text-white' : '' %>">
                                    <%= cat.name %>
                                </span>
                            </button>
                        <% }); %>
                    </div>
                    <input type="hidden" id="categoryInput" name="category" value="<%= category %>">
                </div>
                
                <!-- Price Range Filter -->
                <div>
                    <style>
                        /* Custom styles for the noUiSlider */
                        #priceRange .noUi-connect {
                            background: linear-gradient(to right, #9333ea, #3b82f6);
                        }
                    
                        #priceRange .noUi-handle {
                            background: linear-gradient(to right, #9333ea, #3b82f6);
                            border: none;
                            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                        }
                    
                        #priceRange .noUi-handle::before,
                        #priceRange .noUi-handle::after {
                            background: white;
                        }
                    
                        #priceRange .noUi-target {
                            border: 1px solid #9333ea;
                            box-shadow: none;
                        }
                    
                        #priceRange .noUi-horizontal .noUi-handle {
                            width: 18px;
                            height: 18px;
                            right: -9px;
                            top: -6px;
                            border-radius: 50%;
                        }
                    
                        #priceRange .noUi-horizontal {
                            height: 8px;
                        }
                    </style>
                    <label class="block text-xs md:text-sm font-medium text-gray-700 mb-2">Price Range</label>
                    <div class="px-2">
                        <div class="mb-4 flex justify-between text-xs md:text-sm font-medium text-gray-700">
                            <span>₹<span id="priceMinValue"><%= minPrice %></span></span>
                            <span>₹<span id="priceMaxValue"><%= maxPrice %></span></span>
                        </div>
                        <div id="priceRange" class="range-slider mb-4"></div>
                        <input type="hidden" id="minPriceInput" name="minPrice" value="<%= minPrice %>">
                        <input type="hidden" id="maxPriceInput" name="maxPrice" value="<%= maxPrice %>">
                    </div>
                </div>
            </div>

            <!-- Hidden Fields for State Preservation -->
            <input type="hidden" id="pageInput" name="page" value="1">
            <input type="hidden" id="orderInput" name="order" value="<%= order %>">
            <input type="hidden" id="searchValueHidden" name="searchValue" value="">
            
            <!-- Action Buttons -->
            <div class="flex justify-between pt-4 border-t border-gray-200">
                <button type="button" id="resetFilters" class="px-4 py-2 border border-gray-300 rounded-lg text-xs md:text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                    Reset Filters
                </button>
                <button type="submit" class="px-4 py-2 bg-purple-600 text-xs md:text-sm text-white rounded-lg hover:bg-purple-700 transition-colors duration-200 shadow-md">
                    Apply Filters
                </button>
            </div>
        </form>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Cache DOM elements
        const searchInput = document.getElementById('searchInput');
        const searchValueHidden = document.getElementById('searchValueHidden');
        const searchButton = document.getElementById('searchButton');
        const sortSelect = document.getElementById('sortSelect');
        const categoryButtons = document.querySelectorAll('.category-btn');
        const categoryInput = document.getElementById('categoryInput');
        const minPriceInput = document.getElementById('minPriceInput');
        const maxPriceInput = document.getElementById('maxPriceInput');
        const pageInput = document.getElementById('pageInput');
        const orderInput = document.getElementById('orderInput');
        const resetFilters = document.getElementById('resetFilters');
        const clearFilters = document.getElementById('clearFilters');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const productsContainer = document.getElementById('productsContainer');
        const searchForm = document.getElementById('searchForm');
        
        // Toggle Filter Panel with smooth animation
        const toggleFilters = document.getElementById('toggleFilters');
        const filterContent = document.getElementById('filterContent');
        const filterText = document.getElementById('filterText');
        const filterIcon = document.getElementById('filterIcon');
        
        // Initialize panel state from localStorage or default to open
        const isPanelOpen = localStorage.getItem('filterPanelOpen') !== 'false';
        
        // Set initial state
        if (!isPanelOpen) {
            filterContent.style.maxHeight = '0';
            filterContent.style.opacity = '0';
            filterContent.style.overflow = 'hidden';
            filterText.textContent = 'Show Filters';
            filterIcon.style.transform = 'rotate(-90deg)';
        } else {
            filterContent.style.maxHeight = filterContent.scrollHeight + 'px';
            filterContent.style.opacity = '1';
            filterContent.style.overflow = 'visible';
        }
        
        toggleFilters.addEventListener('click', function() {
            const isOpen = filterContent.style.maxHeight !== '0px';
            
            if (isOpen) {
                // Close panel
                filterContent.style.maxHeight = '0';
                filterContent.style.opacity = '0';
                filterContent.style.overflow = 'hidden';
                filterText.textContent = 'Show Filters';
                filterIcon.style.transform = 'rotate(-90deg)';
                localStorage.setItem('filterPanelOpen', 'false');
            } else {
                // Open panel
                filterContent.style.maxHeight = filterContent.scrollHeight + 'px';
                filterContent.style.opacity = '1';
                setTimeout(() => {
                    filterContent.style.overflow = 'visible';
                }, 300);
                filterText.textContent = 'Hide Filters';
                filterIcon.style.transform = 'rotate(0)';
                localStorage.setItem('filterPanelOpen', 'true');
            }
        });

        // Update hidden search value before form submission
        function updateSearchValue() {
            if (searchValueHidden) {
                searchValueHidden.value = searchInput.value.trim();
            }
        }
        
        // Submit event for the search form to trigger AJAX filtering
        searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            pageInput.value = 1;
            updateSearchValue();
            fetchFilteredResults();
        });
        
        // Search button click event
        if (searchButton) {
            searchButton.addEventListener('click', function(e) {
                e.preventDefault();
                pageInput.value = 1;
                updateSearchValue();
                fetchFilteredResults();
            });
        }
        
        // Use "keydown" instead of "keypress" for proper Enter key detection
        searchInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                pageInput.value = 1;
                updateSearchValue();
                fetchFilteredResults();
            }
        });
        
        // Sort dropdown change event
        sortSelect.addEventListener('change', function() {
            const [sortField, order] = this.value.split('_');
            orderInput.value = order;
            updateSearchValue();
            fetchFilteredResults();
        });
        
        // Category button click handlers
        categoryButtons.forEach(button => {
            button.addEventListener('click', function() {
                const category = this.getAttribute('data-category');
                categoryInput.value = category;
                
                // Update visual state
                categoryButtons.forEach(btn => {
                    btn.classList.remove('active-category');
                    const span = btn.querySelector('span');
                    span.classList.remove('bg-transparent', 'text-white');
                    span.classList.add('bg-white');
                });
                
                this.classList.add('active-category');
                const span = this.querySelector('span');
                span.classList.add('bg-transparent', 'text-white');
                span.classList.remove('bg-white');
                
                pageInput.value = 1; // Reset to first page when changing category
                updateSearchValue();
                fetchFilteredResults();
            });
        });
        
        // Function to fetch filtered results via AJAX
        function fetchFilteredResults() {
            // Show loading indicator if it exists
            if (loadingIndicator) {
                loadingIndicator.classList.remove('hidden');
            }
            
            if (productsContainer) {
                productsContainer.classList.add('fade-out');
            }
            
            // Make sure to get the current value directly from the input element
            const searchValue = searchInput.value.trim();
            
            // Debug: Log the search value before sending the request
            console.log('Sending search value:', searchValue);
            
            // Build query string from form inputs
            const params = new URLSearchParams();
            
            // Explicitly set the search parameter
            params.set('search', searchValue);
            
            // Set other parameters
            params.set('category', categoryInput.value);
            params.set('minPrice', minPriceInput.value);
            params.set('maxPrice', maxPriceInput.value);
            params.set('page', pageInput.value);
            
            // Get sort and order from sortSelect
            const [sortField, order] = sortSelect.value.split('_');
            orderInput.value = order;
            params.set('sort', sortField);
            params.set('order', order);
            
            // Log the full params string for debugging
            console.log('Full query params:', params.toString());
            
            // Fetch filtered results with GET method and no-cache
            fetch(`/shop?${params.toString()}`, {
                method: 'GET',
                cache: 'no-cache',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            .then(response => {
                console.log('Response status:', response.status);
                return response.text();
            })
            .then(html => {
                // Update URL without page reload
                const newUrl = `${window.location.pathname}?${params.toString()}`;
                window.history.pushState({ path: newUrl }, '', newUrl);
                
                // Parse the HTML response
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Update products container
                const newProductsContainer = doc.getElementById('productsContainer');
                if (newProductsContainer && productsContainer) {
                    productsContainer.innerHTML = newProductsContainer.innerHTML;
                }
                
                // Update pagination
                const newPaginationContainer = doc.getElementById('paginationContainer');
                const paginationContainer = document.getElementById('paginationContainer');
                if (newPaginationContainer && paginationContainer) {
                    paginationContainer.innerHTML = newPaginationContainer.innerHTML;
                    // Reattach event listeners to new pagination buttons
                    attachPaginationListeners();
                }
                
                // Reattach event listeners to new elements
                attachProductEventListeners();
                
                // Hide loading indicator and show products
                if (loadingIndicator) {
                    loadingIndicator.classList.add('hidden');
                }
                
                if (productsContainer) {
                    productsContainer.classList.remove('fade-out');
                    productsContainer.classList.add('fade-in');
                }
                
                // Apply saved view mode
                const currentViewMode = localStorage.getItem('viewMode') || 'grid';
                if (currentViewMode === 'list') {
                    const productsGrid = document.getElementById('productsGrid');
                    const productsList = document.getElementById('productsList');
                    if (productsGrid && productsList) {
                        productsGrid.classList.add('hidden');
                        productsList.classList.remove('hidden');
                    }
                }
            })
            .catch(error => {
                console.error('Error fetching filtered results:', error);
                if (loadingIndicator) {
                    loadingIndicator.classList.add('hidden');
                }
                showAlert('An error occurred while filtering products. Please try again.', 'error');
            });
        }
        
        // Attach event listeners to pagination buttons
        function attachPaginationListeners() {
            const paginationButtons = document.querySelectorAll('.pagination-btn');
            paginationButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const page = this.getAttribute('data-page');
                    pageInput.value = page;
                    updateSearchValue();
                    fetchFilteredResults();
                    
                    // Scroll to products section with offset for header
                    const productsSection = document.getElementById('products');
                    if (productsSection) {
                        const headerHeight = 80; // Approximate header height
                        const scrollPosition = productsSection.getBoundingClientRect().top + window.pageYOffset - headerHeight;
                        window.scrollTo({
                            top: scrollPosition,
                            behavior: 'smooth'
                        });
                    }
                });
            });
        }
        
        // Initialize pagination listeners
        attachPaginationListeners();
        
        // Initialize product event listeners
        attachProductEventListeners();
        
        // Initialize price slider if it exists
        const priceSlider = document.getElementById('priceRange');
        if (priceSlider && window.noUiSlider) {
            if (!priceSlider.noUiSlider) {
                noUiSlider.create(priceSlider, {
                    start: [`<%= minPrice %>`, `<%= maxPrice %>`],
                    connect: true,
                    range: {
                        'min': 0,
                        'max': 100000
                    },
                    step: 100,
                    format: {
                        to: value => Math.round(value),
                        from: value => value
                    }
                });
                
                // Update hidden inputs and display values
                priceSlider.noUiSlider.on('update', (values, handle) => {
                    const [min, max] = values.map(Number);
                    document.getElementById('priceMinValue').textContent = min;
                    document.getElementById('priceMaxValue').textContent = max;
                    document.getElementById('minPriceInput').value = min;
                    document.getElementById('maxPriceInput').value = max;
                });
                
                // Add change handler for AJAX approach
                priceSlider.noUiSlider.on('change', () => {
                    pageInput.value = 1; // Reset to first page when changing price
                    updateSearchValue();
                    fetchFilteredResults();
                });
            }
        }
        
        // Debounce function to limit how often a function is called
        function debounce(func, wait) {
            let timeout;
            return function() {
                const context = this;
                const args = arguments;
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    func.apply(context, args);
                }, wait);
            };
        }
        
        // Placeholder for product event listeners reattachment
        function attachProductEventListeners() {
            // Add any event listeners needed for product cards here
        }
        
        // Alert System
        window.showAlert = function(message, type = 'success') {
            const alertContainer = document.getElementById('alert-container');
            if (!alertContainer) return;
            
            // Create alert element
            const alertElement = document.createElement('div');
            alertElement.className = `mb-4 p-4 rounded-lg shadow-lg alert-animate-in ${
                type === 'success' 
                    ? 'bg-green-100 border border-green-400 text-green-700' 
                    : 'bg-red-100 border border-red-400 text-red-700'
            }`;
            
            // Create alert content
            alertElement.innerHTML = `
                <div class="flex justify-between items-center">
                    <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            ${type === 'success' 
                                ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd">'
                                : '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd">'
                            }
                        </svg>
                        <span>${message}</span>
                    </div>
                    <button class="text-current hover:text-gray-700" onclick="this.parentElement.parentElement.remove()">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>
            `;
            
            // Add alert to container
            alertContainer.appendChild(alertElement);
            
            // Remove alert after 3 seconds
            setTimeout(() => {
                alertElement.classList.remove('alert-animate-in');
                alertElement.classList.add('alert-animate-out');
                setTimeout(() => alertElement.remove(), 300);
            }, 3000);
        };
        
        // Reset filters
        resetFilters.addEventListener('click', function() {
            searchInput.value = '';
            if (searchValueHidden) {
                searchValueHidden.value = '';
            }
            categoryInput.value = 'all';
            
            // Reset category buttons
            categoryButtons.forEach(btn => {
                btn.classList.remove('active-category');
                const span = btn.querySelector('span');
                span.classList.remove('bg-transparent', 'text-white');
                span.classList.add('bg-white');
            });
            
            // Set "All" category as active
            const allCategoryBtn = document.querySelector('[data-category="all"]');
            if (allCategoryBtn) {
                allCategoryBtn.classList.add('active-category');
                const span = allCategoryBtn.querySelector('span');
                span.classList.add('bg-transparent', 'text-white');
                span.classList.remove('bg-white');
            }
            
            // Reset price slider
            if (priceSlider && priceSlider.noUiSlider) {
                priceSlider.noUiSlider.set([0, 100000]);
            }
            
            // Reset sort
            if (sortSelect) {
                sortSelect.value = 'popularity_desc';
            }
            
            // Submit the form via AJAX
            pageInput.value = 1;
            fetchFilteredResults();
        });
        
        if (clearFilters) {
            clearFilters.addEventListener('click', function() {
                window.location.href = '/shop';
            });
        }
        
        // For direct page loads, ensure searchValueHidden is properly initialized
        if (searchValueHidden && searchInput) {
            searchValueHidden.value = searchInput.value.trim();
        }
    });
</script>