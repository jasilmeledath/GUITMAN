<div id="musical-loader" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
  <div class="relative">
    <svg width="120" height="120" viewBox="0 0 120 120" class="animate-spin">
      <circle cx="60" cy="60" r="54" stroke="#4B5563" stroke-width="8" fill="none" />
      <circle cx="60" cy="60" r="54" stroke="#818CF8" stroke-width="8" stroke-dasharray="339.292" stroke-dashoffset="339.292" fill="none">
        <animate attributeName="stroke-dashoffset" dur="1.5s" repeatCount="indefinite" from="339.292" to="0" />
      </circle>
    </svg>
    <div class="absolute inset-0 flex items-center justify-center">
      <svg width="60" height="60" viewBox="0 0 24 24" fill="#818CF8">
        <path d="M19.8 6.18l-7.22 4.17a2 2 0 0 1-2.12 0L3.24 6.18a1 1 0 0 1 0-1.73l7.22-4.17a2 2 0 0 1 2.12 0l7.22 4.17a1 1 0 0 1 0 1.73z"/>
      </svg>
    </div>
    <div class="musical-notes">
      <span class="note">♪</span>
      <span class="note">♫</span>
      <span class="note">♩</span>
      <span class="note">♬</span>
      <span class="note">♭</span>
      <span class="note">♮</span>
    </div>
  </div>
</div>

<style>
@keyframes circulate {
  0% { transform: rotate(0deg) translateX(40px) rotate(0deg); }
  100% { transform: rotate(360deg) translateX(40px) rotate(-360deg); }
}

.musical-notes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.musical-notes .note {
  position: absolute;
  top: 50%;
  left: 50%;
  font-size: 24px;
  color: #818CF8;
  animation: circulate 4s linear infinite;
}

.musical-notes .note:nth-child(2) { animation-delay: -0.6666s; }
.musical-notes .note:nth-child(3) { animation-delay: -1.3333s; }
.musical-notes .note:nth-child(4) { animation-delay: -2s; }
.musical-notes .note:nth-child(5) { animation-delay: -2.6666s; }
.musical-notes .note:nth-child(6) { animation-delay: -3.3333s; }
</style>

<script>
let activeRequests = 0;

function showLoader() {
  activeRequests++;
  document.getElementById('musical-loader').classList.remove('hidden');
}

function hideLoader() {
  activeRequests = Math.max(0, activeRequests - 1); // Ensure it doesn't go negative
  if (activeRequests === 0) {
    document.getElementById('musical-loader').classList.add('hidden');
  }
}

// Intercept AJAX requests to show/hide loader
(function() {
  const originalXHR = window.XMLHttpRequest;
  window.XMLHttpRequest = function() {
    const xhr = new originalXHR();
    xhr.addEventListener('loadstart', showLoader);
    xhr.addEventListener('loadend', hideLoader);
    return xhr;
  };
})();

// Intercept fetch requests to show/hide loader
(function() {
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    showLoader();
    return originalFetch.apply(this, args)
      .then(response => {
        hideLoader();
        return response;
      })
      .catch(error => {
        hideLoader();
        throw error;
      });
  };
})();

// Handle browser back/forward navigation
window.addEventListener("popstate", () => {
  hideLoader();
});

// Hide loader when user refreshes or leaves the page
window.addEventListener("beforeunload", () => {
  hideLoader();
  activeRequests = 0;
});
</script>