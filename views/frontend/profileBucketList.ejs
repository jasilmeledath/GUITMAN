<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Your Wishlist - Guitman</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            purple: {
              50: '#f5f3ff',
              100: '#ede9fe',
              200: '#ddd6fe',
              300: '#c4b5fd',
              400: '#a78bfa',
              500: '#8b5cf6',
              600: '#7c3aed',
              700: '#6d28d9',
              800: '#5b21b6',
              900: '#4c1d95',
              950: '#2e1065',
            }
          },
          animation: {
            'fade-in': 'fadeIn 0.3s ease-in-out',
            'fade-out': 'fadeOut 0.3s ease-in-out',
            'slide-up': 'slideUp 0.3s ease-in-out',
            'pulse-once': 'pulseOnce 2s ease-in-out',
          },
          keyframes: {
            fadeIn: {
              '0%': { opacity: '0' },
              '100%': { opacity: '1' },
            },
            fadeOut: {
              '0%': { opacity: '1' },
              '100%': { opacity: '0' },
            },
            slideUp: {
              '0%': { transform: 'translateY(10px)', opacity: '0' },
              '100%': { transform: 'translateY(0)', opacity: '1' },
            },
            pulseOnce: {
              '0%, 100%': { opacity: '1' },
              '50%': { opacity: '0.6' },
            }
          },
        }
      }
    }
  </script>
  <style>
    body {
      font-family: "Inter", sans-serif;
    }

    .alert-animate-in {
      animation: fadeIn 0.3s ease-in-out;
    }

    .alert-animate-out {
      animation: fadeOut 0.3s ease-in-out;
    }

    .wishlist-item {
      transition: all 0.3s ease;
    }

    .wishlist-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    /* Loader styles */
    .mini-loader {
      border: 2px solid rgba(124, 58, 237, 0.1);
      border-radius: 50%;
      border-top: 2px solid #7c3aed;
      width: 16px;
      height: 16px;
      animation: spin 1s linear infinite;
      display: inline-block;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Heart animation */
    @keyframes heartBeat {
      0% { transform: scale(1); }
      14% { transform: scale(1.3); }
      28% { transform: scale(1); }
      42% { transform: scale(1.3); }
      70% { transform: scale(1); }
    }
    
    .heart-beat {
      animation: heartBeat 1s ease-in-out;
    }
  </style>
</head>

<body class="bg-gray-50">
  <%- include('./partials/loading') %>
  <%- include('./partials/header') %>

  <main class="mx-auto py-12 mt-16 bg-gradient-to-b from-purple-50 to-white min-h-screen">
    <div class="mx-auto max-w-screen-xl px-4 2xl:px-0">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-purple-900 mb-2">Your Bucketlist</h1>
        <p class="text-gray-600">Save your favorite items for later</p>
      </div>

      <!-- Alert Container -->
      <div id="alert-container" class="mb-6"></div>

      <!-- Wishlist Content -->
      <div class="mt-6">
        <% if (wishlist && wishlist.items && wishlist.items.length > 0) { %>
          <!-- Wishlist Controls -->
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
            <div class="flex items-center">
              <span class="text-sm text-purple-600 bg-purple-50 px-3 py-1 rounded-full">
                <%= wishlist.items.length %> <%= wishlist.items.length === 1 ? 'item' : 'items' %>
              </span>
            </div>
            <div class="flex items-center gap-3">
              <button id="clear-wishlist-btn" class="text-sm text-gray-600 hover:text-red-600 flex items-center transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
                Clear All
              </button>
              <button id="add-all-to-cart-btn" class="text-sm bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 flex items-center transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                Add All to Cart
              </button>
            </div>
          </div>

          <!-- Wishlist Items Grid -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="wishlist-items-container">
            <% wishlist.items.forEach(function(item) { 
              const product = item.product;
              const productId = product && product._id ? product._id : item.productId;
            %>
              <div class="wishlist-item bg-white rounded-xl border border-purple-100 shadow-sm overflow-hidden animate-fade-in" 
                   id="wishlist-item-<%= productId %>" data-product-id="<%= productId %>">
                <!-- Product Image -->
                <div class="relative h-48 overflow-hidden bg-white-50">
                  <a href="/product-details/<%= productId %>">
                    <img src="/<%= product && product.images ? product.images[0] : 'default-image.png' %>" 
                         alt="<%= product && product.product_name ? product.product_name : 'Product' %>" 
                         class="w-full h-full object-contain p-4 transition-transform duration-300 hover:scale-105" />
                  </a>
                  <!-- Remove from wishlist button -->
                  <button class="remove-from-wishlist absolute top-2 right-2 p-2 bg-white rounded-full shadow-sm hover:bg-red-50 transition-colors duration-200"
                          data-product-id="<%= productId %>">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                            d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                    </svg>
                  </button>
                </div>
                
                <!-- Product Details -->
                <div class="p-4">
                  <a href="/product-details/<%= productId %>" class="block">
                    <h3 class="font-semibold text-gray-900 mb-1 hover:text-purple-700 transition-colors duration-200">
                      <%= product && product.product_name ? product.product_name : 'Product Name Not Available' %>
                    </h3>
                  </a>
                  
                  <div class="flex items-center mb-3">
                    <% if (product && product.rating) { %>
                      <div class="flex items-center">
                        <% for (let i = 1; i <= 5; i++) { %>
                          <svg class="w-4 h-4 <%= i <= Math.round(product.rating) ? 'text-yellow-400' : 'text-gray-300' %>" 
                               fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                          </svg>
                        <% } %>
                        <span class="text-xs text-gray-500 ml-1">(<%= product.rating %>)</span>
                      </div>
                    <% } %>
                  </div>
                  
                  <div class="flex items-center justify-between">
                    <p class="text-lg font-bold text-purple-700">
                      â‚¹<%= product && product.price ? product.price.toLocaleString('en-IN') : 'N/A' %>
                    </p>
                    <button class="add-to-cart-btn p-2 bg-purple-100 rounded-full hover:bg-purple-200 transition-colors duration-200"
                            data-product-id="<%= productId %>">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                    </button>
                  </div>
                  
                  <% if (product && product.in_stock === false) { %>
                    <p class="text-xs text-red-600 mt-2">Out of stock</p>
                  <% } else if (product && product.stock_quantity && product.stock_quantity < 5) { %>
                    <p class="text-xs text-orange-600 mt-2">Only <%= product.stock_quantity %> left in stock</p>
                  <% } %>
                  
                  <% if (product && product.added_date) { %>
                    <p class="text-xs text-gray-500 mt-2">Added to wishlist: <%= new Date(product.added_date).toLocaleDateString() %></p>
                  <% } %>
                </div>
              </div>
            <% }); %>
          </div>

          <!-- Confirmation Modal -->
          <div id="confirmation-modal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
            <div class="absolute inset-0 bg-black opacity-50"></div>
            <div class="bg-white rounded-xl shadow-xl p-6 z-10 max-w-md w-full mx-4 animate-fade-in">
              <h3 class="text-xl font-bold text-purple-900 mb-4" id="modal-title">Remove Item</h3>
              <p class="mb-6 text-gray-600" id="modal-message">Are you sure you want to remove this item from your wishlist?</p>
              <div class="flex justify-end gap-4">
                <button id="cancel-action-btn" class="px-5 py-2.5 rounded-lg bg-gray-200 text-gray-800 font-medium hover:bg-gray-300 transition-colors">Cancel</button>
                <button id="confirm-action-btn" class="px-5 py-2.5 rounded-lg bg-red-600 text-white font-medium hover:bg-red-700 transition-colors">Remove</button>
              </div>
            </div>
          </div>

        <% } else { %>
          <!-- Empty Wishlist State -->
          <div class="flex flex-col items-center justify-center py-16 animate-fade-in">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-20 h-20 text-purple-300 mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
            <h2 class="text-2xl font-semibold text-purple-900 mb-2">Your wishlist is empty</h2>
            <p class="text-gray-600 mb-8 text-center max-w-md">Save items you love for later by clicking the heart icon on any product.</p>
            <a href="/shop" class="inline-flex items-center px-6 py-3 bg-purple-600 text-white font-medium rounded-lg hover:bg-purple-700 transition-colors">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              Explore Products
            </a>
          </div>
        <% } %>
    </div>
  </main>

  <%- include('./partials/footer') %>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Show loader function
      function showLoader() {
        const loaderElement = document.getElementById('page-loader');
        if (loaderElement) {
          loaderElement.classList.remove('hidden');
        }
      }
      
      // Hide loader function
      function hideLoader() {
        const loaderElement = document.getElementById('page-loader');
        if (loaderElement) {
          loaderElement.classList.add('hidden');
        }
      }

      // Show alert function
      function showAlert(message, type = 'success') {
        const alertContainer = document.getElementById('alert-container');
        if (!alertContainer) return;
        
        // Create alert element
        const alertElement = document.createElement('div');
        alertElement.className = `mb-4 p-4 rounded-lg shadow-lg alert-animate-in ${
          type === 'success' 
            ? 'bg-green-100 border border-green-400 text-green-700' 
            : 'bg-red-100 border border-red-400 text-red-700'
        }`;
        
        // Create alert content
        alertElement.innerHTML = `
          <div class="flex justify-between items-center">
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                ${type === 'success' 
                  ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd">'
                  : '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd">'
                }
              </svg>
              <span>${message}</span>
            </div>
            <button class="text-current hover:text-gray-700" onclick="this.parentElement.parentElement.remove()">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
              </svg>
            </button>
          </div>
        `;
        
        // Add alert to container
        alertContainer.appendChild(alertElement);
        
        // Remove alert after 3 seconds
        setTimeout(() => {
          alertElement.classList.remove('alert-animate-in');
          alertElement.classList.add('alert-animate-out');
          setTimeout(() => alertElement.remove(), 300);
        }, 3000);
      }

      // Variables for modal
      const modal = document.getElementById('confirmation-modal');
      const modalTitle = document.getElementById('modal-title');
      const modalMessage = document.getElementById('modal-message');
      const cancelActionBtn = document.getElementById('cancel-action-btn');
      const confirmActionBtn = document.getElementById('confirm-action-btn');
      let currentAction = null;
      let currentProductId = null;

      // Function to show modal
      function showModal(title, message, action, productId = null) {
        if (!modal) return;
        
        modalTitle.textContent = title;
        modalMessage.textContent = message;
        currentAction = action;
        currentProductId = productId;
        
        // Update confirm button text based on action
        if (confirmActionBtn) {
          confirmActionBtn.textContent = action === 'remove' ? 'Remove' : 'Clear All';
          confirmActionBtn.className = action === 'remove' 
            ? 'px-5 py-2.5 rounded-lg bg-red-600 text-white font-medium hover:bg-red-700 transition-colors'
            : 'px-5 py-2.5 rounded-lg bg-purple-600 text-white font-medium hover:bg-purple-700 transition-colors';
        }
        
        modal.classList.remove('hidden');
      }

      // Function to hide modal
      function hideModal() {
        if (!modal) return;
        modal.classList.add('hidden');
        currentAction = null;
        currentProductId = null;
      }

      // Handle remove from wishlist
      function removeFromWishlist(productId) {
        // Show mini loader in the button
        const button = document.querySelector(`.remove-from-wishlist[data-product-id="${productId}"]`);
        let originalContent;
        if (button) {
          originalContent = button.innerHTML;
          button.innerHTML = '<div class="mini-loader"></div>';
          button.disabled = true;
        }
        
        // Make API call to remove item
        fetch(`/wishlist/remove?productId=${productId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Remove item from UI with animation
            const item = document.getElementById(`wishlist-item-${productId}`);
            if (item) {
              item.classList.add('animate-fade-out');
              setTimeout(() => {
                item.remove();
                
                // Check if wishlist is now empty
                const container = document.getElementById('wishlist-items-container');
                if (container && container.children.length === 0) {
                  // Reload page to show empty state
                  location.reload();
                } else {
                  // Update item count
                  const countElement = document.querySelector('.text-purple-600.bg-purple-50');
                  if (countElement) {
                    const newCount = container.children.length;
                    countElement.textContent = `${newCount} ${newCount === 1 ? 'item' : 'items'}`;
                  }
                }
              }, 300);
            }
            
            showAlert('Item removed from wishlist', 'success');
          } else {
            // Restore button
            if (button) {
              button.innerHTML = originalContent;
              button.disabled = false;
            }
            
            showAlert(data.message || 'Failed to remove item from wishlist', 'error');
          }
        })
        .catch(error => {
          console.error('Error removing from wishlist:', error);
          
          // Restore button
          if (button) {
            button.innerHTML = originalContent;
            button.disabled = false;
          }
          
          showAlert('Network error. Please try again.', 'error');
        });
      }

      // Handle clear wishlist
      function clearWishlist() {
        showLoader();
        
        fetch('/wishlist/clear', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          hideLoader();
          
          if (data.success) {
            // Reload page to show empty state
            location.reload();
          } else {
            showAlert(data.message || 'Failed to clear wishlist', 'error');
          }
        })
        .catch(error => {
          hideLoader();
          console.error('Error clearing wishlist:', error);
          showAlert('Network error. Please try again.', 'error');
        });
      }

      // Handle add to cart
      function addToCart(productId) {
        // Show mini loader in the button
        const button = document.querySelector(`.add-to-cart-btn[data-product-id="${productId}"]`);
        if (button) {
          const originalContent = button.innerHTML;
          button.innerHTML = '<div class="mini-loader"></div>';
          button.disabled = true;
          
          fetch('/cart/add', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ productId, quantity: 1 })
          })
          .then(response => response.json())
          .then(data => {
            // Restore button
            button.innerHTML = originalContent;
            button.disabled = false;
            
            if (data.success) {
              showAlert(data.message || 'Item added to cart', 'success');
              
              // Update cart count in header if available
              const cartCountElement = document.querySelector('#cart-btn span');
              if (cartCountElement && data.cartCount) {
                cartCountElement.textContent = data.cartCount;
                cartCountElement.classList.add('animate-pulse-once');
              }
            } else {
              showAlert(data.message || 'Failed to add item to cart', 'error');
            }
          })
          .catch(error => {
            // Restore button
            button.innerHTML = originalContent;
            button.disabled = false;
            
            console.error('Error adding to cart:', error);
            showAlert('Network error. Please try again.', 'error');
          });
        }
      }

      // Handle add all to cart
      function addAllToCart() {
        const addAllButton = document.getElementById('add-all-to-cart-btn');
        if (!addAllButton) return;
        
        // Get all product IDs
        const productIds = Array.from(document.querySelectorAll('.wishlist-item'))
          .map(item => item.getAttribute('data-product-id'));
        
        if (productIds.length === 0) {
          showAlert('No items to add to cart', 'error');
          return;
        }
        
        // Show loader in button
        const originalContent = addAllButton.innerHTML;
        addAllButton.innerHTML = '<div class="mini-loader mr-2"></div> Adding...';
        addAllButton.disabled = true;
        
        fetch('/cart/add-multiple', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({ productIds })
        })
        .then(response => response.json())
        .then(data => {
          // Restore button
          addAllButton.innerHTML = originalContent;
          addAllButton.disabled = false;
          
          if (data.success) {
            showAlert(data.message || 'All items added to cart', 'success');
            
            // Update cart count in header if available
            const cartCountElement = document.querySelector('#cart-btn span');
            if (cartCountElement && data.cartCount) {
              cartCountElement.textContent = data.cartCount;
              cartCountElement.classList.add('animate-pulse-once');
            }
          } else {
            showAlert(data.message || 'Failed to add items to cart', 'error');
          }
        })
        .catch(error => {
          // Restore button
          addAllButton.innerHTML = originalContent;
          addAllButton.disabled = false;
          
          console.error('Error adding all to cart:', error);
          showAlert('Network error. Please try again.', 'error');
        });
      }

      // Handle add to wishlist (for recommended products)
      function addToWishlist(productId) {
        // Show mini loader in the button
        const button = document.querySelector(`.add-to-wishlist[data-product-id="${productId}"]`);
        if (button) {
          const originalContent = button.innerHTML;
          button.innerHTML = '<div class="mini-loader"></div>';
          button.disabled = true;
          
          fetch('/wishlist/add', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ productId })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Update button to show filled heart
              button.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500 heart-beat" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                        d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
              `;
              
              showAlert('Item added to wishlist', 'success');
            } else {
              // Restore button
              button.innerHTML = originalContent;
              button.disabled = false;
              
              showAlert(data.message || 'Failed to add item to wishlist', 'error');
            }
          })
          .catch(error => {
            // Restore button
            button.innerHTML = originalContent;
            button.disabled = false;
            
            console.error('Error adding to wishlist:', error);
            showAlert('Network error. Please try again.', 'error');
          });
        }
      }

      // Event Listeners
      
      // Remove from wishlist buttons
      document.querySelectorAll('.remove-from-wishlist').forEach(button => {
        button.addEventListener('click', function() {
          const productId = this.getAttribute('data-product-id');
          showModal('Remove Item', 'Are you sure you want to remove this item from your wishlist?', 'remove', productId);
        });
      });
      
      // Clear wishlist button
      const clearWishlistBtn = document.getElementById('clear-wishlist-btn');
      if (clearWishlistBtn) {
        clearWishlistBtn.addEventListener('click', function() {
          showModal('Clear Wishlist', 'Are you sure you want to clear your entire wishlist?', 'clear');
        });
      }
      
      // Add to cart buttons
      document.querySelectorAll('.add-to-cart-btn').forEach(button => {
        button.addEventListener('click', function() {
          const productId = this.getAttribute('data-product-id');
          addToCart(productId);
        });
      });
      
      // Add all to cart button
      const addAllToCartBtn = document.getElementById('add-all-to-cart-btn');
      if (addAllToCartBtn) {
        addAllToCartBtn.addEventListener('click', addAllToCart);
      }
      
      // Add to wishlist buttons (for recommended products)
      document.querySelectorAll('.add-to-wishlist').forEach(button => {
        button.addEventListener('click', function() {
          const productId = this.getAttribute('data-product-id');
          addToWishlist(productId);
        });
      });
      
      // Modal cancel button
      if (cancelActionBtn) {
        cancelActionBtn.addEventListener('click', hideModal);
      }
      
      // Modal confirm button
      if (confirmActionBtn) {
        confirmActionBtn.addEventListener('click', function() {
          if (currentAction === 'remove' && currentProductId) {
            hideModal();
            removeFromWishlist(currentProductId);
          } else if (currentAction === 'clear') {
            hideModal();
            clearWishlist();
          }
        });
      }
      
      // Close modal when clicking outside
      if (modal) {
        modal.addEventListener('click', function(e) {
          if (e.target === modal) {
            hideModal();
          }
        });
      }
      
      // Close modal with Escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
          hideModal();
        }
      });
      
      // Add navigation listeners
      document.querySelectorAll('a:not([href^="#"])').forEach(link => {
        link.addEventListener('click', function() {
          showLoader();
        });
      });
    });
  </script>
</body>
</html>
